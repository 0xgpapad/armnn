<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: LoadedNetwork Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_loaded_network.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_1_1_loaded_network-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">LoadedNetwork Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a48fe2df41d914c38c913160956acc706"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a48fe2df41d914c38c913160956acc706">WorkloadQueue</a> = std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; &gt;</td></tr>
<tr class="separator:a48fe2df41d914c38c913160956acc706"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1bf130efa381d53486c78ea417ea4db1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a1bf130efa381d53486c78ea417ea4db1">~LoadedNetwork</a> ()</td></tr>
<tr class="separator:a1bf130efa381d53486c78ea417ea4db1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16e72675c37a8f251cf02951e222d4ab"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a16e72675c37a8f251cf02951e222d4ab">CreateWorkingMemHandle</a> (<a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkId)</td></tr>
<tr class="memdesc:a16e72675c37a8f251cf02951e222d4ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new unique WorkingMemHandle object.  <a href="#a16e72675c37a8f251cf02951e222d4ab">More...</a><br /></td></tr>
<tr class="separator:a16e72675c37a8f251cf02951e222d4ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af616683424cb40d83b5a923db7f06f11"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#af616683424cb40d83b5a923db7f06f11">GetInputTensorInfo</a> (<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerId) const</td></tr>
<tr class="separator:af616683424cb40d83b5a923db7f06f11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b6b57945bc68f659e08d28c8a015e91"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a2b6b57945bc68f659e08d28c8a015e91">GetOutputTensorInfo</a> (<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerId) const</td></tr>
<tr class="separator:a2b6b57945bc68f659e08d28c8a015e91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74f5869a116f365d132abe745d9a0dd3"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a74f5869a116f365d132abe745d9a0dd3">ImportInputs</a> (const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;inputTensors)</td></tr>
<tr class="separator:a74f5869a116f365d132abe745d9a0dd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45c446bf8e355ec38b48488d0d6dfbc3"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a45c446bf8e355ec38b48488d0d6dfbc3">ImportOutputs</a> (const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;outputTensors)</td></tr>
<tr class="separator:a45c446bf8e355ec38b48488d0d6dfbc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa792fd8b43401e3d6665110cdb0af27b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#aa792fd8b43401e3d6665110cdb0af27b">ClearImportedInputs</a> (const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt; inputIds)</td></tr>
<tr class="separator:aa792fd8b43401e3d6665110cdb0af27b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af06f742ce80985a8fbbbc028c20259b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#af06f742ce80985a8fbbbc028c20259b1">ClearImportedOutputs</a> (const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt; outputIds)</td></tr>
<tr class="separator:af06f742ce80985a8fbbbc028c20259b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a878c3febb600fd2ccf3b5cb1f9a61e27"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a878c3febb600fd2ccf3b5cb1f9a61e27">EnqueueWorkload</a> (const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;inputTensors, const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;outputTensors)</td></tr>
<tr class="memdesc:a878c3febb600fd2ccf3b5cb1f9a61e27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Single thread execution of the loaded network.  <a href="#a878c3febb600fd2ccf3b5cb1f9a61e27">More...</a><br /></td></tr>
<tr class="separator:a878c3febb600fd2ccf3b5cb1f9a61e27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95b1c23f6f296a0c39383bef20fdd46a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a95b1c23f6f296a0c39383bef20fdd46a">Execute</a> (const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;inputTensors, const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;outputTensors, <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a> &amp;workingMemHandle, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt; preImportedInputs={}, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt; preImportedOutputs={})</td></tr>
<tr class="memdesc:a95b1c23f6f296a0c39383bef20fdd46a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thread safe execution of the loaded network.  <a href="#a95b1c23f6f296a0c39383bef20fdd46a">More...</a><br /></td></tr>
<tr class="separator:a95b1c23f6f296a0c39383bef20fdd46a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee8e1cb09e0d4dcbe64df111c5edd55e"><td class="memItemLeft" align="right" valign="top">const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_profiler.xhtml">IProfiler</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#aee8e1cb09e0d4dcbe64df111c5edd55e">GetProfiler</a> () const</td></tr>
<tr class="separator:aee8e1cb09e0d4dcbe64df111c5edd55e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf8558a23ae9be6e7ea165989f1fa808"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#aaf8558a23ae9be6e7ea165989f1fa808">FreeWorkingMemory</a> ()</td></tr>
<tr class="separator:aaf8558a23ae9be6e7ea165989f1fa808"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a091ea8d2d804c8902f3120fdf2a36512"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a091ea8d2d804c8902f3120fdf2a36512">RegisterDebugCallback</a> (const <a class="el" href="namespacearmnn.xhtml#a15f3ad9b5e4e3d46b0a6dda246a7bc28">DebugCallbackFunction</a> &amp;func)</td></tr>
<tr class="separator:a091ea8d2d804c8902f3120fdf2a36512"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23e33c3caadba06bcd5b50dc2c23c19e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a23e33c3caadba06bcd5b50dc2c23c19e">SendNetworkStructure</a> ()</td></tr>
<tr class="separator:a23e33c3caadba06bcd5b50dc2c23c19e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a390c87e27deac4f51af9533053b2ee14"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a390c87e27deac4f51af9533053b2ee14">IsAsyncEnabled</a> ()</td></tr>
<tr class="separator:a390c87e27deac4f51af9533053b2ee14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8be6c967db9e797ade32fa3db497422"><td class="memItemLeft" align="right" valign="top">profiling::ProfilingGuid&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#ac8be6c967db9e797ade32fa3db497422">GetNetworkGuid</a> ()</td></tr>
<tr class="separator:ac8be6c967db9e797ade32fa3db497422"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a8e94a5375ad367ddee9c69e04e110a54"><td class="memItemLeft" align="right" valign="top">static std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_loaded_network.xhtml">LoadedNetwork</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a8e94a5375ad367ddee9c69e04e110a54">MakeLoadedNetwork</a> (std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_optimized_network.xhtml">IOptimizedNetwork</a> &gt; net, std::string &amp;errorMessage, const <a class="el" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> &amp;networkProperties, <a class="el" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">profiling::ProfilingService</a> &amp;profilingService)</td></tr>
<tr class="separator:a8e94a5375ad367ddee9c69e04e110a54"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_loaded_network_8hpp_source.xhtml#l00041">41</a> of file <a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a48fe2df41d914c38c913160956acc706"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48fe2df41d914c38c913160956acc706">&#9670;&nbsp;</a></span>WorkloadQueue</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_1_1_loaded_network.xhtml#a48fe2df41d914c38c913160956acc706">WorkloadQueue</a> =  std::vector&lt;std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a>&gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8hpp_source.xhtml#l00044">44</a> of file <a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a1bf130efa381d53486c78ea417ea4db1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bf130efa381d53486c78ea417ea4db1">&#9670;&nbsp;</a></span>~LoadedNetwork()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_loaded_network.xhtml">LoadedNetwork</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8hpp_source.xhtml#l00046">46</a> of file <a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <a class="code" href="classarmnn_1_1_loaded_network.xhtml#aaf8558a23ae9be6e7ea165989f1fa808">FreeWorkingMemory</a>();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_loaded_network_xhtml_aaf8558a23ae9be6e7ea165989f1fa808"><div class="ttname"><a href="classarmnn_1_1_loaded_network.xhtml#aaf8558a23ae9be6e7ea165989f1fa808">armnn::LoadedNetwork::FreeWorkingMemory</a></div><div class="ttdeci">void FreeWorkingMemory()</div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8cpp_source.xhtml#l00902">LoadedNetwork.cpp:902</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa792fd8b43401e3d6665110cdb0af27b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa792fd8b43401e3d6665110cdb0af27b">&#9670;&nbsp;</a></span>ClearImportedInputs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ClearImportedInputs </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt;&#160;</td>
          <td class="paramname"><em>inputIds</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01241">1241</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00579">RuntimeImpl::ClearImportedInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;{</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keywordtype">id</span> : inputIds)</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    {</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;        <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &gt; m_PreImportedInputHandles.size())</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        {</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;ClearImportedInputs::Unknown ImportedInputId: {}&quot;</span>, <span class="keywordtype">id</span>));</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;        }</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;        <span class="keyword">auto</span>&amp; importedTensorHandle = m_PreImportedInputHandles[id].m_TensorHandle;</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;        <span class="keywordflow">if</span> (!importedTensorHandle)</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;        {</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;                    fmt::format(<span class="stringliteral">&quot;ClearImportedInputs::ImportedInput with id: {} has already been deleted&quot;</span>, <span class="keywordtype">id</span>));</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;        }</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;        <span class="comment">// Call Unimport then destroy the tensorHandle</span></div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;        importedTensorHandle-&gt;Unimport();</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;        importedTensorHandle = {};</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    }</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af06f742ce80985a8fbbbc028c20259b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af06f742ce80985a8fbbbc028c20259b1">&#9670;&nbsp;</a></span>ClearImportedOutputs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ClearImportedOutputs </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt;&#160;</td>
          <td class="paramname"><em>outputIds</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01262">1262</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00583">RuntimeImpl::ClearImportedOutputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;{</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keywordtype">id</span> : outputIds)</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;    {</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;        <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &gt; m_PreImportedOutputHandles.size())</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;        {</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;ClearImportedOutputs::Unknown ImportedOutputId: {}&quot;</span>, <span class="keywordtype">id</span>));</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;        }</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;       <span class="keyword">auto</span>&amp; importedTensorHandle = m_PreImportedOutputHandles[id].m_TensorHandle;</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;       <span class="keywordflow">if</span> (!importedTensorHandle)</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;       {</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;           <span class="keywordflow">throw</span> InvalidArgumentException(</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;                   fmt::format(<span class="stringliteral">&quot;ClearImportedOutputs::ImportedOutput with id: {} has already been deleted&quot;</span>, <span class="keywordtype">id</span>));</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;       }</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;       <span class="comment">// Call Unimport then destroy the tensorHandle</span></div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;       importedTensorHandle-&gt;Unimport();</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;       importedTensorHandle = {};</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    }</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a16e72675c37a8f251cf02951e222d4ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16e72675c37a8f251cf02951e222d4ab">&#9670;&nbsp;</a></span>CreateWorkingMemHandle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a> &gt; CreateWorkingMemHandle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a new unique WorkingMemHandle object. </p>
<p>Create multiple handles if you wish to have overlapped Execution by calling this function from different threads. </p>

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01505">1505</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">ITensorHandleFactory::CreateTensorHandle()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00269">Layer::GetBackendId()</a>, and <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00046">ITensorHandleFactory::LegacyFactoryId</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00653">RuntimeImpl::CreateWorkingMemHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;{</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;    Graph&amp; order = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph();</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    <span class="comment">// Tensors that will need to be allocated internally within armnn</span></div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    std::vector&lt;std::unique_ptr&lt;ITensorHandle&gt;&gt; managedTensorHandles;</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    <span class="comment">// Tensors that will be allocated externally by the user</span></div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    std::vector&lt;std::unique_ptr&lt;ITensorHandle&gt;&gt; unmanagedTensorHandles;</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;    std::vector&lt;WorkingMemDescriptor&gt; workingMemDescriptors;</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    std::unordered_map&lt;LayerGuid, WorkingMemDescriptor&gt; workingMemDescriptorMap;</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    <span class="keyword">auto</span> GetTensorHandle = [&amp;](<a class="code" href="namespacearmnn_serializer.xhtml#a9a8118be7780e95363d631cbca7e7800">Layer</a>* layer, <span class="keyword">const</span> OutputSlot&amp; outputSlot)</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;    {</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;        <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> factoryId = outputSlot.GetTensorHandleFactoryId();</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;        <span class="keyword">const</span> TensorInfo&amp; tensorInfo = outputSlot.GetTensorInfo();</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;        <span class="keywordflow">if</span> (factoryId == <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a9c95f90eb40e31f629e0e2947b8bc6f9">ITensorHandleFactory::LegacyFactoryId</a>)</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;        {</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;            BackendId <span class="keywordtype">id</span> = layer-&gt;GetBackendId();</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;            <span class="keywordflow">return</span> m_WorkloadFactories.at(<span class="keywordtype">id</span>)-&gt;CreateTensorHandle(tensorInfo, <span class="keyword">false</span>);</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;        }</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;        {</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;            ITensorHandleFactory* handleFactory = m_TensorHandleFactoryRegistry.<a class="code" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#ae5ecc42140a12c855554a4a621fc8456">GetFactory</a>(factoryId);</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(handleFactory);</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;            <span class="keywordflow">return</span> handleFactory-&gt;CreateTensorHandle(tensorInfo, <span class="keyword">false</span>);</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;        }</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    };</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    <span class="keyword">struct </span>HandleInfo</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;    {</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;        ITensorHandle* m_TensorHandle;</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;        <span class="keywordtype">bool</span> m_IsInputLayerHandle = <span class="keyword">false</span>;</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;        <span class="keywordtype">bool</span> m_IsOutputLayerHandle = <span class="keyword">false</span>;</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;        WorkingMemHandle::InputMemDescriptorCoords m_InputMemDescriptorCoords;</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;        WorkingMemHandle::OutputMemDescriptorCoords m_OutputMemDescriptorCoords;</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;    };</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;    std::unordered_map&lt;const OutputSlot*, HandleInfo&gt; outputToHandleInfoMap;</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> layerIndex = 0;</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; layer : order)</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;    {</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;        <span class="comment">// Constant layers execution and management is handled during loaded network construction</span></div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;        <span class="keywordflow">if</span> (layer-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">LayerType::Constant</a>)</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;        {</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;        }</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;        WorkingMemDescriptor workingMemDescriptor;</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;        <span class="keywordtype">bool</span> isMemoryManaged = <span class="keyword">true</span>;</div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;        <span class="keywordtype">bool</span> isInputLayer = <span class="keyword">false</span>;</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;        <span class="keywordtype">bool</span> isOutputLayer = <span class="keyword">false</span>;</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;        <span class="keywordtype">bool</span> isConnectedToOutputLayer = <span class="keyword">false</span>;</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;        <span class="keywordflow">if</span> (layer-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a> || layer-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">LayerType::MemImport</a>)</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;        {</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;            <span class="comment">// Input layers/workloads will not be executed so the descriptor is not added to workingMemDescriptors</span></div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;            <span class="comment">// However we will still need to manage the tensorHandle</span></div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;            isInputLayer = <span class="keyword">true</span>;</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;            isMemoryManaged = !m_NetworkProperties.m_ImportEnabled;</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;        }</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (layer-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>)</div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;        {</div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;            isOutputLayer = <span class="keyword">true</span>;</div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;        }</div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;</div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex = 0;</div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;        <span class="comment">// Create a tensor handle for each output slot of a layer</span></div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;        <span class="comment">// Once we create it, we start managing its lifetime</span></div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; slot : layer-&gt;GetOutputSlots())</div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;        {</div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; slot.GetNumConnections(); ++i)</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;            {</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;                <span class="keywordflow">if</span> ((slot.GetConnection(i)-&gt;GetOwningLayer().GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>))</div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;                {</div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;                    <span class="keywordflow">if</span> (!isConnectedToOutputLayer)</div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;                    {</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;                        isConnectedToOutputLayer = <span class="keyword">true</span>;</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;                        <span class="comment">// If Export is enabled disable memory management, so we can export, otherwise we do a copy</span></div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;                        isMemoryManaged = !m_NetworkProperties.m_ExportEnabled;</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;                    }</div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;                    <span class="keywordflow">else</span></div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;                    {</div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;                        <span class="comment">// Importing in this case would likely cause unexpected behaviour, so we disallow it.</span></div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">warning</a>) &lt;&lt;</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;                           fmt::format(<span class="stringliteral">&quot;Layer name: &#39;{0}&#39; guid: &#39;{1}&#39; has two or more OutputLayers connected to it. &quot;</span></div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;                                       <span class="stringliteral">&quot;This will prevent importing on the connected OutputLayers.&quot;</span>,</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;                                        layer-&gt;GetName(), layer-&gt;GetGuid());</div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;                        isMemoryManaged = <span class="keyword">true</span>;</div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;                    }</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;                }</div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;            }</div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;</div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;            ITensorHandle* tensorHandle;</div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;            <span class="keywordflow">if</span> (isMemoryManaged)</div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;            {</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;                managedTensorHandles.emplace_back(GetTensorHandle(layer, slot));</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;                tensorHandle = managedTensorHandles.back().get();</div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;            }</div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;            {</div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;                unmanagedTensorHandles.emplace_back(GetTensorHandle(layer, slot));</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;                tensorHandle = unmanagedTensorHandles.back().get();</div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;            }</div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;</div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;            workingMemDescriptor.m_Outputs.push_back(tensorHandle);</div><div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;</div><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;            HandleInfo&amp; handleInfo = outputToHandleInfoMap[&amp;slot];</div><div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;            handleInfo.m_TensorHandle = tensorHandle;</div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;</div><div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;            <span class="comment">// Store the coordinates of the current layer&#39;s OutputSlot that is connected to the OutputLayer</span></div><div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;            <span class="keywordflow">if</span> (isConnectedToOutputLayer)</div><div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;            {</div><div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;                handleInfo.m_IsOutputLayerHandle = <span class="keyword">true</span>;</div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;                handleInfo.m_OutputMemDescriptorCoords.m_OutputSlotCoords = {layerIndex, slotIndex};</div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;            }</div><div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;            <span class="comment">// Store the LayerBindingId of the InputLayer</span></div><div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;            <span class="keywordflow">if</span> (isInputLayer)</div><div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;            {</div><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;                handleInfo.m_IsInputLayerHandle = <span class="keyword">true</span>;</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;                <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> bindingId = <span class="keyword">static_cast&lt;</span>BindableLayer*<span class="keyword">&gt;</span>(layer)-&gt;GetBindingId();</div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;                handleInfo.m_InputMemDescriptorCoords.m_LayerBindingId = bindingId;</div><div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;            }</div><div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;            slotIndex++;</div><div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;        }</div><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;        <span class="comment">// Loop through the input slots in the same layer and decrement the reference counter associated</span></div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;        <span class="comment">// to each tensor handle we encounter.</span></div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;        <span class="comment">// Once it reaches zero, the lifetime of the tensor handle has ended, and we mark its memory as available</span></div><div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;        <span class="comment">// so that the next tensor handle with a non overlapping lifetime can share its memory.</span></div><div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; slot : layer-&gt;GetInputSlots())</div><div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;        {</div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(slot.GetConnection());</div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;            <span class="keyword">auto</span> outputSlot = slot.GetConnectedOutputSlot();</div><div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;            <span class="keyword">auto</span> key = outputSlot-&gt;GetOwningLayer().GetGuid();</div><div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;</div><div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;            <span class="comment">// Constant layers execution and management is handled during loaded network construction</span></div><div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;            <span class="keyword">auto</span> found = m_ConstantTensorHandles.find(key);</div><div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;            <span class="keywordflow">if</span> (found != m_ConstantTensorHandles.end())</div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;            {</div><div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;                ITensorHandle* tensorHandle = found-&gt;second;</div><div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;                workingMemDescriptor.m_Inputs.push_back(tensorHandle);</div><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;</div><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;                <span class="comment">// Odd case where a constant layer is connected to an output layer</span></div><div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;                <span class="comment">// We will need to create a HandleInfo to track it</span></div><div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;                <span class="keywordflow">if</span> (isOutputLayer)</div><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;                {</div><div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;                    <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> bindingId = <span class="keyword">static_cast&lt;</span>BindableLayer*<span class="keyword">&gt;</span>(layer)-&gt;GetBindingId();</div><div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;</div><div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;                    HandleInfo&amp; handleInfo = outputToHandleInfoMap[outputSlot];</div><div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;                    handleInfo.m_TensorHandle = tensorHandle;</div><div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;                    handleInfo.m_IsOutputLayerHandle = <span class="keyword">true</span>;</div><div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;                    handleInfo.m_OutputMemDescriptorCoords.m_LayerBindingIds.push_back(bindingId);</div><div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;                    handleInfo.m_OutputMemDescriptorCoords.m_InputSlotCoords.push_back({layerIndex, 0});</div><div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;                }</div><div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;            }</div><div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;</div><div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;            HandleInfo&amp; handleInfo = outputToHandleInfoMap.at(outputSlot);</div><div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;</div><div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;            ITensorHandle* inputTensorHandle = handleInfo.m_TensorHandle;</div><div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;            workingMemDescriptor.m_Inputs.push_back(inputTensorHandle);</div><div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;</div><div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;            <span class="comment">// Store the LayerBindingId of the OutputLayer</span></div><div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;            <span class="keywordflow">if</span> (isOutputLayer)</div><div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;            {</div><div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;                <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> bindingId = <span class="keyword">static_cast&lt;</span>BindableLayer*<span class="keyword">&gt;</span>(layer)-&gt;GetBindingId();</div><div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;                handleInfo.m_OutputMemDescriptorCoords.m_LayerBindingIds.push_back(bindingId);</div><div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;                handleInfo.m_OutputMemDescriptorCoords.m_InputSlotCoords.push_back({layerIndex, 0});</div><div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;            }</div><div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;            <span class="comment">// In this case the layer is not an Output Layer but shares its input tensorhandle with an OutputLayer</span></div><div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;            <span class="comment">// It will need to be updated as well, if we swap out the tensorhandle</span></div><div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (handleInfo.m_IsOutputLayerHandle)</div><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;            {</div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;                handleInfo.m_OutputMemDescriptorCoords.m_InputSlotCoords.push_back({layerIndex, slot.GetSlotIndex()});</div><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;            }</div><div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;</div><div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;            <span class="comment">// Store the coordinates of the InputSlots connected to the InputLayer</span></div><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;            <span class="comment">// There can be more than one InputSlot connected to an InputLayer, so we use a vector</span></div><div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;            <span class="keywordflow">if</span> (handleInfo.m_IsInputLayerHandle)</div><div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;            {</div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;                std::pair&lt;LayerGuid, unsigned int&gt; connectionLocation{layerIndex, slot.GetSlotIndex()};</div><div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;                handleInfo.m_InputMemDescriptorCoords.m_InputSlotCoords.emplace_back(connectionLocation);</div><div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;            }</div><div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;        }</div><div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;        workingMemDescriptorMap.insert({layer-&gt;GetGuid(), workingMemDescriptor});</div><div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;</div><div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;        <span class="comment">// Input/Output layers/workloads will not be executed, so the descriptor is not added to workingMemDescriptors</span></div><div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;        <span class="comment">// However we will still need to manage the tensorHandle</span></div><div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;        <span class="keywordflow">if</span> (!isInputLayer)</div><div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;        {</div><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;            workingMemDescriptors.push_back(workingMemDescriptor);</div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;            layerIndex++;</div><div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;        }</div><div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;    }</div><div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;</div><div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;    std::vector&lt;std::pair&lt;std::shared_ptr&lt;TensorMemory&gt;, <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a>&gt;&gt; tensorMemory;</div><div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;</div><div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;    <span class="keyword">auto</span> externalMemoryManager = CreateExternalMemoryManger(tensorMemory);</div><div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;</div><div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;    <span class="comment">// Sort m_TensorMemory, so it&#39;s order matches the outputSlot order</span></div><div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;    std::sort(tensorMemory.begin(), tensorMemory.end(),</div><div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;              [](<span class="keyword">const</span> std::pair&lt;std::shared_ptr&lt;TensorMemory&gt;, <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a>&gt;&amp; lhs,</div><div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;                 <span class="keyword">const</span> std::pair&lt;std::shared_ptr&lt;TensorMemory&gt;, <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a>&gt;&amp; rhs)</div><div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;              {</div><div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;                  <span class="keywordflow">return</span> lhs.first-&gt;m_OutputSlotId &lt; rhs.first-&gt;m_OutputSlotId;</div><div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;              });</div><div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;</div><div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;    std::vector&lt;WorkingMemHandle::InputMemDescriptorCoords&gt; inputConnectionsInfo;</div><div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;    std::vector&lt;WorkingMemHandle::OutputMemDescriptorCoords&gt; outputConnectionsInfo;</div><div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;</div><div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; handleInfo: outputToHandleInfoMap)</div><div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;    {</div><div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;        <span class="keywordflow">if</span> (handleInfo.second.m_IsOutputLayerHandle)</div><div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;        {</div><div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;            outputConnectionsInfo.emplace_back(handleInfo.second.m_OutputMemDescriptorCoords);</div><div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;        }</div><div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;</div><div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;        <span class="keywordflow">if</span> (handleInfo.second.m_IsInputLayerHandle)</div><div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;        {</div><div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;            inputConnectionsInfo.emplace_back(handleInfo.second.m_InputMemDescriptorCoords);</div><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;        }</div><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;    }</div><div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;</div><div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;WorkingMemHandle&gt;(networkId,</div><div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;                                              inputConnectionsInfo,</div><div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;                                              outputConnectionsInfo,</div><div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;                                              workingMemDescriptors,</div><div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;                                              workingMemDescriptorMap,</div><div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;                                              std::move(externalMemoryManager),</div><div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;                                              std::move(tensorMemory),</div><div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;                                              std::move(managedTensorHandles),</div><div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;                                              std::move(unmanagedTensorHandles));</div><div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;}</div><div class="ttc" id="_deprecated_8hpp_xhtml_ab66a241a0ed3ee89c866e777b035d0ed"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_BEGIN</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00033">Deprecated.hpp:33</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a9a8118be7780e95363d631cbca7e7800"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a9a8118be7780e95363d631cbca7e7800">armnnSerializer::Layer</a></div><div class="ttdeci">Layer</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_schema__generated_8h_source.xhtml#l01234">ArmnnSchema_generated.h:1234</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00202">Logging.hpp:202</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00277">Types.hpp:277</a></div></div>
<div class="ttc" id="_deprecated_8hpp_xhtml_ad762b11b48e5c1d1c1743f529485728a"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_END</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00034">Deprecated.hpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::BoostLogSeverityMapping::warning</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::LayerType::MemImport</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">armnn::MemorySource</a></div><div class="ttdeci">MemorySource</div><div class="ttdoc">Define the Memory Source to reduce copies. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00217">Types.hpp:217</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_handle_factory_registry_xhtml_ae5ecc42140a12c855554a4a621fc8456"><div class="ttname"><a href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#ae5ecc42140a12c855554a4a621fc8456">armnn::TensorHandleFactoryRegistry::GetFactory</a></div><div class="ttdeci">ITensorHandleFactory * GetFactory(ITensorHandleFactory::FactoryId id) const</div><div class="ttdoc">Find a TensorHandleFactory by Id Returns nullptr if not found. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00039">TensorHandleFactoryRegistry.cpp:39</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml_a32f4aa6a7089d877af08928139c2c277"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">armnn::ITensorHandleFactory::FactoryId</a></div><div class="ttdeci">std::string FactoryId</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00045">ITensorHandleFactory.hpp:45</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255"><div class="ttname"><a href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::PaddingMode::Constant</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml_a9c95f90eb40e31f629e0e2947b8bc6f9"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a9c95f90eb40e31f629e0e2947b8bc6f9">armnn::ITensorHandleFactory::LegacyFactoryId</a></div><div class="ttdeci">static const FactoryId LegacyFactoryId</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00046">ITensorHandleFactory.hpp:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a878c3febb600fd2ccf3b5cb1f9a61e27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a878c3febb600fd2ccf3b5cb1f9a61e27">&#9670;&nbsp;</a></span>EnqueueWorkload()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> EnqueueWorkload </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>outputTensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Single thread execution of the loaded network. </p>

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l00636">636</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00202">ARMNN_LOG</a>, <a class="el" href="_heap_profiling_8hpp_source.xhtml#l00045">ARMNN_SCOPED_HEAP_PROFILING</a>, <a class="el" href="_profiling_8hpp_source.xhtml#l00220">ARMNN_SCOPED_PROFILING_EVENT</a>, <a class="el" href="_memory_sources_8hpp_source.xhtml#l00041">armnn::CheckFlag()</a>, <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Failure</a>, <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00069">ITensorHandle::GetImportFlags()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00188">Graph::GetInputLayers()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00237">Layer::GetInputSlots()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00183">Graph::GetNumInputs()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00313">Layer::GetNumInputSlots()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00194">Graph::GetNumLayers()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00184">Graph::GetNumOutputs()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00314">Layer::GetNumOutputSlots()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00225">Layer::GetOutputHandler()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00192">Graph::GetOutputLayers()</a>, <a class="el" href="_timeline_utility_methods_8cpp_source.xhtml#l00018">TimelineUtilityMethods::GetTimelineUtils()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00265">Layer::GetType()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00075">ITensorHandle::Import()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00030">QueueDescriptor::m_Inputs</a>, <a class="el" href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00018">WorkloadInfo::m_InputTensorInfos</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00031">QueueDescriptor::m_Outputs</a>, <a class="el" href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00019">WorkloadInfo::m_OutputTensorInfos</a>, <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a9afbc055a017adf1bc38ee137bca6e90">ITensorHandle::Map()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Success</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>, <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a563609828050f1b3a7868c23f3365923">ITensorHandle::Unmap()</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::warning</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00588">RuntimeImpl::EnqueueWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;{</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <span class="keyword">const</span> Graph&amp; graph = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph();</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="comment">// Walk graph to determine the order of execution.</span></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <span class="keywordflow">if</span> (graph.GetNumLayers() &lt; 2)</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    {</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">warning</a>) &lt;&lt; <span class="stringliteral">&quot;IRuntime::EnqueueWorkload()::Less than two nodes in graph&quot;</span>;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">Status::Failure</a>;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    }</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="comment">// Data that must be kept alive for the entire execution of the workload.</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    WorkloadData workloadData(inputTensors, outputTensors);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordflow">if</span> (graph.GetNumInputs() != inputTensors.size())</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    {</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Number of inputs provided does not match network.&quot;</span>);</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    }</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <span class="comment">// For each input to the network, call EnqueueInput with the data passed by the user.</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    {</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;PrepareInputs&quot;</span>);</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        m_InputQueue.clear();</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        m_InputQueue.reserve(graph.GetNumInputs());</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> BindableLayer* inputLayer : graph.GetInputLayers())</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        {</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            <span class="keyword">const</span> TensorPin&amp; pin = workloadData.GetInputTensorPin(inputLayer-&gt;GetBindingId());</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            EnqueueInput(*inputLayer, pin.GetTensorHandle(), pin.GetTensorInfo());</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        }</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    }</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="comment">// For each output to the network, call EnqueueOutput with the data passed by the user.</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    {</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;PrepareOutputs&quot;</span>);</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        m_OutputQueue.clear();</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        m_OutputQueue.reserve(graph.GetNumOutputs());</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> BindableLayer* outputLayer : graph.GetOutputLayers())</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        {</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;            <span class="keyword">const</span> TensorPin&amp; pin = workloadData.GetOutputTensorPin(outputLayer-&gt;GetBindingId());</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            EnqueueOutput(*outputLayer, pin.GetTensorHandle(), pin.GetTensorInfo());</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        }</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    }</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    std::unique_ptr&lt;TimelineUtilityMethods&gt; timelineUtils =</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                        <a class="code" href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml#a0e5c863245b8d7dc5e874c0c66eebae1">TimelineUtilityMethods::GetTimelineUtils</a>(m_ProfilingService);</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    ProfilingGuid inferenceGuid = m_ProfilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad6a0ab3d6679dded1eb2e1838becf79e">GetNextGuid</a>();</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <span class="keywordflow">if</span> (timelineUtils)</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    {</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        <span class="comment">// Add inference timeline trace if profiling is enabled.</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        ProfilingGuid networkGuid = m_OptimizedNetwork-&gt;GetGuid();</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        timelineUtils-&gt;CreateTypedEntity(inferenceGuid, LabelsAndEventClasses::INFERENCE_GUID);</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        timelineUtils-&gt;CreateRelationship(ProfilingRelationshipType::RetentionLink,</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                                          networkGuid,</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                                          inferenceGuid,</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                                          LabelsAndEventClasses::EXECUTION_OF_GUID);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        timelineUtils-&gt;RecordEvent(inferenceGuid, LabelsAndEventClasses::ARMNN_PROFILING_SOL_EVENT_CLASS);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    }</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keywordtype">bool</span> executionSucceeded = <span class="keyword">true</span>;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    {</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        <span class="keywordflow">if</span> (m_ProfilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a70db5b1cdd0d22c1fa912c6e8b9089ce">IsProfilingEnabled</a>())</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        {</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            m_ProfilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a6c2d955d387944f5b7ad37ebb435a37f">IncrementCounterValue</a>(armnn::profiling::INFERENCES_RUN);</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        }</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;Execute&quot;</span>);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        <a class="code" href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a>(<span class="stringliteral">&quot;Executing&quot;</span>);</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        executionSucceeded = <a class="code" href="classarmnn_1_1_loaded_network.xhtml#a95b1c23f6f296a0c39383bef20fdd46a">Execute</a>(timelineUtils, inferenceGuid);</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    }</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keywordflow">if</span> (timelineUtils)</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    {</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        <span class="comment">// Add end of life of the inference timeline if profiling is enabled.</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        timelineUtils-&gt;RecordEvent(inferenceGuid, LabelsAndEventClasses::ARMNN_PROFILING_EOL_EVENT_CLASS);</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        timelineUtils-&gt;Commit();</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    }</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="keywordflow">return</span> executionSucceeded ? <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Status::Success</a> : <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">Status::Failure</a>;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_loaded_network_xhtml_a95b1c23f6f296a0c39383bef20fdd46a"><div class="ttname"><a href="classarmnn_1_1_loaded_network.xhtml#a95b1c23f6f296a0c39383bef20fdd46a">armnn::LoadedNetwork::Execute</a></div><div class="ttdeci">Status Execute(const InputTensors &amp;inputTensors, const OutputTensors &amp;outputTensors, IWorkingMemHandle &amp;workingMemHandle, std::vector&lt; ImportedInputId &gt; preImportedInputs={}, std::vector&lt; ImportedOutputId &gt; preImportedOutputs={})</div><div class="ttdoc">Thread safe execution of the loaded network. </div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8cpp_source.xhtml#l01283">LoadedNetwork.cpp:1283</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_timeline_utility_methods_xhtml_a0e5c863245b8d7dc5e874c0c66eebae1"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml#a0e5c863245b8d7dc5e874c0c66eebae1">armnn::profiling::TimelineUtilityMethods::GetTimelineUtils</a></div><div class="ttdeci">static std::unique_ptr&lt; TimelineUtilityMethods &gt; GetTimelineUtils(ProfilingService &amp;profilingService)</div><div class="ttdef"><b>Definition:</b> <a href="_timeline_utility_methods_8cpp_source.xhtml#l00018">TimelineUtilityMethods.cpp:18</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00202">Logging.hpp:202</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a6c2d955d387944f5b7ad37ebb435a37f"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a6c2d955d387944f5b7ad37ebb435a37f">armnn::profiling::ProfilingService::IncrementCounterValue</a></div><div class="ttdeci">uint32_t IncrementCounterValue(uint16_t counterUid) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00311">ProfilingService.cpp:311</a></div></div>
<div class="ttc" id="_profiling_8hpp_xhtml_a5ccc65e2c464ac05ce311fdae7ede03a"><div class="ttname"><a href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a></div><div class="ttdeci">#define ARMNN_SCOPED_PROFILING_EVENT(backendId, name)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00220">Profiling.hpp:220</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::BoostLogSeverityMapping::warning</a></div></div>
<div class="ttc" id="_heap_profiling_8hpp_xhtml_aeeb927880fc4ffc2eea754a67d884a53"><div class="ttname"><a href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a></div><div class="ttdeci">#define ARMNN_SCOPED_HEAP_PROFILING(TAG)</div><div class="ttdef"><b>Definition:</b> <a href="_heap_profiling_8hpp_source.xhtml#l00045">HeapProfiling.hpp:45</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_a70db5b1cdd0d22c1fa912c6e8b9089ce"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#a70db5b1cdd0d22c1fa912c6e8b9089ce">armnn::profiling::ProfilingService::IsProfilingEnabled</a></div><div class="ttdeci">bool IsProfilingEnabled() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00057">ProfilingService.cpp:57</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_ad6a0ab3d6679dded1eb2e1838becf79e"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad6a0ab3d6679dded1eb2e1838becf79e">armnn::profiling::ProfilingService::GetNextGuid</a></div><div class="ttdeci">static ProfilingDynamicGuid GetNextGuid()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00026">ProfilingService.cpp:26</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a95b1c23f6f296a0c39383bef20fdd46a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95b1c23f6f296a0c39383bef20fdd46a">&#9670;&nbsp;</a></span>Execute()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> Execute </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>outputTensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>workingMemHandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt;&#160;</td>
          <td class="paramname"><em>preImportedInputs</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt;&#160;</td>
          <td class="paramname"><em>preImportedOutputs</em> = <code>{}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Thread safe execution of the loaded network. </p>

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01283">1283</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00098">WorkingMemHandle::Allocate()</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00202">ARMNN_LOG</a>, <a class="el" href="_profiling_8hpp_source.xhtml#l00220">ARMNN_SCOPED_PROFILING_EVENT</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01049">armnn::CopyToOutputTensor()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Failure</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00115">WorkingMemHandle::GetBindingIdVector()</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00103">WorkingMemHandle::GetInputConnections()</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00093">WorkingMemHandle::GetInputHandle()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00183">Graph::GetNumInputs()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00184">Graph::GetNumOutputs()</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00108">WorkingMemHandle::GetOutputConnection()</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00098">WorkingMemHandle::GetOutputHandle()</a>, <a class="el" href="_timeline_utility_methods_8cpp_source.xhtml#l00018">TimelineUtilityMethods::GetTimelineUtils()</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00088">WorkingMemHandle::GetWorkingMemDescriptorAt()</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00073">WorkingMemHandle::IsAllocated()</a>, <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00125">WorkingMemHandle::MemSyncOutputs()</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2afc04d023850b425f3b9c62b3a55dc110">armnn::profiling::RetentionLink</a>, <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Success</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>, and <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00134">WorkingMemHandle::ValidateBindingIds()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00621">RuntimeImpl::Execute()</a>, and <a class="el" href="_loaded_network_8cpp_source.xhtml#l00902">LoadedNetwork::FreeWorkingMemory()</a>.</p>
<div class="fragment"><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;{</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    <span class="keyword">const</span> Graph&amp; graph = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph();</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;    <span class="keywordflow">if</span> (inputTensors.size() + preImportedInputs.size() != graph.GetNumInputs())</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;    {</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;        <span class="keywordflow">if</span> (preImportedInputs.empty())</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;        {</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;LoadedNetwork::Execute: Number of inputs provided does not match network.&quot;</span>);</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;        }</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;        {</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;LoadedNetwork::Execute: &quot;</span></div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;                                           <span class="stringliteral">&quot;Number of inputs + preImportedInputs provided does not match network.&quot;</span>);</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;        }</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;    }</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;    <span class="keywordflow">if</span> (outputTensors.size() + preImportedOutputs.size() != graph.GetNumOutputs())</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    {</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;        <span class="keywordflow">if</span> (preImportedOutputs.empty())</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;        {</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;LoadedNetwork::Execute: &quot;</span></div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;                                           <span class="stringliteral">&quot;Number of outputs provided does not match network.&quot;</span>);</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;        }</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;        {</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;LoadedNetwork::Execute: &quot;</span></div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;                                           <span class="stringliteral">&quot;Number of outputs + preImportedOutputs provided does not match network.&quot;</span>);</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;        }</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    }</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    WorkingMemHandle&amp; workingMemHandle = <span class="keyword">dynamic_cast&lt;</span>WorkingMemHandle&amp;<span class="keyword">&gt;</span>(iWorkingMemHandle);</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;    <span class="comment">// Collect all the given LayerBindingIds and check them for duplicates and unknowns.</span></div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    std::vector&lt;LayerBindingId&gt;&amp; bindingIds = workingMemHandle.GetBindingIdVector();</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index = 0;</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> pair : inputTensors)</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    {</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;        bindingIds[index++] = pair.first;</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;    }</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> <span class="keywordtype">id</span> : preImportedInputs)</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;    {</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;        bindingIds[index++] = ValidateImportedInputID(<span class="keywordtype">id</span>);</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    }</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> pair : outputTensors)</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    {</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;        bindingIds[index++] = pair.first;</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    }</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> <span class="keywordtype">id</span> : preImportedOutputs)</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    {</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;        bindingIds[index++] = ValidateImportedOutputID(<span class="keywordtype">id</span>);</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    }</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;    workingMemHandle.ValidateBindingIds();</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    <span class="keyword">auto</span> resetMemHandle = [&amp;]()</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;    {</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> <span class="keywordtype">id</span>: preImportedInputs)</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;        {</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerBindingId = m_PreImportedInputHandles[id].m_LayerBindingId;</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;            <span class="keyword">auto</span> inputHandle = workingMemHandle.GetInputHandle(layerBindingId);</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;            <span class="keyword">auto</span> inputConnections = workingMemHandle.GetInputConnections(layerBindingId);</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> it : inputConnections)</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;            {</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;                *it = inputHandle;</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;            }</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;        }</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> <span class="keywordtype">id</span>: preImportedOutputs)</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;        {</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerBindingId = m_PreImportedOutputHandles[id].m_LayerBindingId;</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;            <span class="keyword">auto</span> outputHandle = workingMemHandle.GetOutputHandle(layerBindingId);</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;            <span class="keyword">auto</span> outputConnections = workingMemHandle.GetOutputConnection(layerBindingId);</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> it : outputConnections)</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;            {</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;                *it = outputHandle;</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;            }</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;        }</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    };</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    std::unique_ptr&lt;profiling::TimelineUtilityMethods&gt; timelineUtils =</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;            <a class="code" href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml#a0e5c863245b8d7dc5e874c0c66eebae1">profiling::TimelineUtilityMethods::GetTimelineUtils</a>(m_ProfilingService);</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;    profiling::ProfilingGuid inferenceGuid = m_ProfilingService.<a class="code" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad6a0ab3d6679dded1eb2e1838becf79e">GetNextGuid</a>();</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;    <span class="keywordflow">if</span> (timelineUtils)</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;    {</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;        <span class="comment">// Add inference timeline trace if profiling is enabled.</span></div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;        profiling::ProfilingGuid networkGuid = m_OptimizedNetwork-&gt;GetGuid();</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;        timelineUtils-&gt;CreateTypedEntity(inferenceGuid, profiling::LabelsAndEventClasses::INFERENCE_GUID);</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;        timelineUtils-&gt;CreateRelationship(<a class="code" href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2afc04d023850b425f3b9c62b3a55dc110">profiling::ProfilingRelationshipType::RetentionLink</a>,</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;                                          networkGuid,</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;                                          inferenceGuid,</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;                                          profiling::LabelsAndEventClasses::EXECUTION_OF_GUID);</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;        timelineUtils-&gt;RecordEvent(inferenceGuid, profiling::LabelsAndEventClasses::ARMNN_PROFILING_SOL_EVENT_CLASS);</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    }</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;    <span class="keywordtype">bool</span> executionSucceeded = <span class="keyword">true</span>;</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    <span class="keywordflow">if</span> (timelineUtils)</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    {</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;        <span class="comment">// Add end of life of the inference timeline if profiling is enabled.</span></div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;        timelineUtils-&gt;RecordEvent(inferenceGuid, profiling::LabelsAndEventClasses::ARMNN_PROFILING_EOL_EVENT_CLASS);</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;        timelineUtils-&gt;Commit();</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;    }</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;    <span class="keywordflow">if</span> (!workingMemHandle.IsAllocated())</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    {</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;        workingMemHandle.Allocate();</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;    }</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;    {</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;PrepareInputs&quot;</span>);</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> pair : inputTensors)</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;        {</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;            EnqueueInput(pair.second, workingMemHandle.GetInputHandle(pair.first));</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;        }</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;        <span class="comment">// Swap in the pre-imported inputs if any</span></div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> <span class="keywordtype">id</span> : preImportedInputs)</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;        {</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;            <span class="keyword">const</span> ImportedTensorHandlePin&amp; importedInputPin = m_PreImportedInputHandles[id];</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerBindingId = m_PreImportedInputHandles[id].m_LayerBindingId;</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>&amp; preimportedHandle = importedInputPin.m_TensorHandle;</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;            <span class="keyword">auto</span> inputConnections = workingMemHandle.GetInputConnections(layerBindingId);</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> it : inputConnections)</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;            {</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;                *it = preimportedHandle.get();</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;            }</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;        }</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    }</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;    {</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;PrepareOutputs&quot;</span>);</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;        <span class="keywordflow">if</span> (m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a042fb9a87ffa70730766d19505d80490">m_ExportEnabled</a>)</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;        {</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> pair: outputTensors)</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;            {</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;                ImportOutputTensor(pair.second, workingMemHandle.GetOutputHandle(pair.first));</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;            }</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;        }</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> <span class="keywordtype">id</span> : preImportedOutputs)</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;        {</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;            <span class="keyword">const</span> ImportedTensorHandlePin&amp; importedOutputPin = m_PreImportedOutputHandles[id];</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerBindingId = m_PreImportedOutputHandles[id].m_LayerBindingId;</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>&amp; preimportedHandle = importedOutputPin.m_TensorHandle;</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;            <span class="keyword">auto</span> outputConnections = workingMemHandle.GetOutputConnection(layerBindingId);</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> it : outputConnections)</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;            {</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;                *it = preimportedHandle.get();</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;            }</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;        }</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;    }</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;    <span class="keyword">auto</span> Fail = [&amp;](<span class="keyword">const</span> std::exception&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>)</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;    {</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>) &lt;&lt; <span class="stringliteral">&quot;An error occurred attempting to execute a workload: &quot;</span> &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>.what();</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;        executionSucceeded = <span class="keyword">false</span>;</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;    };</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    profiling::ProfilingDynamicGuid workloadInferenceID(0);</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;    {</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; m_WorkloadQueue.size(); ++i)</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;        {</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;            <span class="keyword">auto</span>&amp; workload = m_WorkloadQueue[i];</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;            <span class="keywordflow">if</span> (timelineUtils)</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;            {</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;                workloadInferenceID = timelineUtils-&gt;RecordWorkloadInferenceAndStartOfLifeEvent(workload-&gt;GetGuid(),</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;                                                                                                inferenceGuid);</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;            }</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;            workload-&gt;ExecuteAsync(workingMemHandle.GetWorkingMemDescriptorAt(i));</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;            <span class="keywordflow">if</span> (timelineUtils)</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;            {</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;                timelineUtils-&gt;RecordEndOfLifeEvent(workloadInferenceID);</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;            }</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;        }</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    }</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> RuntimeException&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>)</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;    {</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;        resetMemHandle();</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;        Fail(error);</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    }</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::runtime_error&amp; error)</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    {</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;        resetMemHandle();</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;        Fail(error);</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;    }</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    <span class="keywordflow">catch</span> (...)</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    {</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;        resetMemHandle();</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;        <span class="keywordflow">throw</span>;</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;    }</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    <span class="keywordflow">if</span> (!m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a042fb9a87ffa70730766d19505d80490">m_ExportEnabled</a>)</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;    {</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> pair: outputTensors)</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;        {</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a5acae80f1d8fd03cdb3878bd356683d7">CopyToOutputTensor</a>(pair.second, workingMemHandle.GetOutputHandle(pair.first));</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;        }</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;    }</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;    {</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;       <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;SyncMemGeneric_Execute&quot;</span>);</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;       workingMemHandle.MemSyncOutputs();</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;    }</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    resetMemHandle();</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    <span class="keywordflow">return</span> executionSucceeded ? <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Status::Success</a> : <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">Status::Failure</a>;</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_timeline_utility_methods_xhtml_a0e5c863245b8d7dc5e874c0c66eebae1"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml#a0e5c863245b8d7dc5e874c0c66eebae1">armnn::profiling::TimelineUtilityMethods::GetTimelineUtils</a></div><div class="ttdeci">static std::unique_ptr&lt; TimelineUtilityMethods &gt; GetTimelineUtils(ProfilingService &amp;profilingService)</div><div class="ttdef"><b>Definition:</b> <a href="_timeline_utility_methods_8cpp_source.xhtml#l00018">TimelineUtilityMethods.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac68a434f0e78e33726bfb22a39ec813f"><div class="ttname"><a href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">armnn::ImportedOutputId</a></div><div class="ttdeci">unsigned int ImportedOutputId</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00279">Types.hpp:279</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00202">Logging.hpp:202</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5acae80f1d8fd03cdb3878bd356683d7"><div class="ttname"><a href="namespacearmnn.xhtml#a5acae80f1d8fd03cdb3878bd356683d7">armnn::CopyToOutputTensor</a></div><div class="ttdeci">void CopyToOutputTensor(const Tensor &amp;outputTensor, ITensorHandle *outputTensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8cpp_source.xhtml#l01049">LoadedNetwork.cpp:1049</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::BoostLogSeverityMapping::error</a></div></div>
<div class="ttc" id="_profiling_8hpp_xhtml_a5ccc65e2c464ac05ce311fdae7ede03a"><div class="ttname"><a href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a></div><div class="ttdeci">#define ARMNN_SCOPED_PROFILING_EVENT(backendId, name)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00220">Profiling.hpp:220</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00277">Types.hpp:277</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml_a042fb9a87ffa70730766d19505d80490"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml#a042fb9a87ffa70730766d19505d80490">armnn::INetworkProperties::m_ExportEnabled</a></div><div class="ttdeci">const bool m_ExportEnabled</div><div class="ttdoc">Deprecated and will be removed in future release. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00087">IRuntime.hpp:87</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_ab805f5aa9f101e7f6d971daba044c3c2afc04d023850b425f3b9c62b3a55dc110"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#ab805f5aa9f101e7f6d971daba044c3c2afc04d023850b425f3b9c62b3a55dc110">armnn::profiling::ProfilingRelationshipType::RetentionLink</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1c5ec805688cb558465a82a8d9f56a90"><div class="ttname"><a href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">armnn::ImportedInputId</a></div><div class="ttdeci">unsigned int ImportedInputId</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00278">Types.hpp:278</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_profiling_service_xhtml_ad6a0ab3d6679dded1eb2e1838becf79e"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_profiling_service.xhtml#ad6a0ab3d6679dded1eb2e1838becf79e">armnn::profiling::ProfilingService::GetNextGuid</a></div><div class="ttdeci">static ProfilingDynamicGuid GetNextGuid()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_service_8cpp_source.xhtml#l00026">ProfilingService.cpp:26</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaf8558a23ae9be6e7ea165989f1fa808"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf8558a23ae9be6e7ea165989f1fa808">&#9670;&nbsp;</a></span>FreeWorkingMemory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FreeWorkingMemory </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l00902">902</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00202">ARMNN_LOG</a>, <a class="el" href="_memory_sources_8hpp_source.xhtml#l00041">armnn::CheckFlag()</a>, <a class="el" href="_workload_utils_8hpp_source.xhtml#l00047">armnn::CopyTensorContentsGeneric()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01283">LoadedNetwork::Execute()</a>, <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00069">ITensorHandle::GetImportFlags()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00295">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00305">BaseTensor&lt; MemoryType &gt;::GetMemoryArea()</a>, <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00075">ITensorHandle::Import()</a>, and <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a9afbc055a017adf1bc38ee137bca6e90">ITensorHandle::Map()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00653">RuntimeImpl::CreateWorkingMemHandle()</a>, and <a class="el" href="_runtime_8cpp_source.xhtml#l00588">RuntimeImpl::EnqueueWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;{</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    std::lock_guard&lt;std::mutex&gt; lockGuard(m_WorkingMemMutex);</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    <span class="keywordflow">if</span> (!m_IsWorkingMemAllocated)</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    {</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    }</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    <span class="keywordflow">if</span> (m_ExternalMemoryManager)</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    {</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;        m_ExternalMemoryManager-&gt;Deallocate();</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    }</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    <span class="comment">// Informs the memory managers to release memory in its respective memory group</span></div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; memoryManager : m_BackendMemoryMangers)</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    {</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        <span class="keywordflow">if</span> (memoryManager)</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;        {</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;            memoryManager-&gt;Release();</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        }</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    }</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    m_TensorHandleFactoryRegistry.<a class="code" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#a69ca23561f4f8a887f19c6580cbd34c8">ReleaseMemory</a>();</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    m_IsWorkingMemAllocated = <span class="keyword">false</span>;</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_handle_factory_registry_xhtml_a69ca23561f4f8a887f19c6580cbd34c8"><div class="ttname"><a href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#a69ca23561f4f8a887f19c6580cbd34c8">armnn::TensorHandleFactoryRegistry::ReleaseMemory</a></div><div class="ttdeci">void ReleaseMemory()</div><div class="ttdoc">Release memory required for inference. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00074">TensorHandleFactoryRegistry.cpp:74</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af616683424cb40d83b5a923db7f06f11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af616683424cb40d83b5a923db7f06f11">&#9670;&nbsp;</a></span>GetInputTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> GetInputTensorInfo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>layerId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l00487">487</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00559">RuntimeImpl::GetInputTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;{</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; inputLayer : m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().GetInputLayers())</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(inputLayer-&gt;GetNumOutputSlots() == 1, <span class="stringliteral">&quot;Input layer should have exactly 1 output slot&quot;</span>);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keywordflow">if</span> (inputLayer-&gt;GetBindingId() == layerId)</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        {</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <span class="keywordflow">return</span> inputLayer-&gt;GetOutputSlot(0).GetTensorInfo();</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        }</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    }</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;No input layer is associated with id {}&quot;</span>, layerId));</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;}</div><div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac8be6c967db9e797ade32fa3db497422"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8be6c967db9e797ade32fa3db497422">&#9670;&nbsp;</a></span>GetNetworkGuid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">profiling::ProfilingGuid GetNetworkGuid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l00482">482</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;{</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keywordflow">return</span> m_OptimizedNetwork-&gt;GetGuid();</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2b6b57945bc68f659e08d28c8a015e91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b6b57945bc68f659e08d28c8a015e91">&#9670;&nbsp;</a></span>GetOutputTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> GetOutputTensorInfo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>layerId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l00501">501</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="_backend_id_8hpp_source.xhtml#l00138">BackendId::Get()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00269">Layer::GetBackendId()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00220">Layer::GetNameStr()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="_workload_factory_8cpp_source.xhtml#l01464">IWorkloadFactory::IsLayerSupported()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00564">RuntimeImpl::GetOutputTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;{</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; outputLayer : m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().GetOutputLayers())</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    {</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(outputLayer-&gt;GetNumInputSlots() == 1, <span class="stringliteral">&quot;Output layer should have exactly 1 input slot&quot;</span>);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(outputLayer-&gt;GetInputSlot(0).GetConnection(), <span class="stringliteral">&quot;Input slot on Output layer must be connected&quot;</span>);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <span class="keywordflow">if</span> (outputLayer-&gt;GetBindingId() == layerId)</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        {</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            <span class="keywordflow">return</span> outputLayer-&gt;GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        }</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    }</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;No output layer is associated with id {}&quot;</span>, layerId));</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;}</div><div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aee8e1cb09e0d4dcbe64df111c5edd55e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee8e1cb09e0d4dcbe64df111c5edd55e">&#9670;&nbsp;</a></span>GetProfiler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::shared_ptr&lt;<a class="el" href="classarmnn_1_1_i_profiler.xhtml">IProfiler</a>&gt;&amp; GetProfiler </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8hpp_source.xhtml#l00082">82</a> of file <a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00653">RuntimeImpl::CreateWorkingMemHandle()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00588">RuntimeImpl::EnqueueWorkload()</a>, and <a class="el" href="_runtime_8cpp_source.xhtml#l00621">RuntimeImpl::Execute()</a>.</p>
<div class="fragment"><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{ <span class="keywordflow">return</span> m_OptimizedNetwork-&gt;GetProfiler(); }</div></div><!-- fragment -->
</div>
</div>
<a id="a74f5869a116f365d132abe745d9a0dd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74f5869a116f365d132abe745d9a0dd3">&#9670;&nbsp;</a></span>ImportInputs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt; ImportInputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01090">1090</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00063">Graph::InputLayersAccessor::begin()</a>, <a class="el" href="_memory_sources_8hpp_source.xhtml#l00041">armnn::CheckFlag()</a>, <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">ITensorHandleFactory::CreateTensorHandle()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00068">Graph::InputLayersAccessor::end()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00269">Layer::GetBackendId()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00444">BindableLayer::GetBindingId()</a>, <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00069">ITensorHandle::GetImportFlags()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00295">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00188">Graph::GetInputLayers()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00305">BaseTensor&lt; MemoryType &gt;::GetMemoryArea()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00238">Layer::GetOutputSlots()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00176">OutputSlot::GetTensorHandleFactoryId()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00063">OutputSlot::GetTensorInfo()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00265">Layer::GetType()</a>, <a class="el" href="_backend_helper_8cpp_source.xhtml#l00058">armnn::HasCapability()</a>, <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00075">ITensorHandle::Import()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, and <a class="el" href="_graph_8hpp_source.xhtml#l00180">Graph::TopologicalSort()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00569">RuntimeImpl::ImportInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;{</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    <span class="keywordflow">if</span> (!m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a111a52fb2bd24aee9fc125f28c2eb1cb">m_ImportEnabled</a>)  <span class="comment">// Try import the input tensor</span></div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;    {</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;        <span class="keywordflow">throw</span> MemoryImportException(<span class="stringliteral">&quot;ImportInputs: Memory Import failed, NetworkProperties.m_ImportEnabled&quot;</span>);</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    }</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    std::vector&lt;ImportedInputId&gt; importedInputs;</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    Graph&amp; graph = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().TopologicalSort();</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> inputTensor : inputTensors)</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    {</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;        <span class="keyword">auto</span> layerBindingId = inputTensor.first;</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;        <span class="keyword">auto</span> it = std::find_if(graph.GetInputLayers().begin(), graph.GetInputLayers().end(), [=](<span class="keyword">auto</span>* layer)</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;        {</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;            <span class="keywordflow">return</span> layer-&gt;GetBindingId() == layerBindingId;</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;        });</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;        <span class="keywordflow">if</span> (it == graph.GetInputLayers().end())</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;        {</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;            <span class="keywordflow">throw</span> MemoryImportException(fmt::format(<span class="stringliteral">&quot;ImportInputs: Memory Import failed, unknown LayerBindingId: {}&quot;</span>,</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;                                                    layerBindingId));</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;        }</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn_serializer.xhtml#a9a8118be7780e95363d631cbca7e7800">Layer</a>* layer = *it;</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;        <span class="keywordflow">if</span> (layer-&gt;GetType() != <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a>)</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;        {</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;ImportInputs: given layer not an InputLayer&quot;</span>);</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;        }</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;        <span class="keyword">auto</span>&amp; backend = m_Backends.at(layer-&gt;GetBackendId());</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn.xhtml#abd839f0f103c1ae19a4b38d59b869108">HasCapability</a>(BackendOptions::BackendOption{<span class="stringliteral">&quot;PreImportIOTensors&quot;</span>, <span class="keyword">true</span>}, backend-&gt;GetCapabilities()))</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;        {</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;            std::string er = backend-&gt;GetId();</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;            er += <span class="stringliteral">&quot; does not have PreImportIOTensors capability&quot;</span>;</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;            <span class="keywordflow">throw</span> BackendCapabilityException(er);</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;        }</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;        <span class="keyword">const</span> OutputSlot&amp; outputSlot = layer-&gt;GetOutputSlots()[0];</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;        <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> factoryId = outputSlot.GetTensorHandleFactoryId();</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;        <span class="keyword">const</span> TensorInfo&amp; tensorInfo = outputSlot.GetTensorInfo();</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;        ITensorHandleFactory* handleFactory = m_TensorHandleFactoryRegistry.<a class="code" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#ae5ecc42140a12c855554a4a621fc8456">GetFactory</a>(factoryId);</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(handleFactory);</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;        ImportedTensorHandlePin importedTensorHandlePin{layerBindingId,</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;                                                        handleFactory-&gt;CreateTensorHandle(tensorInfo, <span class="keyword">false</span>)};</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;        ITensorHandle* tensorHandle = importedTensorHandlePin.m_TensorHandle.get();</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn.xhtml#a84f86b4de5adf0b164e811c87051a0ee">CheckFlag</a>(tensorHandle-&gt;GetImportFlags(), m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a53d95b257e52b0fd292ba6d40d3c5dc3">m_InputSource</a>))</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;        {</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;            <span class="keywordflow">throw</span> MemoryImportException(</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;                fmt::format(<span class="stringliteral">&quot;ImportInputs: Memory Import failed, backend: {} does not support importing from source {}&quot;</span></div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;                            , factoryId, m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a53d95b257e52b0fd292ba6d40d3c5dc3">m_InputSource</a>));</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;        }</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;        std::unique_ptr&lt;ITensorHandle&gt; passThroughTensorHandle =</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;                std::make_unique&lt;ConstPassthroughTensorHandle&gt;(inputTensor.second.GetInfo(),</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;                                                               inputTensor.second.GetMemoryArea());</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;        <span class="keywordflow">if</span> (tensorHandle-&gt;Import(passThroughTensorHandle-&gt;Map(), m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a53d95b257e52b0fd292ba6d40d3c5dc3">m_InputSource</a>))</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;        {</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;            importedInputs.push_back(m_CurImportedInputId++);</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;            passThroughTensorHandle-&gt;Unmap();</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;        }</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;        {</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;            passThroughTensorHandle-&gt;Unmap();</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;            <span class="keywordflow">throw</span> MemoryImportException(<span class="stringliteral">&quot;ImportInputs: Memory Import failed&quot;</span>);</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;        }</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;        m_PreImportedInputHandles.push_back(std::move(importedTensorHandlePin));</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;    }</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;    <span class="keywordflow">return</span> importedInputs;</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_abd839f0f103c1ae19a4b38d59b869108"><div class="ttname"><a href="namespacearmnn.xhtml#abd839f0f103c1ae19a4b38d59b869108">armnn::HasCapability</a></div><div class="ttdeci">bool HasCapability(const std::string &amp;name, const BackendCapabilities &amp;capabilities)</div><div class="ttdoc">Convenience function to check if a capability exists in a BackendCapabilites struct. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_helper_8cpp_source.xhtml#l00058">BackendHelper.cpp:58</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml_a53d95b257e52b0fd292ba6d40d3c5dc3"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml#a53d95b257e52b0fd292ba6d40d3c5dc3">armnn::INetworkProperties::m_InputSource</a></div><div class="ttdeci">const MemorySource m_InputSource</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00095">IRuntime.hpp:95</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml_a111a52fb2bd24aee9fc125f28c2eb1cb"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml#a111a52fb2bd24aee9fc125f28c2eb1cb">armnn::INetworkProperties::m_ImportEnabled</a></div><div class="ttdeci">const bool m_ImportEnabled</div><div class="ttdoc">Deprecated and will be removed in future release. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00085">IRuntime.hpp:85</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a9a8118be7780e95363d631cbca7e7800"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a9a8118be7780e95363d631cbca7e7800">armnnSerializer::Layer</a></div><div class="ttdeci">Layer</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_schema__generated_8h_source.xhtml#l01234">ArmnnSchema_generated.h:1234</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_handle_factory_registry_xhtml_ae5ecc42140a12c855554a4a621fc8456"><div class="ttname"><a href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#ae5ecc42140a12c855554a4a621fc8456">armnn::TensorHandleFactoryRegistry::GetFactory</a></div><div class="ttdeci">ITensorHandleFactory * GetFactory(ITensorHandleFactory::FactoryId id) const</div><div class="ttdoc">Find a TensorHandleFactory by Id Returns nullptr if not found. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00039">TensorHandleFactoryRegistry.cpp:39</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml_a32f4aa6a7089d877af08928139c2c277"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">armnn::ITensorHandleFactory::FactoryId</a></div><div class="ttdeci">std::string FactoryId</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00045">ITensorHandleFactory.hpp:45</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a84f86b4de5adf0b164e811c87051a0ee"><div class="ttname"><a href="namespacearmnn.xhtml#a84f86b4de5adf0b164e811c87051a0ee">armnn::CheckFlag</a></div><div class="ttdeci">bool CheckFlag(MemorySourceFlags flags, MemorySource source)</div><div class="ttdef"><b>Definition:</b> <a href="_memory_sources_8hpp_source.xhtml#l00041">MemorySources.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a45c446bf8e355ec38b48488d0d6dfbc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45c446bf8e355ec38b48488d0d6dfbc3">&#9670;&nbsp;</a></span>ImportOutputs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt; ImportOutputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>outputTensors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01169">1169</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00082">Graph::OutputLayersAccessor::begin()</a>, <a class="el" href="_memory_sources_8hpp_source.xhtml#l00041">armnn::CheckFlag()</a>, <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">ITensorHandleFactory::CreateTensorHandle()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00088">Graph::OutputLayersAccessor::end()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00269">Layer::GetBackendId()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00444">BindableLayer::GetBindingId()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00055">InputSlot::GetConnectedOutputSlot()</a>, <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00069">ITensorHandle::GetImportFlags()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00237">Layer::GetInputSlots()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00305">BaseTensor&lt; MemoryType &gt;::GetMemoryArea()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00192">Graph::GetOutputLayers()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00176">OutputSlot::GetTensorHandleFactoryId()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00063">OutputSlot::GetTensorInfo()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00265">Layer::GetType()</a>, <a class="el" href="_backend_helper_8cpp_source.xhtml#l00058">armnn::HasCapability()</a>, <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00075">ITensorHandle::Import()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, and <a class="el" href="_graph_8hpp_source.xhtml#l00180">Graph::TopologicalSort()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00574">RuntimeImpl::ImportOutputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;{</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    <span class="keywordflow">if</span> (!m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a042fb9a87ffa70730766d19505d80490">m_ExportEnabled</a>)  <span class="comment">// Try import the output tensor</span></div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    {</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;        <span class="keywordflow">throw</span> MemoryImportException(<span class="stringliteral">&quot;ImportOutputs: Memory Import failed, NetworkProperties.m_ImportEnabled&quot;</span>);</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;    }</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    std::vector&lt;ImportedOutputId&gt; importedOutputs;</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    Graph&amp; graph = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().TopologicalSort();</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; outputTensor : outputTensors)</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    {</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;        <span class="keyword">auto</span> layerBindingId = outputTensor.first;</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;        <span class="keyword">auto</span> it = std::find_if(graph.GetOutputLayers().begin(), graph.GetOutputLayers().end(), [=](<span class="keyword">auto</span>* layer)</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;        {</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;            <span class="keywordflow">return</span> layer-&gt;GetBindingId() == layerBindingId;</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;        });</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;        <span class="keywordflow">if</span> (it == graph.GetOutputLayers().end())</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;        {</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;            <span class="keywordflow">throw</span> MemoryImportException(fmt::format(<span class="stringliteral">&quot;ImportOutputs: Memory Import failed, unknown LayerBindingId: {}&quot;</span>,</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;                                                     layerBindingId));</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;        }</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn_serializer.xhtml#a9a8118be7780e95363d631cbca7e7800">Layer</a>* layer = *it;</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;        <span class="keywordflow">if</span> (layer-&gt;GetType() != <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>)</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;        {</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;ImportOutputs: given layer not an OutputLayer&quot;</span>);</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;        }</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;        <span class="keyword">auto</span>&amp; backend = m_Backends.at(layer-&gt;GetBackendId());</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn.xhtml#abd839f0f103c1ae19a4b38d59b869108">HasCapability</a>(BackendOptions::BackendOption{<span class="stringliteral">&quot;PreImportIOTensors&quot;</span>, <span class="keyword">true</span>}, backend-&gt;GetCapabilities()))</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;        {</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;            std::string er = backend-&gt;GetId();</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;            er += <span class="stringliteral">&quot; does not have PreImportIOTensors capability&quot;</span>;</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;            <span class="keywordflow">throw</span> BackendCapabilityException(er);</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;        }</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;        <span class="keyword">const</span> InputSlot&amp; inputSlot = layer-&gt;GetInputSlots()[0];</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;        <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> factoryId = inputSlot.GetConnectedOutputSlot()-&gt;GetTensorHandleFactoryId();</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;        <span class="keyword">const</span> TensorInfo&amp; tensorInfo = inputSlot.GetConnectedOutputSlot()-&gt;GetTensorInfo();</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;        ITensorHandleFactory* handleFactory = m_TensorHandleFactoryRegistry.<a class="code" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#ae5ecc42140a12c855554a4a621fc8456">GetFactory</a>(factoryId);</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(handleFactory);</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;        ImportedTensorHandlePin importedTensorHandlePin{layerBindingId,</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;                                                        handleFactory-&gt;CreateTensorHandle(tensorInfo, <span class="keyword">false</span>)};</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        ITensorHandle* tensorHandle = importedTensorHandlePin.m_TensorHandle.get();</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn.xhtml#a84f86b4de5adf0b164e811c87051a0ee">CheckFlag</a>(tensorHandle-&gt;GetImportFlags(), m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a3266436db920d1ca96b0afaadacf3972">m_OutputSource</a>))</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;        {</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;            <span class="keywordflow">throw</span> MemoryImportException(fmt::format(<span class="stringliteral">&quot;ImportInputs: Memory Import failed, backend: &quot;</span></div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;                                                    <span class="stringliteral">&quot;{} does not support importing from source {}&quot;</span></div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;                                                    , factoryId, m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a3266436db920d1ca96b0afaadacf3972">m_OutputSource</a>));</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;        }</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;        <span class="keywordflow">if</span> (tensorHandle-&gt;Import(outputTensor.second.GetMemoryArea(), m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a3266436db920d1ca96b0afaadacf3972">m_OutputSource</a>))</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;        {</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;            importedOutputs.push_back(m_CurImportedOutputId++);</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;        }</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;        {</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;            <span class="keywordflow">throw</span> MemoryImportException(<span class="stringliteral">&quot;ImportInputs: Memory Import failed&quot;</span>);</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;        }</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;        m_PreImportedOutputHandles.push_back(std::move(importedTensorHandlePin));</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    }</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    <span class="keywordflow">return</span> importedOutputs;</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_abd839f0f103c1ae19a4b38d59b869108"><div class="ttname"><a href="namespacearmnn.xhtml#abd839f0f103c1ae19a4b38d59b869108">armnn::HasCapability</a></div><div class="ttdeci">bool HasCapability(const std::string &amp;name, const BackendCapabilities &amp;capabilities)</div><div class="ttdoc">Convenience function to check if a capability exists in a BackendCapabilites struct. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_helper_8cpp_source.xhtml#l00058">BackendHelper.cpp:58</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a9a8118be7780e95363d631cbca7e7800"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a9a8118be7780e95363d631cbca7e7800">armnnSerializer::Layer</a></div><div class="ttdeci">Layer</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_schema__generated_8h_source.xhtml#l01234">ArmnnSchema_generated.h:1234</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml_a042fb9a87ffa70730766d19505d80490"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml#a042fb9a87ffa70730766d19505d80490">armnn::INetworkProperties::m_ExportEnabled</a></div><div class="ttdeci">const bool m_ExportEnabled</div><div class="ttdoc">Deprecated and will be removed in future release. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00087">IRuntime.hpp:87</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_handle_factory_registry_xhtml_ae5ecc42140a12c855554a4a621fc8456"><div class="ttname"><a href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#ae5ecc42140a12c855554a4a621fc8456">armnn::TensorHandleFactoryRegistry::GetFactory</a></div><div class="ttdeci">ITensorHandleFactory * GetFactory(ITensorHandleFactory::FactoryId id) const</div><div class="ttdoc">Find a TensorHandleFactory by Id Returns nullptr if not found. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00039">TensorHandleFactoryRegistry.cpp:39</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml_a32f4aa6a7089d877af08928139c2c277"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">armnn::ITensorHandleFactory::FactoryId</a></div><div class="ttdeci">std::string FactoryId</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00045">ITensorHandleFactory.hpp:45</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml_a3266436db920d1ca96b0afaadacf3972"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml#a3266436db920d1ca96b0afaadacf3972">armnn::INetworkProperties::m_OutputSource</a></div><div class="ttdeci">const MemorySource m_OutputSource</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00096">IRuntime.hpp:96</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a84f86b4de5adf0b164e811c87051a0ee"><div class="ttname"><a href="namespacearmnn.xhtml#a84f86b4de5adf0b164e811c87051a0ee">armnn::CheckFlag</a></div><div class="ttdeci">bool CheckFlag(MemorySourceFlags flags, MemorySource source)</div><div class="ttdef"><b>Definition:</b> <a href="_memory_sources_8hpp_source.xhtml#l00041">MemorySources.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a390c87e27deac4f51af9533053b2ee14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a390c87e27deac4f51af9533053b2ee14">&#9670;&nbsp;</a></span>IsAsyncEnabled()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAsyncEnabled </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8hpp_source.xhtml#l00090">90</a> of file <a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00653">RuntimeImpl::CreateWorkingMemHandle()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00588">RuntimeImpl::EnqueueWorkload()</a>, and <a class="el" href="_runtime_8cpp_source.xhtml#l00621">RuntimeImpl::Execute()</a>.</p>
<div class="fragment"><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">return</span> m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#ad3ab02a7f6310b35c59ca78b509905ca">m_AsyncEnabled</a>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml_ad3ab02a7f6310b35c59ca78b509905ca"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml#ad3ab02a7f6310b35c59ca78b509905ca">armnn::INetworkProperties::m_AsyncEnabled</a></div><div class="ttdeci">const bool m_AsyncEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00089">IRuntime.hpp:89</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8e94a5375ad367ddee9c69e04e110a54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e94a5375ad367ddee9c69e04e110a54">&#9670;&nbsp;</a></span>MakeLoadedNetwork()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_loaded_network.xhtml">LoadedNetwork</a> &gt; MakeLoadedNetwork </td>
          <td>(</td>
          <td class="paramtype">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_optimized_network.xhtml">IOptimizedNetwork</a> &gt;&#160;</td>
          <td class="paramname"><em>net</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>errorMessage</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> &amp;&#160;</td>
          <td class="paramname"><em>networkProperties</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1profiling_1_1_profiling_service.xhtml">profiling::ProfilingService</a> &amp;&#160;</td>
          <td class="paramname"><em>profilingService</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l00082">82</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a5cceed8b707a09bf27eb61f17acf8a88">ITensorHandle::Allocate()</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00202">ARMNN_LOG</a>, <a class="el" href="_profiling_8hpp_source.xhtml#l00220">ARMNN_SCOPED_PROFILING_EVENT</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::Constant</a>, <a class="el" href="_i_backend_internal_8cpp_source.xhtml#l00012">IBackendInternal::CreateMemoryManager()</a>, <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#afd5a5e90515b31c0174f76ec8897e9b1">IBackendInternal::CreateWorkloadFactory()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="_i_backend_internal_8hpp_source.xhtml#l00172">IBackendInternal::GetCapabilities()</a>, <a class="el" href="_processes_8cpp_source.xhtml#l00019">armnnUtils::Processes::GetCurrentId()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00055">BackendRegistry::GetFactory()</a>, <a class="el" href="classarmnn_1_1_i_backend.xhtml#aa9fc23b7155bd678232eeb351059b748">IBackend::GetId()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00568">ProfilerManager::GetInstance()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00148">BackendRegistry::GetMemoryOptimizerStrategies()</a>, <a class="el" href="_timeline_utility_methods_8cpp_source.xhtml#l00018">TimelineUtilityMethods::GetTimelineUtils()</a>, <a class="el" href="_backend_helper_8cpp_source.xhtml#l00058">armnn::HasCapability()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00046">ITensorHandleFactory::LegacyFactoryId</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00089">INetworkProperties::m_AsyncEnabled</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00093">INetworkProperties::m_OutputNetworkDetailsMethod</a>, <a class="el" href="_working_mem_descriptor_8hpp_source.xhtml#l00021">WorkingMemDescriptor::m_Outputs</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00091">INetworkProperties::m_ProfilingEnabled</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::MemImport</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00575">ProfilerManager::RegisterProfiler()</a>, <a class="el" href="_i_backend_internal_8cpp_source.xhtml#l00119">IBackendInternal::SupportsTensorAllocatorAPI()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00180">Graph::TopologicalSort()</a>, and <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00160">RuntimeImpl::LoadNetwork()</a>.</p>
<div class="fragment"><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;{</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    std::unique_ptr&lt;LoadedNetwork&gt; loadedNetwork;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">auto</span> Fail = [&amp;](<span class="keyword">const</span> std::exception&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>) -&gt; std::unique_ptr&lt;LoadedNetwork&gt;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        errorMessage = ToErrorMessage(<span class="stringliteral">&quot;An error occurred when preparing the network workloads: &quot;</span>, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>) &lt;&lt; errorMessage;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">return</span> std::unique_ptr&lt;LoadedNetwork&gt;();</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    };</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        loadedNetwork.reset(<span class="keyword">new</span> LoadedNetwork(std::move(net), networkProperties, profilingService));</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">return</span> Fail(error);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>&amp; error)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">return</span> Fail(error);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::runtime_error&amp; error)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">return</span> Fail(error);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> loadedNetwork;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div><div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00202">Logging.hpp:202</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::BoostLogSeverityMapping::error</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a091ea8d2d804c8902f3120fdf2a36512"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a091ea8d2d804c8902f3120fdf2a36512">&#9670;&nbsp;</a></span>RegisterDebugCallback()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RegisterDebugCallback </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a15f3ad9b5e4e3d46b0a6dda246a7bc28">DebugCallbackFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>func</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01746">1746</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00013">armnn::BackendRegistryInstance()</a>, <a class="el" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::Constant</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00126">BackendRegistry::GetAllocators()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00269">Layer::GetBackendId()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00055">InputSlot::GetConnectedOutputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00316">Layer::GetInputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00237">Layer::GetInputSlots()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00138">OutputSlot::GetNumConnections()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00238">Layer::GetOutputSlots()</a>, <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a437893b8dcf58a0b68b70e1ad7933be6">ITensorHandle::GetParent()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00265">Layer::GetType()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="_memory_manager_8hpp_source.xhtml#l00034">BufferStorage::m_BufferSize</a>, <a class="el" href="_memory_manager_8hpp_source.xhtml#l00022">TensorMemory::m_Offset</a>, <a class="el" href="_memory_manager_8hpp_source.xhtml#l00032">BufferStorage::m_TensorMemoryVector</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00180">Graph::TopologicalSort()</a>, and <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00684">RuntimeImpl::RegisterDebugCallback()</a>.</p>
<div class="fragment"><div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;{</div><div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; workloadPtr: m_WorkloadQueue)</div><div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;    {</div><div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;        workloadPtr.get()-&gt;RegisterDebugCallback(func);</div><div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;    }</div><div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a23e33c3caadba06bcd5b50dc2c23c19e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23e33c3caadba06bcd5b50dc2c23c19e">&#9670;&nbsp;</a></span>SendNetworkStructure()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SendNetworkStructure </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l00444">444</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_8hpp_source.xhtml#l00220">ARMNN_SCOPED_PROFILING_EVENT</a>, <a class="el" href="_timeline_utility_methods_8cpp_source.xhtml#l00018">TimelineUtilityMethods::GetTimelineUtils()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00180">Graph::TopologicalSort()</a>, and <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>.</p>
<div class="fragment"><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;{</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;LoadNetwork_SendNetworkStructure&quot;</span>);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    Graph&amp; order = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().TopologicalSort();</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    ProfilingGuid networkGuid = m_OptimizedNetwork-&gt;GetGuid();</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    std::unique_ptr&lt;TimelineUtilityMethods&gt; timelineUtils =</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                        <a class="code" href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml#a0e5c863245b8d7dc5e874c0c66eebae1">TimelineUtilityMethods::GetTimelineUtils</a>(m_ProfilingService);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    timelineUtils-&gt;CreateTypedEntity(networkGuid, LabelsAndEventClasses::NETWORK_GUID);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; layer : order)</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    {</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="comment">// Add layer to the post-optimisation network structure</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        AddLayerStructure(timelineUtils, *layer, networkGuid);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="keywordflow">switch</span> (layer-&gt;GetType())</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        {</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a>:</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>:</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        {</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            <span class="comment">// Inputs and outputs are treated in a special way - see EnqueueInput() and EnqueueOutput().</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        }</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            {</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; workload : m_WorkloadQueue)</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            {</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                <span class="comment">// Add workload to the post-optimisation network structure</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                AddWorkloadStructure(timelineUtils, workload, *layer);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            }</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            }</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        }</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    }</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="comment">// Commit to send the post-optimisation network structure</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    timelineUtils-&gt;Commit();</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_timeline_utility_methods_xhtml_a0e5c863245b8d7dc5e874c0c66eebae1"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_timeline_utility_methods.xhtml#a0e5c863245b8d7dc5e874c0c66eebae1">armnn::profiling::TimelineUtilityMethods::GetTimelineUtils</a></div><div class="ttdeci">static std::unique_ptr&lt; TimelineUtilityMethods &gt; GetTimelineUtils(ProfilingService &amp;profilingService)</div><div class="ttdef"><b>Definition:</b> <a href="_timeline_utility_methods_8cpp_source.xhtml#l00018">TimelineUtilityMethods.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="_profiling_8hpp_xhtml_a5ccc65e2c464ac05ce311fdae7ede03a"><div class="ttname"><a href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a></div><div class="ttdeci">#define ARMNN_SCOPED_PROFILING_EVENT(backendId, name)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00220">Profiling.hpp:220</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/<a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a></li>
<li>src/armnn/<a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_loaded_network.xhtml">LoadedNetwork</a></li>
    <li class="footer">Generated on Wed Nov 17 2021 12:59:43 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
