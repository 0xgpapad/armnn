<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: Member List</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_i_layer_support.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ILayerSupport Member List</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is the complete list of members for <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a>, including all inherited members.</p>
<table class="directory">
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aab2a487bc88047443d8a0f87c3c40b8d">ILayerSupport</a>()</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5588d9c90ee688f83eb1df4f9110ceee">IsAbsSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a787fcb2a22d45abc7b75644fd1c45743">IsActivationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a09e005510eccbbfa14bed9205c27523a">IsAdditionSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afb1f9c150c3705ccdff06d3bda0f705d">IsArgMinMaxSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3ebfb6e31ffd51c948ebf4e668ee6a13">IsBatchNormalizationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3a2d1bd9f4db345c6e8cbebe507e1220">IsBatchToSpaceNdSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae26f93e4cf5936a15e91f354741f9751">IsCastSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa9e12845869a571af314feb775bfcf8d">IsComparisonSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ComparisonDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a48bb43166dd8d7a27428a19738c73e54">IsConcatSupported</a>(const std::vector&lt; const TensorInfo *&gt; inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7e62e57c8c2b25d2b8b657d6c1bedfce">IsConstantSupported</a>(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a64feb74ff84d2b289c088e4ed2f3dbcd">IsConvertBf16ToFp32Supported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a585d0743307644154123b0081c9fddbb">IsConvertFp16ToFp32Supported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af6308f7e194cb757a0782b88b3f3916a">IsConvertFp32ToBf16Supported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeacc3d08bdf5c5190a2b6d219e28620f">IsConvertFp32ToFp16Supported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0e8af0ce614d9a30c7398e1aa786d468">IsConvolution2dSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0ec5e547fe4b097ad19b6992e23e267d">IsDebugSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ada2ab8d017b73994f8cdc38c29e0fb60">IsDepthToSpaceSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a38078f04a0521624c71262291252dedd">IsDepthwiseConvolutionSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeff699f129c41cdd7b4a49569aa4fffb">IsDequantizeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1aecac7de9b71cfaaadecda47edc56c0">IsDetectionPostProcessSupported</a>(const TensorInfo &amp;boxEncodings, const TensorInfo &amp;scores, const TensorInfo &amp;anchors, const TensorInfo &amp;detectionBoxes, const TensorInfo &amp;detectionClasses, const TensorInfo &amp;detectionScores, const TensorInfo &amp;numDetections, const DetectionPostProcessDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4bee87b6d7a78ee4a3d6cecc7ad8a77a">IsDilatedDepthwiseConvolutionSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca2cc0ccc6a468bc5374fa2839258802">IsDivisionSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4a6603d415b4e963cacd9ede220b8119">IsElementwiseUnarySupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a26dde72aa68a605bd5cf89b85cde8650">IsEqualSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa467d4de09eb4bd51e02122fb3d6e7c0">IsFakeQuantizationSupported</a>(const TensorInfo &amp;input, const FakeQuantizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2fc14db765754af18a4724e678720b7b">IsFillSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const FillDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0683efc6cc81f888eccab0c637674f7a">IsFloorSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af5f8d5b50e69b8003357895450ee57bd">IsFullyConnectedSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const TensorInfo &amp;biases, const FullyConnectedDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a95a7b2d7b19575a98f3548f37bff2540">IsGatherSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abd9c6124747e300449bff6287d96cd73">IsGatherSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const GatherDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af623e15fff281da8bb4bad997151c9ab">IsGreaterSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;ouput, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a302869e220458e13c7e82c2671e5280c">IsInputSupported</a>(const TensorInfo &amp;input, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7e16e155e7f7445789e68424a9a870c5">IsInstanceNormalizationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af189848668211807688a56aac54978bf">IsL2NormalizationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a91bb1a44f9d05a4d6a4c6fedbf596c06">IsLogicalBinarySupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const LogicalBinaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9a6774ab8ad711b7fc48b8372279b3fc">IsLogicalUnarySupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5d791a3bc50549b3805a982bf4959d8">IsLogSoftmaxSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5942cec16b5719b59c4e80bc8be90342">IsLstmSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeeb17ef5763db43063b6e98d0a692e1f">IsMaximumSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4fc33395e8e392ba59eedcb721dc6d3d">IsMeanSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aef4d9a4b703b1a15558633b5802c663b">IsMemCopySupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af0cb232661c1e1bf9d253f396b6b4f4c">IsMemImportSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a429c2f3a583e59b1215d2902cd55edff">IsMergerSupported</a>(const std::vector&lt; const TensorInfo *&gt; inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad30162aa20f5484d48982537fdd42a04">IsMergeSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a76e472f67b857c5619c1751e0cd20a5c">IsMinimumSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;ouput, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aacb0b7d0aa3b7c495981f3e7ae6108e5">IsMultiplicationSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a09beb238888a3795a11e28b2f439a2c7">IsNormalizationSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3852eb9f8af92ee3dc7ddcbb3590d9e2">IsOutputSupported</a>(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a521e7f59a1ca7699c5182245fb52fb68">IsPadSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aaa4433e57a90fc106e9ca227cbf21acc">IsPermuteSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7d355424568d0383d53da623d88e4002">IsPooling2dSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a645dc9fbc6b5da2c9b3124eea544044e">IsPreCompiledSupported</a>(const TensorInfo &amp;input, const PreCompiledDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8356620b4723ae24b897940a44cca12e">IsPreluSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9ff96df741a96f76dec45a4f119d9f29">IsQLstmSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acbd0bc4ae2c7dafaa43a1f4558dec9e9">IsQuantizedLstmSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QuantizedLstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2e700405a95007bf3cdcfee4edd5faf6">IsQuantizeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aabe9e99096ebc1e0ac3231ae19f45d58">IsRankSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7058dbce479bec37843a972e0bc4f1e5">IsReduceSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReduceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b4e5775549210130fda73dbf9ff5805">IsReshapeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReshapeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0ea3f88552957d51ecf39aa084493dad">IsResizeBilinearSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a139c7fa3f4d25a1f8e63c4db26ed882a">IsResizeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1f421ed5bcee87cd4bb2fcccd8d79400">IsRsqrtSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5176e7f87f418561082d8c6310215cf7">IsSliceSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0653b070e13f6003314ff70c83dfdf82">IsSoftmaxSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a72900e5d5a48a3f5bab04b9bc53ad4cb">IsSpaceToBatchNdSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aad5b9a346998e69ce24668f474e8a41f">IsSpaceToDepthSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3475373a82a2dcea43f49157e72c2d1e">IsSplitterSupported</a>(const TensorInfo &amp;input, const ViewsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac2a17ba940c5ae8718306929c4fbcc49">IsSplitterSupported</a>(const TensorInfo &amp;input, const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt;&gt; &amp;outputs, const ViewsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3c875cde7fb98d33b415361653fe170e">IsStackSupported</a>(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab44a343d43671032ae1395b06508ac36">IsStandInSupported</a>(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const std::vector&lt; const TensorInfo *&gt; &amp;outputs, const StandInDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec35c53952d13100216d2a2b9f63b98c">IsStridedSliceSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af76dce64a3338e037bb8eb41e5a219aa">IsSubtractionSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af05157bd75bb2a7a3a942be85945321a">IsSwitchSupported</a>(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output0, const TensorInfo &amp;output1, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0cd42985d5a85895204331e19d2e4c75">IsTransposeConvolution2dSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4d18c121fd6e27cceda23776e3418be5">IsTransposeSupported</a>(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9e7f4f28576904804cd759e49173beeb">~ILayerSupport</a>()</td><td class="entry"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></td></tr>
</table></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Mon May 10 2021 16:39:55 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
