<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnTfLiteParser/test/DetectionPostProcess.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('armnn_tf_lite_parser_2test_2_detection_post_process_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">DetectionPostProcess.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_tf_lite_parser_8hpp_source.xhtml">../TfLiteParser.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml">ParserFlatbuffersFixture.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_parser_prototxt_fixture_8hpp_source.xhtml">ParserPrototxtFixture.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_parser_helper_8hpp_source.xhtml">ParserHelper.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_graph_utils_8hpp_source.xhtml">test/GraphUtils.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_polymorphic_downcast_8hpp_source.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_quantize_helper_8hpp_source.xhtml">QuantizeHelper.hpp</a>&gt;</code><br />
<code>#include &lt;boost/test/unit_test.hpp&gt;</code><br />
</div>
<p><a href="armnn_tf_lite_parser_2test_2_detection_post_process_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a04100371674f0cea5e0cc32a9a5ad7b1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="armnn_tf_lite_parser_2test_2_detection_post_process_8cpp.xhtml#a04100371674f0cea5e0cc32a9a5ad7b1">BOOST_FIXTURE_TEST_CASE</a> (ParseDetectionPostProcess, ParseDetectionPostProcessCustomOptions)</td></tr>
<tr class="separator:a04100371674f0cea5e0cc32a9a5ad7b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b421e50a520d2a52d6cdef8b84ef26f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="armnn_tf_lite_parser_2test_2_detection_post_process_8cpp.xhtml#a1b421e50a520d2a52d6cdef8b84ef26f">BOOST_FIXTURE_TEST_CASE</a> (DetectionPostProcessGraphStructureTest, ParseDetectionPostProcessCustomOptions)</td></tr>
<tr class="separator:a1b421e50a520d2a52d6cdef8b84ef26f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a04100371674f0cea5e0cc32a9a5ad7b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04100371674f0cea5e0cc32a9a5ad7b1">&#9670;&nbsp;</a></span>BOOST_FIXTURE_TEST_CASE() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_FIXTURE_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">ParseDetectionPostProcess&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ParseDetectionPostProcessCustomOptions&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="armnn_tf_lite_parser_2test_2_detection_post_process_8cpp_source.xhtml#l00164">164</a> of file <a class="el" href="armnn_tf_lite_parser_2test_2_detection_post_process_8cpp_source.xhtml">DetectionPostProcess.cpp</a>.</p>

<p class="reference">References <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings()</a>, and <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores()</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    Setup();</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// Inputs</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">using</span> UnquantizedContainer = std::vector&lt;float&gt;;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    UnquantizedContainer <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a> =</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        0.0f,  0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        0.0f,  1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        0.0f, -1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        0.0f,  0.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        0.0f,  1.0f, 0.0f, 0.0f,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        0.0f,  0.0f, 0.0f, 0.0f</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    };</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    UnquantizedContainer <a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a> =</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        0.0f, 0.9f,  0.8f,</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        0.0f, 0.75f, 0.72f,</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        0.0f, 0.6f,  0.5f,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        0.0f, 0.93f, 0.95f,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        0.0f, 0.5f,  0.4f,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        0.0f, 0.3f,  0.2f</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    };</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// Outputs</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    UnquantizedContainer detectionBoxes =</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        0.0f, 10.0f, 1.0f, 11.0f,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        0.0f, 10.0f, 1.0f, 11.0f,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        0.0f, 0.0f,  0.0f, 0.0f</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    };</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    UnquantizedContainer detectionClasses = { 1.0f,  0.0f,  0.0f };</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    UnquantizedContainer detectionScores  = { 0.95f, 0.93f, 0.0f };</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    UnquantizedContainer numDetections    = { 2.0f };</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// Quantize inputs and outputs</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">using</span> QuantizedContainer = std::vector&lt;uint8_t&gt;;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    QuantizedContainer quantBoxEncodings = armnnUtils::QuantizedVector&lt;uint8_t&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a>, 1.00f, 1);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    QuantizedContainer quantScores       = armnnUtils::QuantizedVector&lt;uint8_t&gt;(<a class="code" href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a>,       0.01f, 0);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    std::map&lt;std::string, QuantizedContainer&gt; input =</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        { <span class="stringliteral">&quot;box_encodings&quot;</span>, quantBoxEncodings },</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        { <span class="stringliteral">&quot;scores&quot;</span>, quantScores }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    };</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    std::map&lt;std::string, UnquantizedContainer&gt; output =</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        { <span class="stringliteral">&quot;detection_boxes&quot;</span>, detectionBoxes},</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        { <span class="stringliteral">&quot;detection_classes&quot;</span>, detectionClasses},</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        { <span class="stringliteral">&quot;detection_scores&quot;</span>, detectionScores},</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        { <span class="stringliteral">&quot;num_detections&quot;</span>, numDetections}</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    };</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    RunTest&lt;armnn::DataType::QAsymmU8, armnn::DataType::Float32&gt;(0, input, output);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div><div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_ada422a73ac4e68bcb1b1b1f0b44028d9"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#ada422a73ac4e68bcb1b1b1f0b44028d9">boxEncodings</a></div><div class="ttdeci">std::vector&lt; float &gt; boxEncodings({ 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f })</div></div>
<div class="ttc" id="_neon_end_to_end_tests_8cpp_xhtml_a0348e6bb67ace72535bd105219bb6237"><div class="ttname"><a href="_neon_end_to_end_tests_8cpp.xhtml#a0348e6bb67ace72535bd105219bb6237">scores</a></div><div class="ttdeci">std::vector&lt; float &gt; scores({ 0.0f, 0.9f, 0.8f, 0.0f, 0.75f, 0.72f, 0.0f, 0.6f, 0.5f, 0.0f, 0.93f, 0.95f, 0.0f, 0.5f, 0.4f, 0.0f, 0.3f, 0.2f })</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1b421e50a520d2a52d6cdef8b84ef26f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b421e50a520d2a52d6cdef8b84ef26f">&#9670;&nbsp;</a></span>BOOST_FIXTURE_TEST_CASE() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_FIXTURE_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">DetectionPostProcessGraphStructureTest&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ParseDetectionPostProcessCustomOptions&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="armnn_tf_lite_parser_2test_2_detection_post_process_8cpp_source.xhtml#l00226">226</a> of file <a class="el" href="armnn_tf_lite_parser_2test_2_detection_post_process_8cpp_source.xhtml">DetectionPostProcess.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00034">CheckNumberOfInputSlot()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00039">CheckNumberOfOutputSlot()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::CpuRef</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">armnn::DetectionPostProcess</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00022">GetFirstLayerWithName()</a>, <a class="el" href="_test_utils_8cpp_source.xhtml#l00025">armnn::GetGraphForTesting()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00265">Layer::GetType()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00044">IsConnected()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01568">armnn::Optimize()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, and <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>.</p>
<div class="fragment"><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;{</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">       Inputs:            box_encodings  scores</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">                               \          /</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">                            DetectionPostProcess</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">                          /        /     \       \</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">                         /        /       \       \</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">       Outputs:     detection detection detection num_detections</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">                    boxes     classes   scores</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    ReadStringToBinary();</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network = m_Parser-&gt;CreateNetworkFromBinary(m_GraphBinary);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">auto</span> optimized = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, { <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a> }, m_Runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">armnn::Graph</a>&amp; graph = <a class="code" href="namespacearmnn.xhtml#a6a2659750d6161b693d0e51616791959">GetGraphForTesting</a>(optimized.get());</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="comment">// Check the number of layers in the graph</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    BOOST_TEST((graph.GetNumInputs() == 2));</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    BOOST_TEST((graph.GetNumOutputs() == 4));</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    BOOST_TEST((graph.GetNumLayers() == 7));</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="comment">// Input layers</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* boxEncodingLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;box_encodings&quot;</span>);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    BOOST_TEST((boxEncodingLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a>));</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(boxEncodingLayer, 0));</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(boxEncodingLayer, 1));</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* scoresLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;scores&quot;</span>);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    BOOST_TEST((scoresLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a>));</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(scoresLayer, 0));</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(scoresLayer, 1));</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="comment">// DetectionPostProcess layer</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* detectionPostProcessLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;DetectionPostProcess:0:0&quot;</span>);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    BOOST_TEST((detectionPostProcessLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">armnn::LayerType::DetectionPostProcess</a>));</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(detectionPostProcessLayer, 2));</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(detectionPostProcessLayer, 4));</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="comment">// Output layers</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* detectionBoxesLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;detection_boxes&quot;</span>);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    BOOST_TEST((detectionBoxesLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a>));</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(detectionBoxesLayer, 1));</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(detectionBoxesLayer, 0));</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* detectionClassesLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;detection_classes&quot;</span>);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    BOOST_TEST((detectionClassesLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a>));</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(detectionClassesLayer, 1));</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(detectionClassesLayer, 0));</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* detectionScoresLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;detection_scores&quot;</span>);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    BOOST_TEST((detectionScoresLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a>));</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(detectionScoresLayer, 1));</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(detectionScoresLayer, 0));</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* numDetectionsLayer = <a class="code" href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a>(graph, <span class="stringliteral">&quot;num_detections&quot;</span>);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    BOOST_TEST((numDetectionsLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a>));</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a>(numDetectionsLayer, 1));</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a>(numDetectionsLayer, 0));</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="comment">// Check the connections</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> boxEncodingTensor(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({ 1, 6, 4 }), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>, 1, 1);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> scoresTensor(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({ 1, 6, 3 }), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>,</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                                      0.00999999978f, 0);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionBoxesTensor(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({ 1, 3, 4 }), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>, 0, 0);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionClassesTensor(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({ 1, 3 }), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>, 0, 0);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionScoresTensor(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({ 1, 3 }), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>, 0, 0);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> numDetectionsTensor(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({ 1} ), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>, 0, 0);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(boxEncodingLayer, detectionPostProcessLayer, 0, 0, boxEncodingTensor));</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(scoresLayer, detectionPostProcessLayer, 0, 1, scoresTensor));</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(detectionPostProcessLayer, detectionBoxesLayer, 0, 0, detectionBoxesTensor));</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(detectionPostProcessLayer, detectionClassesLayer, 1, 0, detectionClassesTensor));</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(detectionPostProcessLayer, detectionScoresLayer, 2, 0, detectionScoresTensor));</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    BOOST_TEST(<a class="code" href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a>(detectionPostProcessLayer, numDetectionsLayer, 3, 0, numDetectionsTensor));</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a5f17e02e0054dac0a691685a0464ed36"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a5f17e02e0054dac0a691685a0464ed36">GetFirstLayerWithName</a></div><div class="ttdeci">armnn::Layer * GetFirstLayerWithName(armnn::Graph &amp;graph, const std::string &amp;name)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00022">GraphUtils.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">armnn::LayerType::DetectionPostProcess</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01568">Network.cpp:1568</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_ad8e15c530c929ab823d89ae9fd2d3f11"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#ad8e15c530c929ab823d89ae9fd2d3f11">armnn::Layer::GetType</a></div><div class="ttdeci">LayerType GetType() const override</div><div class="ttdoc">Returns the armnn::LayerType of this layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00265">Layer.hpp:265</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00029">Graph.hpp:29</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_afd518dba3d52728670459e4ad3bed5e1"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#afd518dba3d52728670459e4ad3bed5e1">IsConnected</a></div><div class="ttdeci">bool IsConnected(armnn::Layer *srcLayer, armnn::Layer *destLayer, unsigned int srcSlot, unsigned int destSlot, const armnn::TensorInfo &amp;expectedTensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00044">GraphUtils.cpp:44</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a6a2659750d6161b693d0e51616791959"><div class="ttname"><a href="namespacearmnn.xhtml#a6a2659750d6161b693d0e51616791959">armnn::GetGraphForTesting</a></div><div class="ttdeci">Graph &amp; GetGraphForTesting(IOptimizedNetwork *optNet)</div><div class="ttdef"><b>Definition:</b> <a href="_test_utils_8cpp_source.xhtml#l00025">TestUtils.cpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_a4c04337db4d5f380219a005657a8223b"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#a4c04337db4d5f380219a005657a8223b">CheckNumberOfInputSlot</a></div><div class="ttdeci">bool CheckNumberOfInputSlot(armnn::Layer *layer, unsigned int num)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00034">GraphUtils.cpp:34</a></div></div>
<div class="ttc" id="_graph_utils_8cpp_xhtml_aada2e27f100807f5786eecb03390ba58"><div class="ttname"><a href="_graph_utils_8cpp.xhtml#aada2e27f100807f5786eecb03390ba58">CheckNumberOfOutputSlot</a></div><div class="ttdeci">bool CheckNumberOfOutputSlot(armnn::Layer *layer, unsigned int num)</div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00039">GraphUtils.cpp:39</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00173">INetwork.hpp:173</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00210">Layer.hpp:210</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_510324e450b9df55f9aac2d01fae83d8.xhtml">armnnTfLiteParser</a></li><li class="navelem"><a class="el" href="dir_6d8d07609c57029a35488d2120e28fbd.xhtml">test</a></li><li class="navelem"><a class="el" href="armnn_tf_lite_parser_2test_2_detection_post_process_8cpp.xhtml">DetectionPostProcess.cpp</a></li>
    <li class="footer">Generated on Mon May 10 2021 16:39:51 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
