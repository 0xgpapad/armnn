<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/layerTests/FullyConnectedTestImpl.hpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_fully_connected_test_impl_8hpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">FullyConnectedTestImpl.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_layer_test_result_8hpp_source.xhtml">LayerTestResult.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_resolve_type_8hpp_source.xhtml">ResolveType.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_2backends_2_i_backend_internal_8hpp_source.xhtml">armnn/backends/IBackendInternal.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_workload_factory_8hpp_source.xhtml">backendsCommon/WorkloadFactory.hpp</a>&gt;</code><br />
</div>
<p><a href="_fully_connected_test_impl_8hpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a59a2fc917d2bd6687858f4ace9617a97"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:a59a2fc917d2bd6687858f4ace9617a97"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; T, 2 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_fully_connected_test_impl_8hpp.xhtml#a59a2fc917d2bd6687858f4ace9617a97">FullyConnectedTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory, bool biasEnabled, bool constantWeights)</td></tr>
<tr class="separator:a59a2fc917d2bd6687858f4ace9617a97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb505feb224a201164ab815b8a6159cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 2 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_fully_connected_test_impl_8hpp.xhtml#afb505feb224a201164ab815b8a6159cf">FullyConnectedFloat32Test</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory, bool biasEnabled, bool transposeWeights)</td></tr>
<tr class="separator:afb505feb224a201164ab815b8a6159cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa50f043364dd453338261e82397c3e1b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt; float, 2 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_fully_connected_test_impl_8hpp.xhtml#aa50f043364dd453338261e82397c3e1b">FullyConnectedLargeTest</a> (<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;workloadFactory, const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;tensorHandleFactory, bool transposeWeights)</td></tr>
<tr class="separator:aa50f043364dd453338261e82397c3e1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="afb505feb224a201164ab815b8a6159cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb505feb224a201164ab815b8a6159cf">&#9670;&nbsp;</a></span>FullyConnectedFloat32Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 2&gt; FullyConnectedFloat32Test </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>biasEnabled</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>transposeWeights</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00334">334</a> of file <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml">FullyConnectedTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult&lt; T, n &gt;::outputExpected</a>, and <a class="el" href="_descriptors_8cpp_source.xhtml#l00350">armnn::swap()</a>.</p>
<div class="fragment"><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;{</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth = 1;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = 1;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels = 5;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputNum = 2;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannels = 3;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputNum = 2;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="comment">// Define the tensor descriptors.</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> weightsDesc;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> biasesDesc;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[]   = { inputNum, inputChannels, inputHeight, inputWidth };</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[]  = { outputNum, outputChannels };</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsShape[] = { inputChannels, outputChannels };</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">if</span> (transposeWeights)</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a14d7f180bf51e86850305965c3707e07">std::swap</a>(weightsShape[0], weightsShape[1]);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> biasShape[] = { outputChannels };</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    inputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(2, outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    weightsDesc = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(2, weightsShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    biasesDesc = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(1, biasShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 2&gt;</a> result(outputTensorInfo);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    boost::multi_array&lt;float, 4&gt; input = MakeTensor&lt;float, 4&gt;(inputTensorInfo, std::vector&lt;float&gt;(</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        {</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            1.0f, 2.0f, 3.0f, 4.0f, 5.0f,</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            5.0f, 4.0f, 3.0f, 2.0f, 1.0f</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        })</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    );</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    boost::multi_array&lt;float, 2&gt; weights = MakeTensor&lt;float, 2&gt;(weightsDesc, std::vector&lt;float&gt;(</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        {</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            .5f, 2.f, .5f,</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            .5f, 2.f, 1.f,</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            .5f, 2.f, 2.f,</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            .5f, 2.f, 3.f,</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            .5f, 2.f, 4.f</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        }));</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keywordflow">if</span> (transposeWeights)</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    {</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        weights = MakeTensor&lt;float, 2&gt;(weightsDesc, std::vector&lt;float&gt;(</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        {</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            .5f, .5f, .5f, .5f, .5f,</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            2.f, 2.f, 2.f, 2.f, 2.f,</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            .5f, 1.f, 2.f, 3.f, 4.f</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        }));</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    }</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    std::vector&lt;float&gt; biasValues({0.f, 0.f, 0.f});</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordflow">if</span> (biasEnabled)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    {</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        biasValues =  std::vector&lt;float&gt;({10.f, 20.f, 30.f});</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    }</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    boost::multi_array&lt;float, 1&gt; bias = MakeTensor&lt;float, 1&gt;(biasesDesc, biasValues);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    result = SimpleFullyConnectedTestImpl&lt;float&gt;(</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        workloadFactory,</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        memoryManager,</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        tensorHandleFactory,</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        inputTensorInfo, outputTensorInfo,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        weightsDesc, biasesDesc,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        weights, bias, input,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        biasEnabled, transposeWeights</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    );</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    result.outputExpected = MakeTensor&lt;float, 2&gt;(outputTensorInfo, std::vector&lt;float&gt;(</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        {</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            0.5f + 1.0f + 1.5f + 2.0f + 2.5f + biasValues[0],</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            2.0f + 4.0f + 6.0f + 8.0f + 10.f + biasValues[1],</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            0.5f + 2.0f + 6.0f + 12.f + 20.f + biasValues[2],</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            2.5f + 2.0f + 1.5f + 1.0f + 0.5f + biasValues[0],</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            10.0f + 8.0f + 6.0f + 4.0f + 2.f + biasValues[1],</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            2.5f + 4.0f + 6.0f + 6.f + 4.f   + biasValues[2]</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        })</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    );</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a14d7f180bf51e86850305965c3707e07"><div class="ttname"><a href="namespacearmnn.xhtml#a14d7f180bf51e86850305965c3707e07">armnn::swap</a></div><div class="ttdeci">void swap(OriginsDescriptor &amp;first, OriginsDescriptor &amp;second)</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00350">Descriptors.cpp:350</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00030">LayerTestResult.hpp:30</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa50f043364dd453338261e82397c3e1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa50f043364dd453338261e82397c3e1b">&#9670;&nbsp;</a></span>FullyConnectedLargeTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;float, 2&gt; FullyConnectedLargeTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>transposeWeights</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00433">433</a> of file <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml">FullyConnectedTestImpl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;{</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">return</span> FullyConnectedLargeTestCommon&lt;armnn::DataType::Float32&gt;(workloadFactory,</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                                                                   memoryManager,</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                                                                   tensorHandleFactory,</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                                                   transposeWeights);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a59a2fc917d2bd6687858f4ace9617a97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59a2fc917d2bd6687858f4ace9617a97">&#9670;&nbsp;</a></span>FullyConnectedTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_layer_test_result.xhtml">LayerTestResult</a>&lt;T, 2&gt; FullyConnectedTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>biasEnabled</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>constantWeights</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00128">128</a> of file <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml">FullyConnectedTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00014">armnn::GetBiasTypeFromWeightsType()</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00042">LayerTestResult&lt; T, n &gt;::outputExpected</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00464">TensorInfo::SetQuantizationScale()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_fuse_activation_tests_8cpp_source.xhtml#l00026">armnn::GetVector()</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth = 3u;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = 2u;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels = 1u;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = inputWidth * inputHeight * inputChannels;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannels = 2u;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({ 1, inputChannels, inputHeight, inputWidth }, ArmnnType);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.1f);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    inputTensorInfo.SetQuantizationOffset(63);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({ 1, outputChannels }, ArmnnType);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    outputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(5.f);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    outputTensorInfo.SetQuantizationOffset(biasEnabled ? -50 : 10);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> weightsDesc({ outputChannels, inputSize }, ArmnnType);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    weightsDesc.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(0.2f);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    weightsDesc.SetQuantizationOffset(93);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> biasesDesc({ outputChannels }, <a class="code" href="namespacearmnn.xhtml#a83c4a275acf59f62b8387f389d0929d5">GetBiasTypeFromWeightsType</a>(weightsDesc.GetDataType()).value());</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    biasesDesc.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(inputTensorInfo.GetQuantizationScale() * weightsDesc.GetQuantizationScale());</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    biasesDesc.SetQuantizationOffset(0);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 2&gt;</a> result(outputTensorInfo);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">auto</span> input = MakeTensor&lt;T, 4&gt;(inputTensorInfo, ConvertToDataType&lt;ArmnnType&gt;(</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            -1.2f, 6.1f, -3.5f,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            18.8f, -5.5f, 2.9f</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        },</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        inputTensorInfo));</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">auto</span> weights = MakeTensor&lt;T, 2&gt;(weightsDesc, ConvertToDataType&lt;ArmnnType&gt;(</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            -8.4f, 20.0f, -10.4f, -8, 16.4f, -11.8f,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            23.4f, 10.4f, -14.0f, -3.8f, -11.8f, 11.4f</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        },</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        weightsDesc));</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">auto</span> bias = MakeTensor&lt;int32_t, 1&gt;(biasesDesc, std::vector&lt;int32_t&gt;{9250, 67500});</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">if</span> (constantWeights)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        result = SimpleFullyConnectedTestImpl&lt;T&gt;(workloadFactory,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                                 memoryManager,</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                                 tensorHandleFactory,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                                 inputTensorInfo,</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                                 outputTensorInfo,</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                                 weightsDesc,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                                 biasesDesc,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                                 weights,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                                                 bias,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                                 input,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                                 biasEnabled,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                                 <span class="keyword">true</span>);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        result = SimpleFullyConnectedTestWeightsAsInputsImpl&lt;T&gt;(workloadFactory,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                                 memoryManager,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                                 tensorHandleFactory,</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                                 inputTensorInfo,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                                 outputTensorInfo,</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                                 weightsDesc,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                                 biasesDesc,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                                 weights,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                                 bias,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                                 input,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                                 biasEnabled,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                                 <span class="keyword">true</span>);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">if</span> (biasEnabled)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        result.outputExpected = MakeTensor&lt;T, 2&gt;(outputTensorInfo,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                                 ConvertToDataType&lt;ArmnnType&gt;({80.f, 1460.f}, outputTensorInfo));</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        result.outputExpected = MakeTensor&lt;T, 2&gt;(outputTensorInfo,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                                 ConvertToDataType&lt;ArmnnType&gt;({-107.04f, 110.f}, outputTensorInfo));</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a83c4a275acf59f62b8387f389d0929d5"><div class="ttname"><a href="namespacearmnn.xhtml#a83c4a275acf59f62b8387f389d0929d5">armnn::GetBiasTypeFromWeightsType</a></div><div class="ttdeci">armnn::Optional&lt; armnn::DataType &gt; GetBiasTypeFromWeightsType(armnn::Optional&lt; armnn::DataType &gt; weightsType)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_rules_8hpp_source.xhtml#l00014">LayerSupportRules.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00464">Tensor.cpp:464</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_test_result_8hpp_source.xhtml#l00030">LayerTestResult.hpp:30</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_99a30439342d160875b21dac3498ad7f.xhtml">layerTests</a></li><li class="navelem"><a class="el" href="_fully_connected_test_impl_8hpp.xhtml">FullyConnectedTestImpl.hpp</a></li>
    <li class="footer">Generated on Mon May 10 2021 16:39:51 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
