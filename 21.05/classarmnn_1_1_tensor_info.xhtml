<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: TensorInfo Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_tensor_info.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_tensor_info-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">TensorInfo Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a21c2ae9fa438faf42669dadda628080c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a> ()</td></tr>
<tr class="memdesc:a21c2ae9fa438faf42669dadda628080c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Empty (invalid) constructor.  <a href="#a21c2ae9fa438faf42669dadda628080c">More...</a><br /></td></tr>
<tr class="separator:a21c2ae9fa438faf42669dadda628080c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0f1e7addec3daacb5e656e3031e84b2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#ae0f1e7addec3daacb5e656e3031e84b2">TensorInfo</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType, float quantizationScale=0.0f, int32_t quantizationOffset=0)</td></tr>
<tr class="separator:ae0f1e7addec3daacb5e656e3031e84b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac478f429b6f31e62bc72bdfc9c9ad242"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#ac478f429b6f31e62bc72bdfc9c9ad242">TensorInfo</a> (unsigned int numDimensions, const unsigned int *dimensionSizes, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType, float quantizationScale=0.0f, int32_t quantizationOffset=0)</td></tr>
<tr class="separator:ac478f429b6f31e62bc72bdfc9c9ad242"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac58c3467c7a7998120249cd0b940d221"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#ac58c3467c7a7998120249cd0b940d221">TensorInfo</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType, const std::vector&lt; float &gt; &amp;quantizationScales, unsigned int quantizationDim)</td></tr>
<tr class="separator:ac58c3467c7a7998120249cd0b940d221"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e546b0233ac93ef3ef0e9ee96117c76"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a1e546b0233ac93ef3ef0e9ee96117c76">TensorInfo</a> (unsigned int numDimensions, const unsigned int *dimensionSizes, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType, const std::vector&lt; float &gt; &amp;quantizationScales, unsigned int quantizationDim)</td></tr>
<tr class="separator:a1e546b0233ac93ef3ef0e9ee96117c76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef0989e23ab5fc862df9981d3b371f63"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#aef0989e23ab5fc862df9981d3b371f63">TensorInfo</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;other)</td></tr>
<tr class="separator:aef0989e23ab5fc862df9981d3b371f63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac45c8c0052476cd66ef732de76dd9bc8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#ac45c8c0052476cd66ef732de76dd9bc8">operator=</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;other)</td></tr>
<tr class="separator:ac45c8c0052476cd66ef732de76dd9bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a586e1eec08e847abfeb3de3a4038c5ce"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a586e1eec08e847abfeb3de3a4038c5ce">operator==</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;other) const</td></tr>
<tr class="separator:a586e1eec08e847abfeb3de3a4038c5ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a944e616dc6fdde5287b17f2265307d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a2a944e616dc6fdde5287b17f2265307d">operator!=</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;other) const</td></tr>
<tr class="separator:a2a944e616dc6fdde5287b17f2265307d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b5d0f8a24e9d9238f412260a552acf8"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a> () const</td></tr>
<tr class="separator:a8b5d0f8a24e9d9238f412260a552acf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a350bcc7d86f7d9333340a0a04be078f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a350bcc7d86f7d9333340a0a04be078f6">GetShape</a> ()</td></tr>
<tr class="separator:a350bcc7d86f7d9333340a0a04be078f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe8889e8150beef5fd204b2d87b49298"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;newShape)</td></tr>
<tr class="separator:abe8889e8150beef5fd204b2d87b49298"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a157e27d41e9f6b21f0d3c025fa47dc24"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a> () const</td></tr>
<tr class="separator:a157e27d41e9f6b21f0d3c025fa47dc24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8846406ac37fbd2204f0be16ee05d5b7"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a> () const</td></tr>
<tr class="separator:a8846406ac37fbd2204f0be16ee05d5b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea909c7327109228ef618d459015def3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a> () const</td></tr>
<tr class="separator:aea909c7327109228ef618d459015def3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71975fcec1464d639f1a78f73164d1bd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">SetDataType</a> (<a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> type)</td></tr>
<tr class="separator:a71975fcec1464d639f1a78f73164d1bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af672d1c9e2a120a18926cb645981fbb7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">HasMultipleQuantizationScales</a> () const</td></tr>
<tr class="separator:af672d1c9e2a120a18926cb645981fbb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab85cd8cc10c96a7c99c14042c251fc48"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#ab85cd8cc10c96a7c99c14042c251fc48">HasPerAxisQuantization</a> () const</td></tr>
<tr class="separator:ab85cd8cc10c96a7c99c14042c251fc48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bc11f1fa23ef42532f9fdd04d355270"><td class="memItemLeft" align="right" valign="top">std::vector&lt; float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a8bc11f1fa23ef42532f9fdd04d355270">GetQuantizationScales</a> () const</td></tr>
<tr class="separator:a8bc11f1fa23ef42532f9fdd04d355270"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a8675f9d64c3fb59e6af15362bb6332"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">SetQuantizationScales</a> (const std::vector&lt; float &gt; &amp;scales)</td></tr>
<tr class="separator:a1a8675f9d64c3fb59e6af15362bb6332"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a047ca888c43bd7fb5702853bf72410d0"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a> () const</td></tr>
<tr class="separator:a047ca888c43bd7fb5702853bf72410d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a685739c4eb65a580e075282cfe6787d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a> (float scale)</td></tr>
<tr class="separator:a685739c4eb65a580e075282cfe6787d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a770b51078da02f44a819e9f95d8058b5"><td class="memItemLeft" align="right" valign="top">int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a> () const</td></tr>
<tr class="separator:a770b51078da02f44a819e9f95d8058b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63cbc581012c957f9d68d224ddc3e43c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a> (int32_t offset)</td></tr>
<tr class="separator:a63cbc581012c957f9d68d224ddc3e43c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b8fc85ce966c035d789cf22db5088a1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; unsigned int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">GetQuantizationDim</a> () const</td></tr>
<tr class="separator:a8b8fc85ce966c035d789cf22db5088a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a519efe8ff6dc3aacdfe8a999415e3e4e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">SetQuantizationDim</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; unsigned int &gt; &amp;quantizationDim)</td></tr>
<tr class="separator:a519efe8ff6dc3aacdfe8a999415e3e4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c00efeb540198b33b8558c76e5cc2dd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a7c00efeb540198b33b8558c76e5cc2dd">IsQuantized</a> () const</td></tr>
<tr class="separator:a7c00efeb540198b33b8558c76e5cc2dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22f377fc4e10dc1773a3f979061e85f1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#a22f377fc4e10dc1773a3f979061e85f1">IsTypeSpaceMatch</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;other) const</td></tr>
<tr class="memdesc:a22f377fc4e10dc1773a3f979061e85f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check that the types are the same and, if quantize, that the quantization parameters are the same.  <a href="#a22f377fc4e10dc1773a3f979061e85f1">More...</a><br /></td></tr>
<tr class="separator:a22f377fc4e10dc1773a3f979061e85f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcbdfb544ece4c31d0b37715ad0f3be0"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a> () const</td></tr>
<tr class="separator:abcbdfb544ece4c31d0b37715ad0f3be0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00152">152</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a21c2ae9fa438faf42669dadda628080c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21c2ae9fa438faf42669dadda628080c">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Empty (invalid) constructor. </p>

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00341">341</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;: m_DataType(<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae0f1e7addec3daacb5e656e3031e84b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0f1e7addec3daacb5e656e3031e84b2">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>quantizationScale</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>quantizationOffset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00346">346</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00480">TensorInfo::SetQuantizationOffset()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00464">TensorInfo::SetQuantizationScale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    : m_Shape(shape)</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    , m_DataType(dataType)</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(quantizationScale);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(quantizationOffset);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00464">Tensor.cpp:464</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00480">Tensor.cpp:480</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac478f429b6f31e62bc72bdfc9c9ad242"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac478f429b6f31e62bc72bdfc9c9ad242">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numDimensions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int *&#160;</td>
          <td class="paramname"><em>dimensionSizes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>quantizationScale</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>quantizationOffset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00357">357</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00480">TensorInfo::SetQuantizationOffset()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00464">TensorInfo::SetQuantizationScale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    : m_Shape(numDimensions, dimensionSizes)</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    , m_DataType(dataType)</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;{</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(quantizationScale);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(quantizationOffset);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00464">Tensor.cpp:464</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00480">Tensor.cpp:480</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac58c3467c7a7998120249cd0b940d221"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac58c3467c7a7998120249cd0b940d221">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>quantizationScales</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>quantizationDim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00369">369</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00490">TensorInfo::SetQuantizationDim()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00447">TensorInfo::SetQuantizationScales()</a>.</p>
<div class="fragment"><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    : m_Shape(shape)</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    , m_DataType(dataType)</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;{</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">SetQuantizationScales</a>(quantizationScales);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">SetQuantizationDim</a>(MakeOptional&lt;unsigned int&gt;(quantizationDim));</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a519efe8ff6dc3aacdfe8a999415e3e4e"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">armnn::TensorInfo::SetQuantizationDim</a></div><div class="ttdeci">void SetQuantizationDim(const Optional&lt; unsigned int &gt; &amp;quantizationDim)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00490">Tensor.cpp:490</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a1a8675f9d64c3fb59e6af15362bb6332"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">armnn::TensorInfo::SetQuantizationScales</a></div><div class="ttdeci">void SetQuantizationScales(const std::vector&lt; float &gt; &amp;scales)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00447">Tensor.cpp:447</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1e546b0233ac93ef3ef0e9ee96117c76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e546b0233ac93ef3ef0e9ee96117c76">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numDimensions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int *&#160;</td>
          <td class="paramname"><em>dimensionSizes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>quantizationScales</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>quantizationDim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00380">380</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00490">TensorInfo::SetQuantizationDim()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00447">TensorInfo::SetQuantizationScales()</a>.</p>
<div class="fragment"><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    : m_Shape(numDimensions, dimensionSizes)</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    , m_DataType(dataType)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;{</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">SetQuantizationScales</a>(quantizationScales);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">SetQuantizationDim</a>(MakeOptional&lt;unsigned int&gt;(quantizationDim));</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a519efe8ff6dc3aacdfe8a999415e3e4e"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">armnn::TensorInfo::SetQuantizationDim</a></div><div class="ttdeci">void SetQuantizationDim(const Optional&lt; unsigned int &gt; &amp;quantizationDim)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00490">Tensor.cpp:490</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a1a8675f9d64c3fb59e6af15362bb6332"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">armnn::TensorInfo::SetQuantizationScales</a></div><div class="ttdeci">void SetQuantizationScales(const std::vector&lt; float &gt; &amp;scales)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00447">Tensor.cpp:447</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aef0989e23ab5fc862df9981d3b371f63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef0989e23ab5fc862df9981d3b371f63">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00392">392</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;: m_Shape(other.m_Shape)</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;, m_DataType(other.m_DataType)</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;, m_Quantization(other.m_Quantization)</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aea909c7327109228ef618d459015def3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea909c7327109228ef618d459015def3">&#9670;&nbsp;</a></span>GetDataType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> GetDataType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00194">194</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00129">BiasAndWeightsTypesCompatible::BiasAndWeightsTypesCompatible()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00120">BiasAndWeightsTypesMatch::BiasAndWeightsTypesMatch()</a>, <a class="el" href="_network_tests_8cpp_source.xhtml#l00373">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00052">armnnUtils::CalculateReducedOutputTensoInfo()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00103">armnnUtils::CalculateStridedSliceOutputTensorInfo()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00621">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_layer_support_8cpp_source.xhtml#l00064">armnn::CheckTensorDataTypesEqual()</a>, <a class="el" href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00037">armnn::ClConvertFp16ToFp32WorkloadValidate()</a>, <a class="el" href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00037">armnn::ClConvertFp32ToFp16WorkloadValidate()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02789">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00657">armnn::ConvertBf16ToFp32Weight()</a>, <a class="el" href="_convert_fp32_network_to_bf16_8hpp_source.xhtml#l00018">armnn::optimizations::ConvertWeight()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00682">TfLiteParserImpl::CreateNetworkFromBinary()</a>, <a class="el" href="_ref_depth_to_space_workload_8cpp_source.xhtml#l00019">RefDepthToSpaceWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_strided_slice_workload_8cpp_source.xhtml#l00023">RefStridedSliceWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_arg_min_max_workload_8cpp_source.xhtml#l00027">RefArgMinMaxWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_slice_workload_8cpp_source.xhtml#l00021">RefSliceWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_lstm_workload_8cpp_source.xhtml#l00046">RefLstmWorkload::ExecuteAsync()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00026">BFloat16ToFloat32::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00047">Float16ToFloat32::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00068">Float32ToBFloat16::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00089">Float32ToFloat16::Func()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00026">armnn::GetBiasDataType()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03583">TfLiteParserImpl::GetBuffer()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00284">Layer::GetDataType()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00086">armnnSerializer::GetFlatBufferArgMinMaxFunction()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00026">armnn::optimizations::pad_fold::GetLowestElement()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00152">armnnUtils::GetPerAxisParams()</a>, <a class="el" href="_tensor_handle_8cpp_source.xhtml#l00015">armnn::GetUnpaddedTensorStrides()</a>, <a class="el" href="_neon_workload_utils_8hpp_source.xhtml#l00035">armnn::InitializeArmComputeTensorData()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00051">armnn::InsertConvertBf16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00129">armnn::InsertConvertFp16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00168">armnn::InsertConvertFp32ToBf16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00090">armnn::InsertConvertFp32ToBf16LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00201">armnn::InsertConvertFp32ToFp16LayersAfter()</a>, <a class="el" href="_sample_dynamic_layer_support_8cpp_source.xhtml#l00027">SampleDynamicLayerSupport::IsAdditionSupported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l00435">RefLayerSupport::IsConvertFp16ToFp32Supported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l00470">RefLayerSupport::IsConvertFp32ToFp16Supported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l00490">RefLayerSupport::IsConvolution2dSupported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l00635">RefLayerSupport::IsDepthwiseConvolutionSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00474">NeonLayerSupport::IsFloorSupported()</a>, <a class="el" href="_layer_support_8cpp_source.xhtml#l00282">armnn::IsFloorSupported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l00958">RefLayerSupport::IsFullyConnectedSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00751">ClLayerSupport::IsQLstmSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00736">NeonLayerSupport::IsQLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00905">ClLayerSupport::IsSplitterSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00902">NeonLayerSupport::IsSplitterSupported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l02172">RefLayerSupport::IsTransposeConvolution2dSupported()</a>, <a class="el" href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00047">main()</a>, <a class="el" href="_decoders_8hpp_source.xhtml#l00070">armnn::MakeDecoder()</a>, <a class="el" href="_encoders_8hpp_source.xhtml#l00021">armnn::MakeEncoder()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02084">TfLiteParserImpl::OutputShapeOfReshape()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00014">armnn::PermuteTensor()</a>, <a class="el" href="_convert_fp32_network_to_fp16_8hpp_source.xhtml#l00018">ConvertFp32NetworkToFp16Impl::Run()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00093">TypeAnyOf::TypeAnyOf()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00104">TypeIs::TypeIs()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00642">ArgMinMaxQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01047">FullyConnectedQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01279">Convolution2dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01353">DepthwiseConvolution2dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02428">QuantizeQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02580">EqualQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02168">ConvertBf16ToFp32QueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02191">ConvertFp32ToBf16QueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02237">ConvertFp16ToFp32QueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02214">ConvertFp32ToFp16QueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02604">GreaterQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02654">GatherQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02757">DequantizeQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02883">TransposeConvolution2dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03556">ComparisonQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03650">LogicalBinaryQueueDescriptor::Validate()</a>, <a class="el" href="_serializer_test_utils_8cpp_source.xhtml#l00071">LayerVerifierBase::VerifyConstTensors()</a>, <a class="el" href="_serializer_test_utils_8cpp_source.xhtml#l00038">LayerVerifierBase::VerifyNameAndConnections()</a>, and <a class="el" href="_types_utils_8hpp_source.xhtml#l00320">armnn::VerifyTensorInfoDataType()</a>.</p>
<div class="fragment"><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{ <span class="keywordflow">return</span> m_DataType; }</div></div><!-- fragment -->
</div>
</div>
<a id="abcbdfb544ece4c31d0b37715ad0f3be0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcbdfb544ece4c31d0b37715ad0f3be0">&#9670;&nbsp;</a></span>GetNumBytes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumBytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00418">418</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_types_utils_8hpp_source.xhtml#l00137">armnn::GetDataTypeSize()</a>, and <a class="el" href="_tensor_8hpp_source.xhtml#l00192">TensorInfo::GetNumElements()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_tensor_handle_8cpp_source.xhtml#l00057">RefTensorHandle::Allocate()</a>, <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00052">SampleTensorHandle::Allocate()</a>, <a class="el" href="_tensor_handle_8cpp_source.xhtml#l00091">ScopedTensorHandle::Allocate()</a>, <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00076">ClDepthwiseConvolutionWorkload::ClDepthwiseConvolutionWorkload()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02789">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00330">ConstTensor::ConstTensor()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00682">TfLiteParserImpl::CreateNetworkFromBinary()</a>, <a class="el" href="_ref_reshape_workload_8cpp_source.xhtml#l00020">RefReshapeWorkload::ExecuteAsync()</a>, <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00091">SampleTensorHandle::Import()</a>, <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00047">SampleTensorHandle::Manage()</a>, <a class="el" href="_ref_tensor_handle_8cpp_source.xhtml#l00046">RefTensorHandle::Manage()</a>, <a class="el" href="_ref_tensor_handle_8cpp_source.xhtml#l00083">RefTensorHandle::Map()</a>, <a class="el" href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00077">NeonDepthwiseConvolutionWorkload::NeonDepthwiseConvolutionWorkload()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00484">OnnxParserImpl::OnnxParserImpl()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02084">TfLiteParserImpl::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01595">TfLiteParserImpl::OutputShapeOfSqueeze()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00014">armnn::PermuteTensor()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00063">armnn::ReorderWeightChannelsForAcl()</a>, and <a class="el" href="_tensor_handle_8cpp_source.xhtml#l00066">ScopedTensorHandle::ScopedTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;{</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">GetDataTypeSize</a>(m_DataType) * <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>();</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00192">Tensor.hpp:192</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa02b9e06fb20fa3c13da0427e6ee5ab2"><div class="ttname"><a href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">armnn::GetDataTypeSize</a></div><div class="ttdeci">constexpr unsigned int GetDataTypeSize(DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00137">TypesUtils.hpp:137</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a157e27d41e9f6b21f0d3c025fa47dc24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a157e27d41e9f6b21f0d3c025fa47dc24">&#9670;&nbsp;</a></span>GetNumDimensions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumDimensions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00191">191</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="backends_2reference_2workloads_2_arg_min_max_8cpp_source.xhtml#l00016">armnn::ArgMinMax()</a>, <a class="el" href="_parser_helper_test_8cpp_source.xhtml#l00019">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_output_shape_of_squeeze_8cpp_source.xhtml#l00025">BOOST_FIXTURE_TEST_CASE()</a>, <a class="el" href="_tensor_test_8cpp_source.xhtml#l00014">armnn::boost_test_print_type()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00052">armnnUtils::CalculateReducedOutputTensoInfo()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00103">armnnUtils::CalculateStridedSliceOutputTensorInfo()</a>, <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00230">armnn::ComputeAclAxis()</a>, <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00246">armnn::ComputePositiveAxis()</a>, <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00191">armnn::ComputeSoftmaxAclAxis()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02789">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_concatenate_8cpp_source.xhtml#l00014">armnn::Concatenate()</a>, <a class="el" href="_debug_8cpp_source.xhtml#l00018">armnn::Debug()</a>, <a class="el" href="_ref_rank_workload_8hpp_source.xhtml#l00025">RefRankWorkload::ExecuteAsync()</a>, <a class="el" href="backends_2reference_2workloads_2_gather_8cpp_source.xhtml#l00017">armnn::Gather()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00026">armnn::GetBiasDataType()</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00016">GetTensorShapeAsArray()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l00256">RefLayerSupport::IsBatchToSpaceNdSupported()</a>, <a class="el" href="_ref_layer_support_8cpp_source.xhtml#l01362">RefLayerSupport::IsMeanSupported()</a>, <a class="el" href="_log_softmax_8cpp_source.xhtml#l00029">armnn::LogSoftmax()</a>, <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00197">MakeTensor()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02084">TfLiteParserImpl::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01595">TfLiteParserImpl::OutputShapeOfSqueeze()</a>, <a class="el" href="_ref_fully_connected_workload_8cpp_source.xhtml#l00035">RefFullyConnectedWorkload::PostAllocationConfigure()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00019">armnnUtils::ProcessConcatInputTensorInfo()</a>, <a class="el" href="backends_2reference_2workloads_2_reduce_8cpp_source.xhtml#l00071">armnn::Reduce()</a>, <a class="el" href="_permute_and_batch_to_space_as_depth_to_space_8hpp_source.xhtml#l00021">PermuteAndBatchToSpaceAsDepthToSpaceImpl&lt; PermuteType &gt;::Run()</a>, <a class="el" href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00026">AddBroadcastReshapeLayerImpl::Run()</a>, <a class="el" href="_parser_flatbuffers_fixture_8hpp_source.xhtml#l00284">ParserFlatbuffersFixture::RunTest()</a>, <a class="el" href="backends_2reference_2workloads_2_softmax_8cpp_source.xhtml#l00017">armnn::Softmax()</a>, <a class="el" href="_splitter_8cpp_source.xhtml#l00021">armnn::Split()</a>, <a class="el" href="_splitter_8hpp_source.xhtml#l00017">armnn::Splitter()</a>, <a class="el" href="_stack_8cpp_source.xhtml#l00012">armnn::Stack()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00183">TensorNumDimensionsAreCorrect::TensorNumDimensionsAreCorrect()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01047">FullyConnectedQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02362">MeanQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02406">PadQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01606">InstanceNormalizationQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01635">L2NormalizationQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02481">StridedSliceQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02654">GatherQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03448">SliceQueueDescriptor::Validate()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00034">FillLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00043">ReduceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00034">GatherLayer::ValidateTensorShapesFromInputs()</a>, and <a class="el" href="_mean_layer_8cpp_source.xhtml#l00044">MeanLayer::ValidateTensorShapesFromInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{ <span class="keywordflow">return</span> m_Shape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); }</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8846406ac37fbd2204f0be16ee05d5b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8846406ac37fbd2204f0be16ee05d5b7">&#9670;&nbsp;</a></span>GetNumElements()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumElements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00192">192</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_activation_8cpp_source.xhtml#l00095">armnn::Activation()</a>, <a class="el" href="_cl_fallback_tests_8cpp_source.xhtml#l00014">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_output_shape_of_squeeze_8cpp_source.xhtml#l00025">BOOST_FIXTURE_TEST_CASE()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02789">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00460">Concat2dTestImpl()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00730">Concat3dTestImpl()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l01421">Concat4dTestImpl()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00657">armnn::ConvertBf16ToFp32Weight()</a>, <a class="el" href="_convert_fp32_network_to_bf16_8hpp_source.xhtml#l00018">armnn::optimizations::ConvertWeight()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00682">TfLiteParserImpl::CreateNetworkFromBinary()</a>, <a class="el" href="_debug_8cpp_source.xhtml#l00018">armnn::Debug()</a>, <a class="el" href="backends_2reference_2workloads_2_dequantize_8cpp_source.xhtml#l00013">armnn::Dequantize()</a>, <a class="el" href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00140">armnn::DetectionPostProcess()</a>, <a class="el" href="_sample_dynamic_addition_workload_8cpp_source.xhtml#l00039">SampleDynamicAdditionWorkload::Execute()</a>, <a class="el" href="_ref_convert_bf16_to_fp32_workload_8cpp_source.xhtml#l00021">RefConvertBf16ToFp32Workload::ExecuteAsync()</a>, <a class="el" href="_ref_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00021">RefConvertFp16ToFp32Workload::ExecuteAsync()</a>, <a class="el" href="_ref_convert_fp32_to_bf16_workload_8cpp_source.xhtml#l00021">RefConvertFp32ToBf16Workload::ExecuteAsync()</a>, <a class="el" href="_ref_fake_quantization_float32_workload_8cpp_source.xhtml#l00034">RefFakeQuantizationFloat32Workload::ExecuteAsync()</a>, <a class="el" href="_ref_floor_workload_8cpp_source.xhtml#l00021">RefFloorWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00022">RefConvertFp32ToFp16Workload::ExecuteAsync()</a>, <a class="el" href="_ref_cast_workload_8cpp_source.xhtml#l00034">RefCastWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_debug_workload_8cpp_source.xhtml#l00024">RefDebugWorkload&lt; DataType &gt;::ExecuteAsync()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00026">BFloat16ToFloat32::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00047">Float16ToFloat32::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00068">Float32ToBFloat16::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00089">Float32ToFloat16::Func()</a>, <a class="el" href="backends_2reference_2workloads_2_gather_8cpp_source.xhtml#l00017">armnn::Gather()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00026">armnn::GetBiasDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00418">TensorInfo::GetNumBytes()</a>, <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00231">MakeRandomTensor()</a>, <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00197">MakeTensor()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00484">OnnxParserImpl::OnnxParserImpl()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02121">IDeserializer::DeserializerImpl::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02084">TfLiteParserImpl::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01595">TfLiteParserImpl::OutputShapeOfSqueeze()</a>, <a class="el" href="backends_2reference_2workloads_2_pad_8cpp_source.xhtml#l00039">armnn::Pad()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00241">PermuteOutputForConcat()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00121">PermuteTensorData()</a>, <a class="el" href="_ref_workload_utils_8hpp_source.xhtml#l00114">armnn::Quantize()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00235">QuantizeData()</a>, <a class="el" href="backends_2reference_2workloads_2_reduce_8cpp_source.xhtml#l00071">armnn::Reduce()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00148">ShapesAreSameTotalSize::ShapesAreSameTotalSize()</a>, <a class="el" href="_splitter_8hpp_source.xhtml#l00017">armnn::Splitter()</a>, <a class="el" href="_stack_8cpp_source.xhtml#l00012">armnn::Stack()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00677">armnnDeserializer::ToConstTensor()</a>, and <a class="el" href="_workload_data_8cpp_source.xhtml#l01750">SpaceToBatchNdQueueDescriptor::Validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{ <span class="keywordflow">return</span> m_Shape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>(); }</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorShape::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdoc">Function that calculates the tensor elements by multiplying all dimension size which are Specified...</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00181">Tensor.cpp:181</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8b8fc85ce966c035d789cf22db5088a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b8fc85ce966c035d789cf22db5088a1">&#9670;&nbsp;</a></span>GetQuantizationDim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; unsigned int &gt; GetQuantizationDim </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00485">485</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_test_8cpp_source.xhtml#l00102">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00026">armnn::GetBiasDataType()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00086">armnnSerializer::GetFlatBufferArgMinMaxFunction()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00152">armnnUtils::GetPerAxisParams()</a>, and <a class="el" href="_permute_8cpp_source.xhtml#l00115">armnnUtils::Permuted()</a>.</p>
<div class="fragment"><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;{</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keywordflow">return</span> m_Quantization.m_QuantizationDim;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a770b51078da02f44a819e9f95d8058b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a770b51078da02f44a819e9f95d8058b5">&#9670;&nbsp;</a></span>GetQuantizationOffset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32_t GetQuantizationOffset </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00469">469</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_test_8cpp_source.xhtml#l00102">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00621">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01627">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01765">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01919">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_ref_workload_utils_8hpp_source.xhtml#l00095">armnn::Dequantize()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00026">armnn::GetBiasDataType()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00086">armnnSerializer::GetFlatBufferArgMinMaxFunction()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00026">armnn::optimizations::pad_fold::GetLowestElement()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00021">armnn::optimizations::pad_fold::GetZeroElement()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00423">TensorInfo::IsTypeSpaceMatch()</a>, <a class="el" href="_decoders_8hpp_source.xhtml#l00070">armnn::MakeDecoder()</a>, <a class="el" href="_encoders_8hpp_source.xhtml#l00021">armnn::MakeEncoder()</a>, <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00231">MakeRandomTensor()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02084">TfLiteParserImpl::OutputShapeOfReshape()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00083">QuantizationParametersAreEqual::QuantizationParametersAreEqual()</a>, <a class="el" href="_ref_workload_utils_8hpp_source.xhtml#l00114">armnn::Quantize()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00235">QuantizeData()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00200">SimpleConvolution2dTestImpl()</a>, and <a class="el" href="_serializer_test_utils_8cpp_source.xhtml#l00038">LayerVerifierBase::VerifyNameAndConnections()</a>.</p>
<div class="fragment"><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;{</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keywordflow">if</span> (!m_Quantization.m_Offset.has_value())</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    {</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="comment">// NOTE: old default for backward compatibility</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    }</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keywordflow">return</span> m_Quantization.m_Offset.value();</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a047ca888c43bd7fb5702853bf72410d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a047ca888c43bd7fb5702853bf72410d0">&#9670;&nbsp;</a></span>GetQuantizationScale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float GetQuantizationScale </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00452">452</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, and <a class="el" href="_tensor_8hpp_source.xhtml#l00197">TensorInfo::HasMultipleQuantizationScales()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_test_8cpp_source.xhtml#l00102">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00621">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01627">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01765">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01919">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_ref_workload_utils_8hpp_source.xhtml#l00095">armnn::Dequantize()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00026">armnn::GetBiasDataType()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00086">armnnSerializer::GetFlatBufferArgMinMaxFunction()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00026">armnn::optimizations::pad_fold::GetLowestElement()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00423">TensorInfo::IsTypeSpaceMatch()</a>, <a class="el" href="_decoders_8hpp_source.xhtml#l00070">armnn::MakeDecoder()</a>, <a class="el" href="_encoders_8hpp_source.xhtml#l00021">armnn::MakeEncoder()</a>, <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00231">MakeRandomTensor()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02084">TfLiteParserImpl::OutputShapeOfReshape()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00083">QuantizationParametersAreEqual::QuantizationParametersAreEqual()</a>, <a class="el" href="_ref_workload_utils_8hpp_source.xhtml#l00114">armnn::Quantize()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00235">QuantizeData()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00200">SimpleConvolution2dTestImpl()</a>, and <a class="el" href="_serializer_test_utils_8cpp_source.xhtml#l00038">LayerVerifierBase::VerifyNameAndConnections()</a>.</p>
<div class="fragment"><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;{</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keywordflow">if</span> (m_Quantization.m_Scales.empty())</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    {</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="comment">// NOTE: old default for backward compatibility</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordflow">return</span> 1.0f;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    }</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(!<a class="code" href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">HasMultipleQuantizationScales</a>());</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keywordflow">return</span> m_Quantization.m_Scales[0];</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_af672d1c9e2a120a18926cb645981fbb7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">armnn::TensorInfo::HasMultipleQuantizationScales</a></div><div class="ttdeci">bool HasMultipleQuantizationScales() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00197">Tensor.hpp:197</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8bc11f1fa23ef42532f9fdd04d355270"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8bc11f1fa23ef42532f9fdd04d355270">&#9670;&nbsp;</a></span>GetQuantizationScales()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; float &gt; GetQuantizationScales </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00442">442</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_data_8cpp_source.xhtml#l00026">armnn::GetBiasDataType()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00086">armnnSerializer::GetFlatBufferArgMinMaxFunction()</a>, and <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00152">armnnUtils::GetPerAxisParams()</a>.</p>
<div class="fragment"><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;{</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keywordflow">return</span> m_Quantization.m_Scales;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8b5d0f8a24e9d9238f412260a552acf8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b5d0f8a24e9d9238f412260a552acf8">&#9670;&nbsp;</a></span>GetShape() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; GetShape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00187">187</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="backends_2reference_2workloads_2_arg_min_max_8cpp_source.xhtml#l00016">armnn::ArgMinMax()</a>, <a class="el" href="_batch_norm_impl_8cpp_source.xhtml#l00018">armnn::BatchNormImpl()</a>, <a class="el" href="backends_2reference_2workloads_2_batch_to_space_n_d_8cpp_source.xhtml#l00035">armnn::BatchToSpaceNd()</a>, <a class="el" href="_tensor_test_8cpp_source.xhtml#l00102">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_output_shape_of_squeeze_8cpp_source.xhtml#l00025">BOOST_FIXTURE_TEST_CASE()</a>, <a class="el" href="_tensor_test_8cpp_source.xhtml#l00014">armnn::boost_test_print_type()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00052">armnnUtils::CalculateReducedOutputTensoInfo()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00103">armnnUtils::CalculateStridedSliceOutputTensorInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02789">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_concatenate_8cpp_source.xhtml#l00014">armnn::Concatenate()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00276">Concatenate()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00657">armnn::ConvertBf16ToFp32Weight()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00133">armnn::ConvertWeightTensorFromArmnnToAcl()</a>, <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00018">armnn::CreateAclNormalizationLayerInfoForL2Normalization()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00682">TfLiteParserImpl::CreateNetworkFromBinary()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00628">OnnxParserImpl::CreateNetworkFromString()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, <a class="el" href="_debug_8cpp_source.xhtml#l00018">armnn::Debug()</a>, <a class="el" href="backends_2reference_2workloads_2_depth_to_space_8cpp_source.xhtml#l00018">armnn::DepthToSpace()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01627">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01765">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01919">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00140">armnn::DetectionPostProcess()</a>, <a class="el" href="_ref_depthwise_convolution2d_workload_8cpp_source.xhtml#l00040">RefDepthwiseConvolution2dWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_lstm_workload_8cpp_source.xhtml#l00046">RefLstmWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_q_lstm_workload_8cpp_source.xhtml#l00051">RefQLstmWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_elementwise_unary_workload_8cpp_source.xhtml#l00036">RefElementwiseUnaryWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_logical_binary_workload_8cpp_source.xhtml#l00030">RefLogicalBinaryWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_logical_unary_workload_8cpp_source.xhtml#l00030">RefLogicalUnaryWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_comparison_workload_8cpp_source.xhtml#l00050">RefComparisonWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_convolution2d_workload_8cpp_source.xhtml#l00038">RefConvolution2dWorkload::ExecuteAsync()</a>, <a class="el" href="_ref_elementwise_workload_8cpp_source.xhtml#l00035">RefElementwiseWorkload&lt; Functor, ParentDescriptor, DebugString &gt;::ExecuteAsync()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00026">BFloat16ToFloat32::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00047">Float16ToFloat32::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00068">Float32ToBFloat16::Func()</a>, <a class="el" href="_convert_constants_8hpp_source.xhtml#l00089">Float32ToFloat16::Func()</a>, <a class="el" href="backends_2reference_2workloads_2_gather_8cpp_source.xhtml#l00017">armnn::Gather()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00121">GetBias()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00026">armnn::GetBiasDataType()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00086">armnnSerializer::GetFlatBufferArgMinMaxFunction()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00152">armnnUtils::GetPerAxisParams()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02836">IDeserializer::DeserializerImpl::GetQLstmDescriptor()</a>, <a class="el" href="_ref_tensor_handle_8hpp_source.xhtml#l00044">RefTensorHandle::GetShape()</a>, <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml#l00044">SampleTensorHandle::GetShape()</a>, <a class="el" href="_tensor_handle_8hpp_source.xhtml#l00053">ConstTensorHandle::GetShape()</a>, <a class="el" href="_layer_test_result_8hpp_source.xhtml#l00016">GetTensorShapeAsArray()</a>, <a class="el" href="_tensor_handle_8cpp_source.xhtml#l00015">armnn::GetUnpaddedTensorStrides()</a>, <a class="el" href="_instance_norm_8cpp_source.xhtml#l00018">armnn::InstanceNorm()</a>, <a class="el" href="_layer_support_8cpp_source.xhtml#l00282">armnn::IsFloorSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00842">ClLayerSupport::IsResizeBilinearSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00835">NeonLayerSupport::IsResizeBilinearSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00916">ClLayerSupport::IsSplitterSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00913">NeonLayerSupport::IsSplitterSupported()</a>, <a class="el" href="_log_softmax_8cpp_source.xhtml#l00029">armnn::LogSoftmax()</a>, <a class="el" href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00047">main()</a>, <a class="el" href="_tensor_helpers_8hpp_source.xhtml#l00183">MakeTensor()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02121">IDeserializer::DeserializerImpl::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02084">TfLiteParserImpl::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01595">TfLiteParserImpl::OutputShapeOfSqueeze()</a>, <a class="el" href="backends_2reference_2workloads_2_pad_8cpp_source.xhtml#l00039">armnn::Pad()</a>, <a class="el" href="_permute_8cpp_source.xhtml#l00115">armnnUtils::Permuted()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00171">PermuteInputsForConcat()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00014">armnn::PermuteTensor()</a>, <a class="el" href="_data_layout_utils_8hpp_source.xhtml#l00014">PermuteTensorNchwToNhwc()</a>, <a class="el" href="_data_layout_utils_8hpp_source.xhtml#l00026">PermuteTensorNhwcToNchw()</a>, <a class="el" href="_pooling2d_8cpp_source.xhtml#l00142">armnn::Pooling2d()</a>, <a class="el" href="_ref_fully_connected_workload_8cpp_source.xhtml#l00035">RefFullyConnectedWorkload::PostAllocationConfigure()</a>, <a class="el" href="_prelu_impl_8cpp_source.xhtml#l00013">armnn::PreluImpl()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00019">armnnUtils::ProcessConcatInputTensorInfo()</a>, <a class="el" href="backends_2reference_2workloads_2_reduce_8cpp_source.xhtml#l00071">armnn::Reduce()</a>, <a class="el" href="_ref_convolution2d_workload_8cpp_source.xhtml#l00015">RefConvolution2dWorkload::RefConvolution2dWorkload()</a>, <a class="el" href="_ref_depthwise_convolution2d_workload_8cpp_source.xhtml#l00018">RefDepthwiseConvolution2dWorkload::RefDepthwiseConvolution2dWorkload()</a>, <a class="el" href="_ref_fully_connected_workload_8cpp_source.xhtml#l00015">RefFullyConnectedWorkload::RefFullyConnectedWorkload()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00037">armnn::ReshapeWeightsForAcl()</a>, <a class="el" href="_resize_8cpp_source.xhtml#l00065">armnn::Resize()</a>, <a class="el" href="_permute_as_reshape_8hpp_source.xhtml#l00018">PermuteAsReshapeImpl::Run()</a>, <a class="el" href="_transpose_as_reshape_8hpp_source.xhtml#l00018">TransposeAsReshapeImpl::Run()</a>, <a class="el" href="_optimize_consecutive_reshapes_8hpp_source.xhtml#l00019">OptimizeConsecutiveReshapesImpl::Run()</a>, <a class="el" href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00026">AddBroadcastReshapeLayerImpl::Run()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00029">DepthwiseConvolution2dLayer::SerializeLayerParameters()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00029">Convolution2dLayer::SerializeLayerParameters()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00118">Graph::SerializeToDot()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00163">ShapesAreBroadcastCompatible::ShapesAreBroadcastCompatible()</a>, <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00140">ShapesAreSameRank::ShapesAreSameRank()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00200">SimpleConvolution2dTestImpl()</a>, <a class="el" href="backends_2reference_2workloads_2_slice_8cpp_source.xhtml#l00014">armnn::Slice()</a>, <a class="el" href="backends_2reference_2workloads_2_softmax_8cpp_source.xhtml#l00017">armnn::Softmax()</a>, <a class="el" href="backends_2reference_2workloads_2_space_to_batch_n_d_8cpp_source.xhtml#l00034">armnn::SpaceToBatchNd()</a>, <a class="el" href="_space_to_depth_8cpp_source.xhtml#l00036">armnn::SpaceToDepth()</a>, <a class="el" href="_splitter_8cpp_source.xhtml#l00021">armnn::Split()</a>, <a class="el" href="_splitter_8hpp_source.xhtml#l00017">armnn::Splitter()</a>, <a class="el" href="_stack_8cpp_source.xhtml#l00012">armnn::Stack()</a>, <a class="el" href="backends_2reference_2workloads_2_strided_slice_8cpp_source.xhtml#l00090">armnn::StridedSlice()</a>, <a class="el" href="_transpose_convolution2d_end_to_end_test_impl_8hpp_source.xhtml#l00048">TransposeConvolution2dEndToEnd()</a>, <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml#l00113">armnnUtils::TransposeTensorShape()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00642">ArgMinMaxQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01435">PermuteQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01353">DepthwiseConvolution2dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02689">DetectionPostProcessQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01491">ResizeBilinearQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01538">ResizeQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01750">SpaceToBatchNdQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01817">SpaceToDepthQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02935">TransposeQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03448">SliceQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03503">DepthToSpaceQueueDescriptor::Validate()</a>, <a class="el" href="_elementwise_base_layer_8cpp_source.xhtml#l00076">ElementwiseBaseLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rank_layer_8cpp_source.xhtml#l00034">RankLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00035">QuantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00033">ActivationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00034">ConvertFp32ToFp16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00043">ReduceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00034">FillLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00034">SoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00037">SliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertFp16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00032">SwitchLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00034">CastLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00034">InstanceNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00034">FloorLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00035">RsqrtLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_copy_layer_8cpp_source.xhtml#l00037">MemCopyLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00045">BatchToSpaceNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00035">AbsLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00034">L2NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00039">DebugLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00034">NormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00033">DequantizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00105">Pooling2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00063">StackLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00035">ConvertBf16ToFp32Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mem_import_layer_8cpp_source.xhtml#l00037">MemImportLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00034">FakeQuantizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_merge_layer_8cpp_source.xhtml#l00030">MergeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00063">ResizeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00035">ConvertFp32ToBf16Layer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00034">LogSoftmaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00044">MeanLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00045">TransposeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00034">GatherLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00059">PadLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00041">ReshapeLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00045">PermuteLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_constant_layer_8cpp_source.xhtml#l00045">ConstantLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00074">ArgMinMaxLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00049">ElementwiseUnaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00099">StridedSliceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00039">DetectionPostProcessLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00058">LogicalBinaryLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00060">ComparisonLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00062">DepthToSpaceLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00064">SpaceToDepthLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00128">DepthwiseConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00070">SpaceToBatchNdLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00100">PreluLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00070">FullyConnectedLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00090">TransposeConvolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00121">Convolution2dLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00216">SplitterLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00294">ConcatLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00052">BatchNormalizationLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00096">QuantizedLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00168">LstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00170">QLstmLayer::ValidateTensorShapesFromInputs()</a>, <a class="el" href="_serializer_test_utils_8cpp_source.xhtml#l00071">LayerVerifierBase::VerifyConstTensors()</a>, <a class="el" href="_serializer_test_utils_8cpp_source.xhtml#l00038">LayerVerifierBase::VerifyNameAndConnections()</a>, and <a class="el" href="_types_utils_8hpp_source.xhtml#l00320">armnn::VerifyTensorInfoDataType()</a>.</p>
<div class="fragment"><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{ <span class="keywordflow">return</span> m_Shape; }</div></div><!-- fragment -->
</div>
</div>
<a id="a350bcc7d86f7d9333340a0a04be078f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a350bcc7d86f7d9333340a0a04be078f6">&#9670;&nbsp;</a></span>GetShape() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; GetShape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00188">188</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{ <span class="keywordflow">return</span> m_Shape; }</div></div><!-- fragment -->
</div>
</div>
<a id="af672d1c9e2a120a18926cb645981fbb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af672d1c9e2a120a18926cb645981fbb7">&#9670;&nbsp;</a></span>HasMultipleQuantizationScales()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasMultipleQuantizationScales </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00197">197</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00124">TensorShape::operator=()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00160">TensorShape::operator==()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#aec48a5a5ab6ecf86c8db0f6d0859fe2f">SetQuantizationOffset()</a>, and <a class="el" href="_neon_end_to_end_tests_8cpp.xhtml#a522a440dc1e26bed45fd3f68be8484e9">SetQuantizationScale()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_data_8cpp_source.xhtml#l00026">armnn::GetBiasDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00452">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00437">TensorInfo::HasPerAxisQuantization()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00423">TensorInfo::IsTypeSpaceMatch()</a>.</p>
<div class="fragment"><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{ <span class="keywordflow">return</span> m_Quantization.m_Scales.size() &gt; 1; }</div></div><!-- fragment -->
</div>
</div>
<a id="ab85cd8cc10c96a7c99c14042c251fc48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab85cd8cc10c96a7c99c14042c251fc48">&#9670;&nbsp;</a></span>HasPerAxisQuantization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasPerAxisQuantization </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00437">437</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00197">TensorInfo::HasMultipleQuantizationScales()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_data_8cpp_source.xhtml#l00026">armnn::GetBiasDataType()</a>, <a class="el" href="_serializer_8cpp_source.xhtml#l00086">armnnSerializer::GetFlatBufferArgMinMaxFunction()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00152">armnnUtils::GetPerAxisParams()</a>, <a class="el" href="_decoders_8hpp_source.xhtml#l00070">armnn::MakeDecoder()</a>, <a class="el" href="_encoders_8hpp_source.xhtml#l00021">armnn::MakeEncoder()</a>, and <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00112">TypeNotPerAxisQuantized::TypeNotPerAxisQuantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;{</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">HasMultipleQuantizationScales</a>() || m_Quantization.m_QuantizationDim.has_value();</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_af672d1c9e2a120a18926cb645981fbb7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">armnn::TensorInfo::HasMultipleQuantizationScales</a></div><div class="ttdeci">bool HasMultipleQuantizationScales() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00197">Tensor.hpp:197</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7c00efeb540198b33b8558c76e5cc2dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c00efeb540198b33b8558c76e5cc2dd">&#9670;&nbsp;</a></span>IsQuantized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQuantized </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00495">495</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_types_utils_8hpp_source.xhtml#l00260">armnn::IsQuantizedType()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_cast_workload_8cpp_source.xhtml#l00034">RefCastWorkload::ExecuteAsync()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00026">armnn::GetBiasDataType()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00021">armnn::optimizations::pad_fold::GetZeroElement()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00423">TensorInfo::IsTypeSpaceMatch()</a>, and <a class="el" href="_layer_support_rules_8hpp_source.xhtml#l00112">TypeNotPerAxisQuantized::TypeNotPerAxisQuantized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;{</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#ad44c007f21af2d0375e3ef9400a1b275">IsQuantizedType</a>(m_DataType);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad44c007f21af2d0375e3ef9400a1b275"><div class="ttname"><a href="namespacearmnn.xhtml#ad44c007f21af2d0375e3ef9400a1b275">armnn::IsQuantizedType</a></div><div class="ttdeci">constexpr bool IsQuantizedType()</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00260">TypesUtils.hpp:260</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a22f377fc4e10dc1773a3f979061e85f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22f377fc4e10dc1773a3f979061e85f1">&#9670;&nbsp;</a></span>IsTypeSpaceMatch()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTypeSpaceMatch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check that the types are the same and, if quantize, that the quantization parameters are the same. </p>

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00423">423</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00469">TensorInfo::GetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00452">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00197">TensorInfo::HasMultipleQuantizationScales()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00495">TensorInfo::IsQuantized()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00026">armnn::GetBiasDataType()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00279">ClLayerSupport::IsConcatSupported()</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00249">NeonLayerSupport::IsConcatSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00916">ClLayerSupport::IsSplitterSupported()</a>, and <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00913">NeonLayerSupport::IsSplitterSupported()</a>.</p>
<div class="fragment"><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;{</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keywordtype">bool</span> match = <span class="keyword">true</span>;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    match &amp;= m_DataType == other.m_DataType;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a7c00efeb540198b33b8558c76e5cc2dd">IsQuantized</a>() &amp;&amp; !<a class="code" href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">HasMultipleQuantizationScales</a>())</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    {</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        match &amp;= <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a>() == other.GetQuantizationScale() &amp;&amp;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                 <a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>() == other.GetQuantizationOffset();</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    }</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordflow">return</span> match;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_af672d1c9e2a120a18926cb645981fbb7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#af672d1c9e2a120a18926cb645981fbb7">armnn::TensorInfo::HasMultipleQuantizationScales</a></div><div class="ttdeci">bool HasMultipleQuantizationScales() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00197">Tensor.hpp:197</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a770b51078da02f44a819e9f95d8058b5"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">armnn::TensorInfo::GetQuantizationOffset</a></div><div class="ttdeci">int32_t GetQuantizationOffset() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00469">Tensor.cpp:469</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a047ca888c43bd7fb5702853bf72410d0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">armnn::TensorInfo::GetQuantizationScale</a></div><div class="ttdeci">float GetQuantizationScale() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00452">Tensor.cpp:452</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a7c00efeb540198b33b8558c76e5cc2dd"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a7c00efeb540198b33b8558c76e5cc2dd">armnn::TensorInfo::IsQuantized</a></div><div class="ttdeci">bool IsQuantized() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00495">Tensor.cpp:495</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2a944e616dc6fdde5287b17f2265307d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a944e616dc6fdde5287b17f2265307d">&#9670;&nbsp;</a></span>operator!=()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00413">413</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;{</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac45c8c0052476cd66ef732de76dd9bc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac45c8c0052476cd66ef732de76dd9bc8">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00398">398</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;{</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    m_Shape = other.m_Shape;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    m_DataType = other.m_DataType;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    m_Quantization = other.m_Quantization;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a586e1eec08e847abfeb3de3a4038c5ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a586e1eec08e847abfeb3de3a4038c5ce">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00406">406</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;{</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keywordflow">return</span> ((m_Shape == other.m_Shape) &amp;&amp;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            (m_DataType == other.m_DataType) &amp;&amp;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            (m_Quantization == other.m_Quantization));</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a71975fcec1464d639f1a78f73164d1bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71975fcec1464d639f1a78f73164d1bd">&#9670;&nbsp;</a></span>SetDataType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetDataType </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00195">195</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_test_8cpp_source.xhtml#l00102">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_data_type_utils_8hpp_source.xhtml#l00017">ConvertToDataType()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00051">armnn::InsertConvertBf16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00129">armnn::InsertConvertFp16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00168">armnn::InsertConvertFp32ToBf16LayersAfter()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00090">armnn::InsertConvertFp32ToBf16LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00201">armnn::InsertConvertFp32ToFp16LayersAfter()</a>, and <a class="el" href="_convert_fp32_network_to_fp16_8hpp_source.xhtml#l00018">ConvertFp32NetworkToFp16Impl::Run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;{ m_DataType = type; }</div></div><!-- fragment -->
</div>
</div>
<a id="a519efe8ff6dc3aacdfe8a999415e3e4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a519efe8ff6dc3aacdfe8a999415e3e4e">&#9670;&nbsp;</a></span>SetQuantizationDim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetQuantizationDim </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>quantizationDim</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00490">490</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_test_8cpp_source.xhtml#l00102">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_permute_8cpp_source.xhtml#l00115">armnnUtils::Permuted()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00369">TensorInfo::TensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;{</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    m_Quantization.m_QuantizationDim = quantizationDim;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a63cbc581012c957f9d68d224ddc3e43c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63cbc581012c957f9d68d224ddc3e43c">&#9670;&nbsp;</a></span>SetQuantizationOffset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetQuantizationOffset </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>offset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00480">480</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00251">AdditionBroadcast1ElementTestImpl()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00167">AdditionBroadcastTestImpl()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00156">ArgMaxChannelTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00192">ArgMaxHeightTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00064">ArgMaxSimpleTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00120">ArgMinChannelTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00092">ArgMinSimpleTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00228">ArgMinWidthTest()</a>, <a class="el" href="_tensor_test_8cpp_source.xhtml#l00102">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00621">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01219">CompareActivationTestImpl()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00317">ConstantLinearActivationTestCommon()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01010">Convolution2d3x3DilationTestCommon()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l02544">DepthwiseConvolution2d3x3DilationTestCommon()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01627">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01765">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01919">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00328">DetectionPostProcessFastNmsQuantizedTest()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00264">DetectionPostProcessRegularNmsQuantizedTest()</a>, <a class="el" href="_ref_cast_workload_8cpp_source.xhtml#l00034">RefCastWorkload::ExecuteAsync()</a>, <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00229">FullyConnectedLargeTestCommon()</a>, <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00119">GetSoftmaxProfilerJson()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00109">PermuteValueSet1Test()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00160">PermuteValueSet2Test()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00211">PermuteValueSet3Test()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp_source.xhtml#l00600">QuantizeData()</a>, <a class="el" href="_reduction_test_impl_8cpp_source.xhtml#l00122">ReduceMaxNegativeAxisTest()</a>, <a class="el" href="_reduction_test_impl_8cpp_source.xhtml#l00082">ReduceMaxSimpleTest()</a>, <a class="el" href="_reduction_test_impl_8cpp_source.xhtml#l00163">ReduceMaxSimpleTest2()</a>, <a class="el" href="_reduction_test_impl_8cpp_source.xhtml#l00245">ReduceMinNegativeAxisTest()</a>, <a class="el" href="_reduction_test_impl_8cpp_source.xhtml#l00205">ReduceMinSimpleTest()</a>, <a class="el" href="_reduce_sum_test_impl_8cpp_source.xhtml#l00278">ReduceSumMultipleAxisTest()</a>, <a class="el" href="_reduce_sum_test_impl_8cpp_source.xhtml#l00080">ReduceSumSimpleTest()</a>, <a class="el" href="_reduce_sum_test_impl_8cpp_source.xhtml#l00113">ReduceSumSingleAxisTest1()</a>, <a class="el" href="_reduce_sum_test_impl_8cpp_source.xhtml#l00154">ReduceSumSingleAxisTest2()</a>, <a class="el" href="_reduce_sum_test_impl_8cpp_source.xhtml#l00213">ReduceSumSingleAxisTest3()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00200">SimpleConvolution2dTestImpl()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00059">SimplePermuteTest()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00060">SimpleTransposeTest()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00346">TensorInfo::TensorInfo()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00110">TransposeValueSet1Test()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00161">TransposeValueSet2Test()</a>, and <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00212">TransposeValueSet3Test()</a>.</p>
<div class="fragment"><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;{</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    m_Quantization.m_Offset = MakeOptional&lt;int32_t&gt;(offset);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a685739c4eb65a580e075282cfe6787d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a685739c4eb65a580e075282cfe6787d6">&#9670;&nbsp;</a></span>SetQuantizationScale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetQuantizationScale </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00464">464</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00251">AdditionBroadcast1ElementTestImpl()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00167">AdditionBroadcastTestImpl()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00156">ArgMaxChannelTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00192">ArgMaxHeightTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00064">ArgMaxSimpleTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00120">ArgMinChannelTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00092">ArgMinSimpleTest()</a>, <a class="el" href="_arg_min_max_test_impl_8cpp_source.xhtml#l00228">ArgMinWidthTest()</a>, <a class="el" href="_tensor_test_8cpp_source.xhtml#l00102">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00025">BoundedReLuTestCommon()</a>, <a class="el" href="_cast_test_impl_8cpp_source.xhtml#l00011">CastTest()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00621">armnn::CheckScaleSetOnQuantizedType()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01219">CompareActivationTestImpl()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02707">ConcatUint16Test()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02569">ConcatUint8Test()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00317">ConstantLinearActivationTestCommon()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00462">Convolution1dTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01010">Convolution2d3x3DilationTestCommon()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l02544">DepthwiseConvolution2d3x3DilationTestCommon()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01627">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01765">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01919">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00328">DetectionPostProcessFastNmsQuantizedTest()</a>, <a class="el" href="_detection_post_process_test_impl_8hpp_source.xhtml#l00264">DetectionPostProcessRegularNmsQuantizedTest()</a>, <a class="el" href="_elementwise_test_impl_8hpp_source.xhtml#l00041">ElementwiseTestHelper()</a>, <a class="el" href="_elementwise_unary_test_impl_8hpp_source.xhtml#l00035">ElementwiseUnaryTestHelper()</a>, <a class="el" href="_ref_cast_workload_8cpp_source.xhtml#l00034">RefCastWorkload::ExecuteAsync()</a>, <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00229">FullyConnectedLargeTestCommon()</a>, <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00128">FullyConnectedTest()</a>, <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00119">GetSoftmaxProfilerJson()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00109">PermuteValueSet1Test()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00160">PermuteValueSet2Test()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00211">PermuteValueSet3Test()</a>, <a class="el" href="_prelu_test_impl_8hpp_source.xhtml#l00024">PreluTest()</a>, <a class="el" href="_neon_end_to_end_tests_8cpp_source.xhtml#l00600">QuantizeData()</a>, <a class="el" href="_reduction_test_impl_8cpp_source.xhtml#l00122">ReduceMaxNegativeAxisTest()</a>, <a class="el" href="_reduction_test_impl_8cpp_source.xhtml#l00082">ReduceMaxSimpleTest()</a>, <a class="el" href="_reduction_test_impl_8cpp_source.xhtml#l00163">ReduceMaxSimpleTest2()</a>, <a class="el" href="_reduction_test_impl_8cpp_source.xhtml#l00245">ReduceMinNegativeAxisTest()</a>, <a class="el" href="_reduction_test_impl_8cpp_source.xhtml#l00205">ReduceMinSimpleTest()</a>, <a class="el" href="_reduce_sum_test_impl_8cpp_source.xhtml#l00278">ReduceSumMultipleAxisTest()</a>, <a class="el" href="_reduce_sum_test_impl_8cpp_source.xhtml#l00080">ReduceSumSimpleTest()</a>, <a class="el" href="_reduce_sum_test_impl_8cpp_source.xhtml#l00113">ReduceSumSingleAxisTest1()</a>, <a class="el" href="_reduce_sum_test_impl_8cpp_source.xhtml#l00154">ReduceSumSingleAxisTest2()</a>, <a class="el" href="_reduce_sum_test_impl_8cpp_source.xhtml#l00213">ReduceSumSingleAxisTest3()</a>, <a class="el" href="_reshape_test_impl_8cpp_source.xhtml#l00111">Reshape5dTest()</a>, <a class="el" href="_reshape_test_impl_8cpp_source.xhtml#l00173">ReshapeBooleanTest()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00407">SimpleActivationTest()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00200">SimpleConvolution2dTestImpl()</a>, <a class="el" href="_floor_test_impl_8cpp_source.xhtml#l00015">SimpleFloorTest()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00059">SimplePermuteTest()</a>, <a class="el" href="_reshape_test_impl_8cpp_source.xhtml#l00058">SimpleReshapeTest()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00060">SimpleTransposeTest()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00346">TensorInfo::TensorInfo()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00110">TransposeValueSet1Test()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00161">TransposeValueSet2Test()</a>, and <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00212">TransposeValueSet3Test()</a>.</p>
<div class="fragment"><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;{</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    m_Quantization.m_Scales = { scale };</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1a8675f9d64c3fb59e6af15362bb6332"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a8675f9d64c3fb59e6af15362bb6332">&#9670;&nbsp;</a></span>SetQuantizationScales()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetQuantizationScales </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>scales</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8cpp_source.xhtml#l00447">447</a> of file <a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_test_8cpp_source.xhtml#l00215">BOOST_AUTO_TEST_CASE()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00369">TensorInfo::TensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;{</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    m_Quantization.m_Scales = scales;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abe8889e8150beef5fd204b2d87b49298"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe8889e8150beef5fd204b2d87b49298">&#9670;&nbsp;</a></span>SetShape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>newShape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_8hpp_source.xhtml#l00189">189</a> of file <a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_test_8cpp_source.xhtml#l00102">BOOST_AUTO_TEST_CASE()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00682">TfLiteParserImpl::CreateNetworkFromBinary()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00628">OnnxParserImpl::CreateNetworkFromString()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l02121">IDeserializer::DeserializerImpl::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02084">TfLiteParserImpl::OutputShapeOfReshape()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01595">TfLiteParserImpl::OutputShapeOfSqueeze()</a>, <a class="el" href="_permute_8cpp_source.xhtml#l00115">armnnUtils::Permuted()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00171">PermuteInputsForConcat()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00037">armnn::ReshapeWeightsForAcl()</a>, <a class="el" href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00026">AddBroadcastReshapeLayerImpl::Run()</a>, and <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml#l00113">armnnUtils::TransposeTensorShape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;{ m_Shape = newShape; }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>include/armnn/<a class="el" href="_tensor_8hpp_source.xhtml">Tensor.hpp</a></li>
<li>src/armnn/<a class="el" href="_tensor_8cpp_source.xhtml">Tensor.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a></li>
    <li class="footer">Generated on Mon May 10 2021 16:39:57 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
