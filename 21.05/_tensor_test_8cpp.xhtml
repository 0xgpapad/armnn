<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/test/TensorTest.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_tensor_test_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">TensorTest.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;boost/test/unit_test.hpp&gt;</code><br />
<code>#include &lt;<a class="el" href="_tensor_8hpp_source.xhtml">armnn/Tensor.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_ignore_unused_8hpp_source.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</code><br />
</div>
<p><a href="_tensor_test_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearmnn"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn.xhtml">armnn</a></td></tr>
<tr class="memdesc:namespacearmnn"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copyright (c) 2021 ARM Limited and Contributors. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:abe311824d11bad4e6f93c8f94a721052"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn.xhtml#abe311824d11bad4e6f93c8f94a721052">boost_test_print_type</a> (std::ostream &amp;ostr, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;right)</td></tr>
<tr class="separator:abe311824d11bad4e6f93c8f94a721052"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af676ec7e9534bd6e6ac3072a2c0403f4"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn.xhtml#af676ec7e9534bd6e6ac3072a2c0403f4">boost_test_print_type</a> (std::ostream &amp;ostr, const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)</td></tr>
<tr class="separator:af676ec7e9534bd6e6ac3072a2c0403f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7e46ed88187c63506b21f45abbabb13"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#ab7e46ed88187c63506b21f45abbabb13">BOOST_FIXTURE_TEST_CASE</a> (ConstructShapeUsingListInitialization, TensorInfoFixture)</td></tr>
<tr class="separator:ab7e46ed88187c63506b21f45abbabb13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37f7ffb280c544fe70e212e24fc5c2a7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#a37f7ffb280c544fe70e212e24fc5c2a7">BOOST_FIXTURE_TEST_CASE</a> (ConstructTensorInfo, TensorInfoFixture)</td></tr>
<tr class="separator:a37f7ffb280c544fe70e212e24fc5c2a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3370241e4a543440e79a3d1842fe6f9f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#a3370241e4a543440e79a3d1842fe6f9f">BOOST_FIXTURE_TEST_CASE</a> (CopyConstructTensorInfo, TensorInfoFixture)</td></tr>
<tr class="separator:a3370241e4a543440e79a3d1842fe6f9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ff9749fd66d314c3c2bbef1eca00f09"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#a8ff9749fd66d314c3c2bbef1eca00f09">BOOST_FIXTURE_TEST_CASE</a> (TensorInfoEquality, TensorInfoFixture)</td></tr>
<tr class="separator:a8ff9749fd66d314c3c2bbef1eca00f09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2d0d8c3d827fec2b96ff3ae2389550e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#aa2d0d8c3d827fec2b96ff3ae2389550e">BOOST_FIXTURE_TEST_CASE</a> (TensorInfoInequality, TensorInfoFixture)</td></tr>
<tr class="separator:aa2d0d8c3d827fec2b96ff3ae2389550e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c4119e76379387b984dbbbf998f2925"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#a0c4119e76379387b984dbbbf998f2925">BOOST_FIXTURE_TEST_CASE</a> (TensorInfoAssignmentOperator, TensorInfoFixture)</td></tr>
<tr class="separator:a0c4119e76379387b984dbbbf998f2925"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5af4372af8c798c442f8f5567ed782b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#aa5af4372af8c798c442f8f5567ed782b">BOOST_AUTO_TEST_CASE</a> (CopyNoQuantizationTensorInfo)</td></tr>
<tr class="separator:aa5af4372af8c798c442f8f5567ed782b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeabdb03c1ec8401f55985e8075df506c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#aeabdb03c1ec8401f55985e8075df506c">BOOST_AUTO_TEST_CASE</a> (CopyDifferentQuantizationTensorInfo)</td></tr>
<tr class="separator:aeabdb03c1ec8401f55985e8075df506c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad80e179ec400af9d2547f172f3ca05f3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#ad80e179ec400af9d2547f172f3ca05f3">CheckTensor</a> (const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;t)</td></tr>
<tr class="separator:ad80e179ec400af9d2547f172f3ca05f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa08fb9adf6eaf05fd4a3698880c1c292"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#aa08fb9adf6eaf05fd4a3698880c1c292">BOOST_AUTO_TEST_CASE</a> (TensorVsConstTensor)</td></tr>
<tr class="separator:aa08fb9adf6eaf05fd4a3698880c1c292"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67f451b173e1cea17e907085cb967184"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#a67f451b173e1cea17e907085cb967184">BOOST_AUTO_TEST_CASE</a> (ModifyTensorInfo)</td></tr>
<tr class="separator:a67f451b173e1cea17e907085cb967184"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60cf24873ff60e391417efc873e9c55e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#a60cf24873ff60e391417efc873e9c55e">BOOST_AUTO_TEST_CASE</a> (TensorShapeOperatorBrackets)</td></tr>
<tr class="separator:a60cf24873ff60e391417efc873e9c55e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad842127d839c39ea39e3c0f3ac219728"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#ad842127d839c39ea39e3c0f3ac219728">BOOST_AUTO_TEST_CASE</a> (TensorInfoPerAxisQuantization)</td></tr>
<tr class="separator:ad842127d839c39ea39e3c0f3ac219728"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10b8d1e008aac7e5c7149d176588a7ef"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#a10b8d1e008aac7e5c7149d176588a7ef">BOOST_AUTO_TEST_CASE</a> (TensorShape_scalar)</td></tr>
<tr class="separator:a10b8d1e008aac7e5c7149d176588a7ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadc6aa359687bce9a29d89ae3f9a4f6e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#aadc6aa359687bce9a29d89ae3f9a4f6e">BOOST_AUTO_TEST_CASE</a> (TensorShape_DynamicTensorType1_unknownNumberDimensions)</td></tr>
<tr class="separator:aadc6aa359687bce9a29d89ae3f9a4f6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade6b73848d2fda6968b35f0664b853fa"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#ade6b73848d2fda6968b35f0664b853fa">BOOST_AUTO_TEST_CASE</a> (TensorShape_DynamicTensorType1_unknownAllDimensionsSizes)</td></tr>
<tr class="separator:ade6b73848d2fda6968b35f0664b853fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabd918ac2f9b9bbe213b96a090f64fd8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#aabd918ac2f9b9bbe213b96a090f64fd8">BOOST_AUTO_TEST_CASE</a> (TensorShape_DynamicTensorType1_unknownSomeDimensionsSizes)</td></tr>
<tr class="separator:aabd918ac2f9b9bbe213b96a090f64fd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab28cb670e30f05b46d9e45c9a450db52"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#ab28cb670e30f05b46d9e45c9a450db52">BOOST_AUTO_TEST_CASE</a> (TensorShape_DynamicTensorType1_transitionFromUnknownToKnownDimensionsSizes)</td></tr>
<tr class="separator:ab28cb670e30f05b46d9e45c9a450db52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cc2ab0c007d7845ad8d3ecb468e7685"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tensor_test_8cpp.xhtml#a3cc2ab0c007d7845ad8d3ecb468e7685">BOOST_AUTO_TEST_CASE</a> (Tensor_emptyConstructors)</td></tr>
<tr class="separator:a3cc2ab0c007d7845ad8d3ecb468e7685"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="aa5af4372af8c798c442f8f5567ed782b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5af4372af8c798c442f8f5567ed782b">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[1/12]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CopyNoQuantizationTensorInfo&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00102">102</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00194">TensorInfo::GetDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00485">TensorInfo::GetQuantizationDim()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00469">TensorInfo::GetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00452">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::SetDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00490">TensorInfo::SetQuantizationDim()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00480">TensorInfo::SetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00464">TensorInfo::SetQuantizationScale()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00189">TensorInfo::SetShape()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> infoA;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>({ 5, 6, 7, 8 });</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">SetDataType</a>(DataType::QAsymmU8);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> infoB;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    infoB.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>({ 5, 6, 7, 8 });</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    infoB.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">SetDataType</a>(DataType::QAsymmU8);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    infoB.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(10.0f);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    infoB.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(5);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    infoB.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">SetQuantizationDim</a>(<a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;unsigned int&gt;</a>(1));</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    BOOST_TEST((infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>() == <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({ 5, 6, 7, 8 })));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    BOOST_TEST((infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == DataType::QAsymmU8));</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    BOOST_TEST(infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a>() == 1);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    BOOST_TEST(infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>() == 0);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    BOOST_CHECK(!infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">GetQuantizationDim</a>().<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>());</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    BOOST_TEST(infoA != infoB);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    infoA = infoB;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    BOOST_TEST(infoA == infoB);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    BOOST_TEST((infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>() == <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({ 5, 6, 7, 8 })));</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    BOOST_TEST((infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == DataType::QAsymmU8));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    BOOST_TEST(infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a>() == 10.0f);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    BOOST_TEST(infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>() == 5);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    BOOST_CHECK(infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">GetQuantizationDim</a>().<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() == 1);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt; unsigned int &gt;</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b8fc85ce966c035d789cf22db5088a1"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">armnn::TensorInfo::GetQuantizationDim</a></div><div class="ttdeci">Optional&lt; unsigned int &gt; GetQuantizationDim() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00485">Tensor.cpp:485</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00189">Tensor.hpp:189</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a770b51078da02f44a819e9f95d8058b5"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">armnn::TensorInfo::GetQuantizationOffset</a></div><div class="ttdeci">int32_t GetQuantizationOffset() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00469">Tensor.cpp:469</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a047ca888c43bd7fb5702853bf72410d0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">armnn::TensorInfo::GetQuantizationScale</a></div><div class="ttdeci">float GetQuantizationScale() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00452">Tensor.cpp:452</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00194">Tensor.hpp:194</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00464">Tensor.cpp:464</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a71975fcec1464d639f1a78f73164d1bd"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">armnn::TensorInfo::SetDataType</a></div><div class="ttdeci">void SetDataType(DataType type)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a519efe8ff6dc3aacdfe8a999415e3e4e"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">armnn::TensorInfo::SetQuantizationDim</a></div><div class="ttdeci">void SetQuantizationDim(const Optional&lt; unsigned int &gt; &amp;quantizationDim)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00490">Tensor.cpp:490</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00480">Tensor.cpp:480</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aeabdb03c1ec8401f55985e8075df506c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeabdb03c1ec8401f55985e8075df506c">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[2/12]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CopyDifferentQuantizationTensorInfo&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00132">132</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00194">TensorInfo::GetDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00485">TensorInfo::GetQuantizationDim()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00469">TensorInfo::GetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00452">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::SetDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00490">TensorInfo::SetQuantizationDim()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00480">TensorInfo::SetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00464">TensorInfo::SetQuantizationScale()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00189">TensorInfo::SetShape()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> infoA;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>({ 5, 6, 7, 8 });</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">SetDataType</a>(DataType::QAsymmU8);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(10.0f);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(5);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">SetQuantizationDim</a>(<a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;unsigned int&gt;</a>(1));</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> infoB;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    infoB.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>({ 5, 6, 7, 8 });</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    infoB.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">SetDataType</a>(DataType::QAsymmU8);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    infoB.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(11.0f);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    infoB.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(6);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    infoB.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">SetQuantizationDim</a>(<a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;unsigned int&gt;</a>(2));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    BOOST_TEST((infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>() == <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({ 5, 6, 7, 8 })));</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    BOOST_TEST((infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == DataType::QAsymmU8));</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    BOOST_TEST(infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a>() == 10.0f);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    BOOST_TEST(infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>() == 5);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    BOOST_CHECK(infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">GetQuantizationDim</a>().<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() == 1);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    BOOST_TEST(infoA != infoB);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    infoA = infoB;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    BOOST_TEST(infoA == infoB);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    BOOST_TEST((infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>() == <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({ 5, 6, 7, 8 })));</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    BOOST_TEST((infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == DataType::QAsymmU8));</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    BOOST_TEST(infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a>() == 11.0f);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    BOOST_TEST(infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>() == 6);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    BOOST_CHECK(infoA.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">GetQuantizationDim</a>().<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() == 2);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt; unsigned int &gt;</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b8fc85ce966c035d789cf22db5088a1"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">armnn::TensorInfo::GetQuantizationDim</a></div><div class="ttdeci">Optional&lt; unsigned int &gt; GetQuantizationDim() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00485">Tensor.cpp:485</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00189">Tensor.hpp:189</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a770b51078da02f44a819e9f95d8058b5"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">armnn::TensorInfo::GetQuantizationOffset</a></div><div class="ttdeci">int32_t GetQuantizationOffset() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00469">Tensor.cpp:469</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a047ca888c43bd7fb5702853bf72410d0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">armnn::TensorInfo::GetQuantizationScale</a></div><div class="ttdeci">float GetQuantizationScale() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00452">Tensor.cpp:452</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00194">Tensor.hpp:194</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00464">Tensor.cpp:464</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a71975fcec1464d639f1a78f73164d1bd"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">armnn::TensorInfo::SetDataType</a></div><div class="ttdeci">void SetDataType(DataType type)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a519efe8ff6dc3aacdfe8a999415e3e4e"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a519efe8ff6dc3aacdfe8a999415e3e4e">armnn::TensorInfo::SetQuantizationDim</a></div><div class="ttdeci">void SetQuantizationDim(const Optional&lt; unsigned int &gt; &amp;quantizationDim)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00490">Tensor.cpp:490</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00480">Tensor.cpp:480</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa08fb9adf6eaf05fd4a3698880c1c292"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa08fb9adf6eaf05fd4a3698880c1c292">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[3/12]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TensorVsConstTensor&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00170">170</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_test_8cpp_source.xhtml#l00165">CheckTensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordtype">int</span> mutableDatum = 2;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> immutableDatum = 3;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a> uninitializedTensor;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> uninitializedTensor2;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    uninitializedTensor2 = uninitializedTensor;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a> t(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(), &amp;mutableDatum);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> ct(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(), &amp;immutableDatum);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="comment">// Checks that both Tensor and ConstTensor can be passed as a ConstTensor.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="_tensor_test_8cpp.xhtml#ad80e179ec400af9d2547f172f3ca05f3">CheckTensor</a>(t);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="_tensor_test_8cpp.xhtml#ad80e179ec400af9d2547f172f3ca05f3">CheckTensor</a>(ct);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00306">Tensor.hpp:306</a></div></div>
<div class="ttc" id="_tensor_test_8cpp_xhtml_ad80e179ec400af9d2547f172f3ca05f3"><div class="ttname"><a href="_tensor_test_8cpp.xhtml#ad80e179ec400af9d2547f172f3ca05f3">CheckTensor</a></div><div class="ttdeci">void CheckTensor(const ConstTensor &amp;t)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_test_8cpp_source.xhtml#l00165">TensorTest.cpp:165</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00314">Tensor.hpp:314</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a67f451b173e1cea17e907085cb967184"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67f451b173e1cea17e907085cb967184">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[4/12]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">ModifyTensorInfo&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00188">188</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00194">TensorInfo::GetDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00469">TensorInfo::GetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00452">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::SetDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00480">TensorInfo::SetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00464">TensorInfo::SetQuantizationScale()</a>, and <a class="el" href="_tensor_8hpp_source.xhtml#l00189">TensorInfo::SetShape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;{</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>({ 5, 6, 7, 8 });</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    BOOST_TEST((info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>() == <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({ 5, 6, 7, 8 })));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">SetDataType</a>(DataType::QAsymmU8);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    BOOST_TEST((info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == DataType::QAsymmU8));</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(10.0f);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    BOOST_TEST(info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a>() == 10.0f);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(5);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    BOOST_TEST(info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>() == 5);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00189">Tensor.hpp:189</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a770b51078da02f44a819e9f95d8058b5"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">armnn::TensorInfo::GetQuantizationOffset</a></div><div class="ttdeci">int32_t GetQuantizationOffset() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00469">Tensor.cpp:469</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a047ca888c43bd7fb5702853bf72410d0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">armnn::TensorInfo::GetQuantizationScale</a></div><div class="ttdeci">float GetQuantizationScale() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00452">Tensor.cpp:452</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00194">Tensor.hpp:194</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00464">Tensor.cpp:464</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a71975fcec1464d639f1a78f73164d1bd"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">armnn::TensorInfo::SetDataType</a></div><div class="ttdeci">void SetDataType(DataType type)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00480">Tensor.cpp:480</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a60cf24873ff60e391417efc873e9c55e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60cf24873ff60e391417efc873e9c55e">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[5/12]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TensorShapeOperatorBrackets&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00201">201</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> constShape({0,1,2,3});</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> shape({0,1,2,3});</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="comment">// Checks version of operator[] which returns an unsigned int.</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    BOOST_TEST(shape[2] == 2);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    shape[2] = 20;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    BOOST_TEST(shape[2] == 20);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">// Checks the version of operator[] which returns a reference.</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    BOOST_TEST(constShape[2] == 2);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad842127d839c39ea39e3c0f3ac219728"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad842127d839c39ea39e3c0f3ac219728">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[6/12]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TensorInfoPerAxisQuantization&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00215">215</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00447">TensorInfo::SetQuantizationScales()</a>.</p>
<div class="fragment"><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;{</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="comment">// Old constructor</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tensorInfo0({ 1, 1 }, DataType::Float32, 2.0f, 1);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    BOOST_CHECK(!tensorInfo0.HasMultipleQuantizationScales());</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    BOOST_CHECK(tensorInfo0.GetQuantizationScale() == 2.0f);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    BOOST_CHECK(tensorInfo0.GetQuantizationOffset() == 1);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    BOOST_CHECK(tensorInfo0.GetQuantizationScales()[0] == 2.0f);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    BOOST_CHECK(!tensorInfo0.GetQuantizationDim().has_value());</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">// Set per-axis quantization scales</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    std::vector&lt;float&gt; perAxisScales{ 3.0f, 4.0f };</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    tensorInfo0.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">SetQuantizationScales</a>(perAxisScales);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    BOOST_CHECK(tensorInfo0.HasMultipleQuantizationScales());</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    BOOST_CHECK(tensorInfo0.GetQuantizationScales() == perAxisScales);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// Set per-tensor quantization scale</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    tensorInfo0.SetQuantizationScale(5.0f);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    BOOST_CHECK(!tensorInfo0.HasMultipleQuantizationScales());</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    BOOST_CHECK(tensorInfo0.GetQuantizationScales()[0] == 5.0f);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="comment">// Set quantization offset</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    tensorInfo0.SetQuantizationDim(<a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;unsigned int&gt;</a>(1));</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    BOOST_CHECK(tensorInfo0.GetQuantizationDim().value() == 1);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// New constructor</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    perAxisScales = { 6.0f, 7.0f };</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tensorInfo1({ 1, 1 }, DataType::Float32, perAxisScales, 1);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    BOOST_CHECK(tensorInfo1.HasMultipleQuantizationScales());</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    BOOST_CHECK(tensorInfo1.GetQuantizationOffset() == 0);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    BOOST_CHECK(tensorInfo1.GetQuantizationScales() == perAxisScales);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    BOOST_CHECK(tensorInfo1.GetQuantizationDim().value() == 1);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt; unsigned int &gt;</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a1a8675f9d64c3fb59e6af15362bb6332"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a1a8675f9d64c3fb59e6af15362bb6332">armnn::TensorInfo::SetQuantizationScales</a></div><div class="ttdeci">void SetQuantizationScales(const std::vector&lt; float &gt; &amp;scales)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00447">Tensor.cpp:447</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a10b8d1e008aac7e5c7149d176588a7ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10b8d1e008aac7e5c7149d176588a7ef">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[7/12]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TensorShape_scalar&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00249">249</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00241">TensorShape::AreAllDimensionsSpecified()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00092">TensorShape::GetDimensionality()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00211">TensorShape::GetDimensionSpecificity()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00282">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00292">BaseTensor&lt; MemoryType &gt;::GetMemoryArea()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00181">TensorShape::GetNumElements()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00284">BaseTensor&lt; MemoryType &gt;::GetShape()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00257">TensorShape::IsAtLeastOneDimensionSpecified()</a>, and <a class="el" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681af60357a8d17e45793298323f1b372a74">armnn::Scalar</a>.</p>
<div class="fragment"><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;{</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordtype">float</span> mutableDatum = 3.1416f;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape  (<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681af60357a8d17e45793298323f1b372a74">armnn::Dimensionality::Scalar</a> );</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>        <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>   ( shape, DataType::Float32 );</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>      tensor ( info, &amp;mutableDatum );</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    BOOST_CHECK(<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681af60357a8d17e45793298323f1b372a74">armnn::Dimensionality::Scalar</a> == shape.GetDimensionality());</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordtype">float</span> scalarValue = *<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span>*<span class="keyword">&gt;</span>(tensor.GetMemoryArea());</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    BOOST_CHECK_MESSAGE(mutableDatum == scalarValue, <span class="stringliteral">&quot;Scalar value is &quot;</span> &lt;&lt; scalarValue);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape_equal;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape_different;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    shape_equal = shape;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    BOOST_TEST(shape_equal == shape);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    BOOST_TEST(shape_different != shape);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    BOOST_CHECK_MESSAGE(1 == shape.GetNumElements(), <span class="stringliteral">&quot;Number of elements is &quot;</span> &lt;&lt; shape.GetNumElements());</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    BOOST_CHECK_MESSAGE(1 == shape.GetNumDimensions(), <span class="stringliteral">&quot;Number of dimensions is &quot;</span> &lt;&lt; shape.GetNumDimensions());</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    BOOST_CHECK(<span class="keyword">true</span> == shape.GetDimensionSpecificity(0));</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    BOOST_CHECK(shape.AreAllDimensionsSpecified());</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    BOOST_CHECK(shape.IsAtLeastOneDimensionSpecified());</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    BOOST_TEST(1 == shape[0]);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    BOOST_TEST(1 == tensor.GetShape()[0]);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    BOOST_TEST(1 == tensor.GetInfo().GetShape()[0]);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    BOOST_CHECK_THROW( shape[1], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a> );</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordtype">float</span> newMutableDatum  = 42.f;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    std::memcpy(tensor.GetMemoryArea(), &amp;newMutableDatum, <span class="keyword">sizeof</span>(float));</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    scalarValue = *<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span>*<span class="keyword">&gt;</span>(tensor.GetMemoryArea());</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    BOOST_CHECK_MESSAGE(newMutableDatum == scalarValue, <span class="stringliteral">&quot;Scalar value is &quot;</span> &lt;&lt; scalarValue);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00306">Tensor.hpp:306</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681af60357a8d17e45793298323f1b372a74"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681af60357a8d17e45793298323f1b372a74">armnn::Dimensionality::Scalar</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aadc6aa359687bce9a29d89ae3f9a4f6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aadc6aa359687bce9a29d89ae3f9a4f6e">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[8/12]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TensorShape_DynamicTensorType1_unknownNumberDimensions&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00283">283</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00092">TensorShape::GetDimensionality()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00181">TensorShape::GetNumElements()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">armnn::NotSpecified</a>.</p>
<div class="fragment"><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;{</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordtype">float</span>       mutableDatum  = 3.1416f;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape  (<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">armnn::Dimensionality::NotSpecified</a> );</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>  <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>   ( shape, DataType::Float32 );</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>      tensor ( info, &amp;mutableDatum );</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    BOOST_CHECK(<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">armnn::Dimensionality::NotSpecified</a> == shape.GetDimensionality());</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    BOOST_CHECK_THROW( shape[0], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a> );</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    BOOST_CHECK_THROW( shape.GetNumElements(), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a> );</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    BOOST_CHECK_THROW( shape.GetNumDimensions(), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a> );</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape_equal;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape_different;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    shape_equal = shape;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    BOOST_TEST(shape_equal == shape);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    BOOST_TEST(shape_different != shape);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">armnn::Dimensionality::NotSpecified</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00306">Tensor.hpp:306</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ade6b73848d2fda6968b35f0664b853fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade6b73848d2fda6968b35f0664b853fa">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[9/12]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TensorShape_DynamicTensorType1_unknownAllDimensionsSizes&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00303">303</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00241">TensorShape::AreAllDimensionsSpecified()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00092">TensorShape::GetDimensionality()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00211">TensorShape::GetDimensionSpecificity()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00181">TensorShape::GetNumElements()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00257">TensorShape::IsAtLeastOneDimensionSpecified()</a>, and <a class="el" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Specified</a>.</p>
<div class="fragment"><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;{</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordtype">float</span>       mutableDatum  = 3.1416f;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape  ( 3, <span class="keyword">false</span> );</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>  <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>   ( shape, DataType::Float32 );</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>      tensor ( info, &amp;mutableDatum );</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    BOOST_CHECK(<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Dimensionality::Specified</a> == shape.GetDimensionality());</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    BOOST_CHECK_MESSAGE(0 == shape.GetNumElements(), <span class="stringliteral">&quot;Number of elements is &quot;</span> &lt;&lt; shape.GetNumElements());</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    BOOST_CHECK_MESSAGE(3 == shape.GetNumDimensions(), <span class="stringliteral">&quot;Number of dimensions is &quot;</span> &lt;&lt; shape.GetNumDimensions());</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    BOOST_CHECK(<span class="keyword">false</span> == shape.GetDimensionSpecificity(0));</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    BOOST_CHECK(<span class="keyword">false</span> == shape.GetDimensionSpecificity(1));</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    BOOST_CHECK(<span class="keyword">false</span> == shape.GetDimensionSpecificity(2));</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    BOOST_CHECK(!shape.AreAllDimensionsSpecified());</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    BOOST_CHECK(!shape.IsAtLeastOneDimensionSpecified());</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape_equal;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape_different;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    shape_equal = shape;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    BOOST_TEST(shape_equal == shape);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    BOOST_TEST(shape_different != shape);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Dimensionality::Specified</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00306">Tensor.hpp:306</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aabd918ac2f9b9bbe213b96a090f64fd8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabd918ac2f9b9bbe213b96a090f64fd8">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[10/12]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TensorShape_DynamicTensorType1_unknownSomeDimensionsSizes&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00327">327</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00282">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00284">BaseTensor&lt; MemoryType &gt;::GetShape()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, and <a class="el" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Specified</a>.</p>
<div class="fragment"><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;{</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    std::vector&lt;float&gt; mutableDatum  { 42.f, 42.f, 42.f,</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                                       0.0f, 0.1f, 0.2f };</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape         ( {2, 0, 3}, {<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">true</span>} );</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>  <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>          ( shape, DataType::Float32 );</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>      tensor        ( info, &amp;mutableDatum );</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    BOOST_CHECK(<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Dimensionality::Specified</a> == shape.GetDimensionality());</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    BOOST_CHECK_MESSAGE(6 == shape.GetNumElements(), <span class="stringliteral">&quot;Number of elements is &quot;</span> &lt;&lt; shape.GetNumElements());</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    BOOST_CHECK_MESSAGE(3 == shape.GetNumDimensions(), <span class="stringliteral">&quot;Number of dimensions is &quot;</span> &lt;&lt; shape.GetNumDimensions());</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    BOOST_CHECK(<span class="keyword">true</span>  == shape.GetDimensionSpecificity(0));</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    BOOST_CHECK(<span class="keyword">false</span> == shape.GetDimensionSpecificity(1));</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    BOOST_CHECK(<span class="keyword">true</span>  == shape.GetDimensionSpecificity(2));</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    BOOST_CHECK(!shape.AreAllDimensionsSpecified());</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    BOOST_CHECK(shape.IsAtLeastOneDimensionSpecified());</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    BOOST_CHECK_THROW(shape[1], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    BOOST_CHECK_THROW(tensor.GetShape()[1], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    BOOST_CHECK_THROW(tensor.GetInfo().GetShape()[1], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    BOOST_TEST(2 == shape[0]);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    BOOST_TEST(2 == tensor.GetShape()[0]);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    BOOST_TEST(2 == tensor.GetInfo().GetShape()[0]);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    BOOST_CHECK_THROW( shape[1], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a> );</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    BOOST_TEST(3 == shape[2]);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    BOOST_TEST(3 == tensor.GetShape()[2]);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    BOOST_TEST(3 == tensor.GetInfo().GetShape()[2]);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape_equal;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape_different;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    shape_equal = shape;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    BOOST_TEST(shape_equal == shape);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    BOOST_TEST(shape_different != shape);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Dimensionality::Specified</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00306">Tensor.hpp:306</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab28cb670e30f05b46d9e45c9a450db52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab28cb670e30f05b46d9e45c9a450db52">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[11/12]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TensorShape_DynamicTensorType1_transitionFromUnknownToKnownDimensionsSizes&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00365">365</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00241">TensorShape::AreAllDimensionsSpecified()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00092">TensorShape::GetDimensionality()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00211">TensorShape::GetDimensionSpecificity()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00282">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00181">TensorShape::GetNumElements()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00187">TensorInfo::GetShape()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00284">BaseTensor&lt; MemoryType &gt;::GetShape()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00257">TensorShape::IsAtLeastOneDimensionSpecified()</a>, <a class="el" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">armnn::NotSpecified</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00232">TensorShape::SetDimensionSize()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00219">TensorShape::SetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00189">TensorInfo::SetShape()</a>, and <a class="el" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Specified</a>.</p>
<div class="fragment"><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;{</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    std::vector&lt;float&gt; mutableDatum  { 42.f, 42.f, 42.f,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                       0.0f, 0.1f, 0.2f };</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape         (<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">armnn::Dimensionality::NotSpecified</a> );</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>  <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>          ( shape, DataType::Float32 );</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>      tensor        ( info, &amp;mutableDatum );</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="comment">// Specify the number of dimensions</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    shape.SetNumDimensions(3);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    BOOST_CHECK(<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Dimensionality::Specified</a> == shape.GetDimensionality());</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    BOOST_CHECK_MESSAGE(3 == shape.GetNumDimensions(), <span class="stringliteral">&quot;Number of dimensions is &quot;</span> &lt;&lt; shape.GetNumDimensions());</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    BOOST_CHECK(<span class="keyword">false</span> == shape.GetDimensionSpecificity(0));</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    BOOST_CHECK(<span class="keyword">false</span> == shape.GetDimensionSpecificity(1));</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    BOOST_CHECK(<span class="keyword">false</span> == shape.GetDimensionSpecificity(2));</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    BOOST_CHECK(!shape.AreAllDimensionsSpecified());</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    BOOST_CHECK(!shape.IsAtLeastOneDimensionSpecified());</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="comment">// Specify dimension 0 and 2.</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    shape.SetDimensionSize(0, 2);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    shape.SetDimensionSize(2, 3);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    BOOST_CHECK_MESSAGE(3 == shape.GetNumDimensions(), <span class="stringliteral">&quot;Number of dimensions is &quot;</span> &lt;&lt; shape.GetNumDimensions());</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    BOOST_CHECK_MESSAGE(6 == shape.GetNumElements(), <span class="stringliteral">&quot;Number of elements is &quot;</span> &lt;&lt; shape.GetNumElements());</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    BOOST_CHECK(<span class="keyword">true</span>  == shape.GetDimensionSpecificity(0));</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    BOOST_CHECK(<span class="keyword">false</span> == shape.GetDimensionSpecificity(1));</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    BOOST_CHECK(<span class="keyword">true</span>  == shape.GetDimensionSpecificity(2));</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    BOOST_CHECK(!shape.AreAllDimensionsSpecified());</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    BOOST_CHECK(shape.IsAtLeastOneDimensionSpecified());</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.SetShape(shape);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a> tensor2( info, &amp;mutableDatum );</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    BOOST_TEST(2 == shape[0]);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    BOOST_TEST(2 == tensor2.GetShape()[0]);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    BOOST_TEST(2 == tensor2.GetInfo().GetShape()[0]);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    BOOST_CHECK_THROW(shape[1], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    BOOST_CHECK_THROW(tensor.GetShape()[1], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    BOOST_CHECK_THROW(tensor.GetInfo().GetShape()[1], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    BOOST_TEST(3 == shape[2]);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    BOOST_TEST(3 == tensor2.GetShape()[2]);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    BOOST_TEST(3 == tensor2.GetInfo().GetShape()[2]);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape_equal;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> shape_different;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    shape_equal = shape;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    BOOST_TEST(shape_equal == shape);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    BOOST_TEST(shape_different != shape);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="comment">// Specify dimension 1.</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    shape.SetDimensionSize(1, 5);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    BOOST_CHECK_MESSAGE(3 == shape.GetNumDimensions(), <span class="stringliteral">&quot;Number of dimensions is &quot;</span> &lt;&lt; shape.GetNumDimensions());</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    BOOST_CHECK_MESSAGE(30 == shape.GetNumElements(), <span class="stringliteral">&quot;Number of elements is &quot;</span> &lt;&lt; shape.GetNumElements());</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    BOOST_CHECK(<span class="keyword">true</span>  == shape.GetDimensionSpecificity(0));</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    BOOST_CHECK(<span class="keyword">true</span>  == shape.GetDimensionSpecificity(1));</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    BOOST_CHECK(<span class="keyword">true</span>  == shape.GetDimensionSpecificity(2));</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    BOOST_CHECK(shape.AreAllDimensionsSpecified());</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    BOOST_CHECK(shape.IsAtLeastOneDimensionSpecified());</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">armnn::Dimensionality::NotSpecified</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Dimensionality::Specified</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00306">Tensor.hpp:306</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3cc2ab0c007d7845ad8d3ecb468e7685"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3cc2ab0c007d7845ad8d3ecb468e7685">&#9670;&nbsp;</a></span>BOOST_AUTO_TEST_CASE() <span class="overload">[12/12]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_AUTO_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">Tensor_emptyConstructors&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00426">426</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiler_tests_8cpp.xhtml#af7f71af5c6c124222dd1c42c5df892f4">BOOST_AUTO_TEST_SUITE_END()</a>, and <a class="el" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Specified</a>.</p>
<div class="fragment"><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;{</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keyword">auto</span> shape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>();</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    BOOST_CHECK_MESSAGE( 0 == shape.GetNumDimensions(), <span class="stringliteral">&quot;Number of dimensions is &quot;</span> &lt;&lt; shape.GetNumDimensions());</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    BOOST_CHECK_MESSAGE( 0 == shape.GetNumElements(), <span class="stringliteral">&quot;Number of elements is &quot;</span> &lt;&lt; shape.GetNumElements());</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    BOOST_CHECK( <a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Dimensionality::Specified</a> == shape.GetDimensionality());</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    BOOST_CHECK( shape.AreAllDimensionsSpecified());</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    BOOST_CHECK_THROW( shape[0], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a> );</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keyword">auto</span> tensor = <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>();</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    BOOST_CHECK_MESSAGE( 0 == tensor.GetNumDimensions(), <span class="stringliteral">&quot;Number of dimensions is &quot;</span> &lt;&lt; tensor.GetNumDimensions());</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    BOOST_CHECK_MESSAGE( 0 == tensor.GetNumElements(), <span class="stringliteral">&quot;Number of elements is &quot;</span> &lt;&lt; tensor.GetNumElements());</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    BOOST_CHECK_MESSAGE( 0 == tensor.GetShape().GetNumDimensions(), <span class="stringliteral">&quot;Number of dimensions is &quot;</span> &lt;&lt;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                        tensor.GetShape().GetNumDimensions());</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    BOOST_CHECK_MESSAGE( 0 == tensor.GetShape().GetNumElements(), <span class="stringliteral">&quot;Number of dimensions is &quot;</span> &lt;&lt;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                        tensor.GetShape().GetNumElements());</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    BOOST_CHECK( <a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Dimensionality::Specified</a> == tensor.GetShape().GetDimensionality());</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    BOOST_CHECK( tensor.GetShape().AreAllDimensionsSpecified());</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    BOOST_CHECK_THROW( tensor.GetShape()[0], <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a> );</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681ab4b379bf7ded74c07595ccb85bc6fdc3">armnn::Dimensionality::Specified</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00306">Tensor.hpp:306</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab7e46ed88187c63506b21f45abbabb13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7e46ed88187c63506b21f45abbabb13">&#9670;&nbsp;</a></span>BOOST_FIXTURE_TEST_CASE() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_FIXTURE_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">ConstructShapeUsingListInitialization&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TensorInfoFixture&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00055">55</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> listInitializedShape{ 6, 7, 8, 9 };</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    BOOST_TEST(listInitializedShape == m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>());</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a37f7ffb280c544fe70e212e24fc5c2a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37f7ffb280c544fe70e212e24fc5c2a7">&#9670;&nbsp;</a></span>BOOST_FIXTURE_TEST_CASE() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_FIXTURE_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">ConstructTensorInfo&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TensorInfoFixture&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00061">61</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    BOOST_TEST(m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() == 4);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    BOOST_TEST(m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[0] == 6); <span class="comment">// &lt;= Outer most</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    BOOST_TEST(m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[1] == 7);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    BOOST_TEST(m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[2] == 8);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    BOOST_TEST(m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[3] == 9);     <span class="comment">// &lt;= Inner most</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00187">Tensor.hpp:187</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3370241e4a543440e79a3d1842fe6f9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3370241e4a543440e79a3d1842fe6f9f">&#9670;&nbsp;</a></span>BOOST_FIXTURE_TEST_CASE() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_FIXTURE_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">CopyConstructTensorInfo&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TensorInfoFixture&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00070">70</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> copyConstructed(m_TensorInfo);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    BOOST_TEST(copyConstructed.GetNumDimensions() == 4);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    BOOST_TEST(copyConstructed.GetShape()[0] == 6);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    BOOST_TEST(copyConstructed.GetShape()[1] == 7);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    BOOST_TEST(copyConstructed.GetShape()[2] == 8);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    BOOST_TEST(copyConstructed.GetShape()[3] == 9);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8ff9749fd66d314c3c2bbef1eca00f09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ff9749fd66d314c3c2bbef1eca00f09">&#9670;&nbsp;</a></span>BOOST_FIXTURE_TEST_CASE() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_FIXTURE_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TensorInfoEquality&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TensorInfoFixture&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00080">80</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;{</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> copyConstructed(m_TensorInfo);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    BOOST_TEST(copyConstructed == m_TensorInfo);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa2d0d8c3d827fec2b96ff3ae2389550e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2d0d8c3d827fec2b96ff3ae2389550e">&#9670;&nbsp;</a></span>BOOST_FIXTURE_TEST_CASE() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_FIXTURE_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TensorInfoInequality&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TensorInfoFixture&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00086">86</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> other;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> sizes[] = {2,3,4,5};</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    other = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(4, sizes, DataType::Float32);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    BOOST_TEST(other != m_TensorInfo);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0c4119e76379387b984dbbbf998f2925"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c4119e76379387b984dbbbf998f2925">&#9670;&nbsp;</a></span>BOOST_FIXTURE_TEST_CASE() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">BOOST_FIXTURE_TEST_CASE </td>
          <td>(</td>
          <td class="paramtype">TensorInfoAssignmentOperator&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TensorInfoFixture&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00095">95</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> copy;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    copy = m_TensorInfo;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    BOOST_TEST(copy == m_TensorInfo);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad80e179ec400af9d2547f172f3ca05f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad80e179ec400af9d2547f172f3ca05f3">&#9670;&nbsp;</a></span>CheckTensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CheckTensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_test_8cpp_source.xhtml#l00165">165</a> of file <a class="el" href="_tensor_test_8cpp_source.xhtml">TensorTest.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00282">BaseTensor&lt; MemoryType &gt;::GetInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_test_8cpp_source.xhtml#l00170">BOOST_AUTO_TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;{</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    t.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a8aeddebdcf02e1832b22203c08a6b678"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">armnn::BaseTensor::GetInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00282">Tensor.hpp:282</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9d86fd1fbecbedf5bdb69c7e7235fe5f.xhtml">test</a></li><li class="navelem"><a class="el" href="_tensor_test_8cpp.xhtml">TensorTest.cpp</a></li>
    <li class="footer">Generated on Mon May 10 2021 16:39:50 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
