<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tflite Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacetflite.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">tflite Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a8e21a0acecdf21e909d9d7dc13acdcef"><td class="memItemLeft" align="right" valign="top">TfLiteDelegate *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetflite.xhtml#a8e21a0acecdf21e909d9d7dc13acdcef">tflite_plugin_create_delegate</a> (char **options_keys, char **options_values, size_t num_options, void(*report_error)(const char *))</td></tr>
<tr class="memdesc:a8e21a0acecdf21e909d9d7dc13acdcef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an ArmNN delegate plugin.  <a href="#a8e21a0acecdf21e909d9d7dc13acdcef">More...</a><br /></td></tr>
<tr class="separator:a8e21a0acecdf21e909d9d7dc13acdcef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2501fc8679230dab265774a84264f19"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetflite.xhtml#ae2501fc8679230dab265774a84264f19">tflite_plugin_destroy_delegate</a> (TfLiteDelegate *delegate)</td></tr>
<tr class="memdesc:ae2501fc8679230dab265774a84264f19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroy a given delegate plugin.  <a href="#ae2501fc8679230dab265774a84264f19">More...</a><br /></td></tr>
<tr class="separator:ae2501fc8679230dab265774a84264f19"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a50d961d3de1ccba630ccb3361fe3879d"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetflite.xhtml#a50d961d3de1ccba630ccb3361fe3879d">gpu_options</a></td></tr>
<tr class="memdesc:a50d961d3de1ccba630ccb3361fe3879d"><td class="mdescLeft">&#160;</td><td class="mdescRight">This file defines two symbols that need to be exported to use the TFLite external delegate provider.  <a href="#a50d961d3de1ccba630ccb3361fe3879d">More...</a><br /></td></tr>
<tr class="separator:a50d961d3de1ccba630ccb3361fe3879d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a8e21a0acecdf21e909d9d7dc13acdcef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e21a0acecdf21e909d9d7dc13acdcef">&#9670;&nbsp;</a></span>tflite_plugin_create_delegate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">TfLiteDelegate* tflite::tflite_plugin_create_delegate </td>
          <td>(</td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>options_keys</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>options_values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void(*)(const char *)&#160;</td>
          <td class="paramname"><em>report_error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create an ArmNN delegate plugin. </p>
<p>Available options:</p>
<p>Option key: "backends" <br />
 Possible values: ["EthosNPU"/"GpuAcc"/"CpuAcc"/"CpuRef"] <br />
 Descriptions: A comma separated list without whitespaces of backends which should be used for execution. Falls back to next backend in list if previous doesn't provide support for operation. e.g. "GpuAcc,CpuAcc"</p>
<p>Option key: "logging-severity" <br />
 Possible values: ["trace"/"debug"/"info"/"warning"/"error"/"fatal"] <br />
 Description: Sets the logging severity level for ArmNN. Logging is turned off if this option is not provided.</p>
<p>Option key: "gpu-tuning-level" <br />
 Possible values: ["0"/"1"/"2"/"3"] <br />
 Description: 0=UseOnly(default), 1=RapidTuning, 2=NormalTuning, 3=ExhaustiveTuning. Requires option gpu-tuning-file. 1,2 and 3 will create a tuning-file, 0 will apply the tunings from an existing file</p>
<p>Option key: "gpu-mlgo-tuning-file" <br />
 Possible values: [filenameString] <br />
 Description: File name for the MLGO tuning file</p>
<p>Option key: "gpu-tuning-file" <br />
 Possible values: [filenameString] <br />
 Description: File name for the tuning file.</p>
<p>Option key: "gpu-kernel-profiling-enabled" <br />
 Possible values: ["true"/"false"] <br />
 Description: Enables GPU kernel profiling</p>
<p>Option key: "save-cached-network" <br />
 Possible values: ["true"/"false"] <br />
 Description: Enables saving of the cached network to a file, specified with the cached-network-filepath option</p>
<p>Option key: "cached-network-filepath" <br />
 Possible values: [filenameString] <br />
 Description: If non-empty, the given file will be used to load/save the cached network. If save-cached-network is given then the cached network will be saved to the given file. To save the cached network a file must already exist. If save-cached-network is not given then the cached network will be loaded from the given file. This will remove initial compilation time of kernels and speed up the first execution.</p>
<p>Option key: "enable-fast-math" <br />
 Possible values: ["true"/"false"] <br />
 Description: Enables fast_math options in backends that support it</p>
<p>Option key: "number-of-threads" <br />
 Possible values: ["1"-"64"] <br />
 Description: Assign the number of threads used by the CpuAcc backend. Default is set to 0 (Backend will decide number of threads to use).</p>
<p>Option key: "reduce-fp32-to-fp16" <br />
 Possible values: ["true"/"false"] <br />
 Description: Reduce Fp32 data to Fp16 for faster processing</p>
<p>Option key: "reduce-fp32-to-bf16" <br />
 Possible values: ["true"/"false"] <br />
 Description: Reduce Fp32 data to Bf16 for faster processing</p>
<p>Option key: "debug-data" <br />
 Possible values: ["true"/"false"] <br />
 Description: Add debug data for easier troubleshooting</p>
<p>Option key: "memory-import" <br />
 Possible values: ["true"/"false"] <br />
 Description: Enable memory import</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">option_keys</td><td>Delegate option names </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">options_values</td><td>Delegate option values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_options</td><td>Number of delegate options </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">report_error</td><td>Error callback function</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An ArmNN delegate if it succeeds else NULL </dd></dl>

<p class="definition">Definition at line <a class="el" href="armnn__external__delegate_8cpp_source.xhtml#l00116">116</a> of file <a class="el" href="armnn__external__delegate_8cpp_source.xhtml">armnn_external_delegate.cpp</a>.</p>

<p class="reference">References <a class="el" href="_delegate_options_8hpp_source.xhtml#l00047">DelegateOptions::AddBackendOption()</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00156">OptimizerOptions::m_Debug</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00165">OptimizerOptions::m_ImportEnabled</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00168">OptimizerOptions::m_ModelOptions</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00159">OptimizerOptions::m_ReduceFp32ToBf16</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00153">OptimizerOptions::m_ReduceFp32ToFp16</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>, <a class="el" href="_delegate_options_8hpp_source.xhtml#l00042">DelegateOptions::SetBackends()</a>, <a class="el" href="_delegate_options_8hpp_source.xhtml#l00050">DelegateOptions::SetLoggingSeverity()</a>, <a class="el" href="_delegate_options_8hpp_source.xhtml#l00060">DelegateOptions::SetOptimizerOptions()</a>, <a class="el" href="namespacearmnn_delegate.xhtml#aaab840e387d9a4e7de223fbc8c969eb3">armnnDelegate::TfLiteArmnnDelegateCreate()</a>, and <a class="el" href="namespacearmnn_delegate.xhtml#a542da521454a5a61933cf44df32e5ca2">armnnDelegate::TfLiteArmnnDelegateOptionsDefault()</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// Returning null indicates an error during delegate creation so we initialize with that</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    TfLiteDelegate* delegate = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="comment">// (Initializes with CpuRef backend)</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <a class="code" href="classarmnn_delegate_1_1_delegate_options.xhtml">armnnDelegate::DelegateOptions</a> options = <a class="code" href="namespacearmnn_delegate.xhtml#a542da521454a5a61933cf44df32e5ca2">armnnDelegate::TfLiteArmnnDelegateOptionsDefault</a>();</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <a class="code" href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a> optimizerOptions;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; num_options; ++i)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="comment">// Process backends</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;backends&quot;</span>))</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="comment">// The backend option is a comma separated string of backendIDs that needs to be split</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                std::vector&lt;armnn::BackendId&gt; backends;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keywordtype">char</span>* pch;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                pch = strtok(options_values[i],<span class="stringliteral">&quot;,&quot;</span>);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keywordflow">while</span> (pch != NULL)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    backends.push_back(pch);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    pch = strtok (NULL, <span class="stringliteral">&quot;,&quot;</span>);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                options.<a class="code" href="classarmnn_delegate_1_1_delegate_options.xhtml#ad9d8dd6ed903c0ae3c4baa3e9d2e4ea5">SetBackends</a>(backends);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="comment">// Process logging level</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;logging-severity&quot;</span>))</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                options.<a class="code" href="classarmnn_delegate_1_1_delegate_options.xhtml#a98cd1055c58e98f7009c4e770fac96ec">SetLoggingSeverity</a>(options_values[i]);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="comment">// Process GPU backend options</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;gpu-tuning-level&quot;</span>))</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> option(<span class="stringliteral">&quot;GpuAcc&quot;</span>, {{<span class="stringliteral">&quot;TuningLevel&quot;</span>, atoi(options_values[i])}});</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                options.<a class="code" href="classarmnn_delegate_1_1_delegate_options.xhtml#a8b99570afa7d17ce4b1c7dab770fe467">AddBackendOption</a>(option);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;gpu-mlgo-tuning-file&quot;</span>))</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> option(<span class="stringliteral">&quot;GpuAcc&quot;</span>, {{<span class="stringliteral">&quot;MLGOTuningFilePath&quot;</span>, std::string(options_values[i])}});</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                options.<a class="code" href="classarmnn_delegate_1_1_delegate_options.xhtml#a8b99570afa7d17ce4b1c7dab770fe467">AddBackendOption</a>(option);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;gpu-tuning-file&quot;</span>))</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> option(<span class="stringliteral">&quot;GpuAcc&quot;</span>, {{<span class="stringliteral">&quot;TuningFile&quot;</span>, std::string(options_values[i])}});</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                options.<a class="code" href="classarmnn_delegate_1_1_delegate_options.xhtml#a8b99570afa7d17ce4b1c7dab770fe467">AddBackendOption</a>(option);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;gpu-kernel-profiling-enabled&quot;</span>))</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> option(<span class="stringliteral">&quot;GpuAcc&quot;</span>, {{<span class="stringliteral">&quot;KernelProfilingEnabled&quot;</span>, (*options_values[i] != <span class="charliteral">&#39;0&#39;</span>)}});</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                options.<a class="code" href="classarmnn_delegate_1_1_delegate_options.xhtml#a8b99570afa7d17ce4b1c7dab770fe467">AddBackendOption</a>(option);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;save-cached-network&quot;</span>))</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> option(<span class="stringliteral">&quot;GpuAcc&quot;</span>, {{<span class="stringliteral">&quot;SaveCachedNetwork&quot;</span>, (*options_values[i] != <span class="charliteral">&#39;0&#39;</span>)}});</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                optimizerOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">m_ModelOptions</a>.push_back(option);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;cached-network-filepath&quot;</span>))</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> option(<span class="stringliteral">&quot;GpuAcc&quot;</span>, {{<span class="stringliteral">&quot;CachedNetworkFilePath&quot;</span>, std::string(options_values[i])}});</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                optimizerOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">m_ModelOptions</a>.push_back(option);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="comment">// Process GPU &amp; CPU backend options</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;enable-fast-math&quot;</span>))</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> modelOptionGpu(<span class="stringliteral">&quot;GpuAcc&quot;</span>, {{<span class="stringliteral">&quot;FastMathEnabled&quot;</span>, (*options_values[i] != <span class="charliteral">&#39;0&#39;</span>)}});</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                optimizerOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">m_ModelOptions</a>.push_back(modelOptionGpu);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> modelOptionCpu(<span class="stringliteral">&quot;CpuAcc&quot;</span>, {{<span class="stringliteral">&quot;FastMathEnabled&quot;</span>, (*options_values[i] != <span class="charliteral">&#39;0&#39;</span>)}});</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                optimizerOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">m_ModelOptions</a>.push_back(modelOptionCpu);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="comment">// Process CPU backend options</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;number-of-threads&quot;</span>))</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfThreads = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(atoi(options_values[i]));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> modelOption(<span class="stringliteral">&quot;CpuAcc&quot;</span>, {{<span class="stringliteral">&quot;NumberOfThreads&quot;</span>, numberOfThreads}});</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                optimizerOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">m_ModelOptions</a>.push_back(modelOption);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="comment">// Process reduce-fp32-to-fp16 option</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;reduce-fp32-to-fp16&quot;</span>))</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;               optimizerOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a6e1a42622ca43dafc7ba8e684c016eb4">m_ReduceFp32ToFp16</a> = *options_values[i] != <span class="charliteral">&#39;0&#39;</span>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="comment">// Process reduce-fp32-to-bf16 option</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;reduce-fp32-to-bf16&quot;</span>))</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;               optimizerOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a11f463726addcc1d2845266997d79e9c">m_ReduceFp32ToBf16</a> = *options_values[i] != <span class="charliteral">&#39;0&#39;</span>;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="comment">// Process debug-data</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;debug-data&quot;</span>))</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;               optimizerOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a69eb14082d40fa0a3cff50457344a5e0">m_Debug</a> = *options_values[i] != <span class="charliteral">&#39;0&#39;</span>;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="comment">// Process memory-import</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::string(options_keys[i]) == std::string(<span class="stringliteral">&quot;memory-import&quot;</span>))</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;               optimizerOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a05c1bba6ba3ecc1339d4c4c10c0d8890">m_ImportEnabled</a> = *options_values[i] != <span class="charliteral">&#39;0&#39;</span>;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;Unknown option for the ArmNN Delegate given: &quot;</span> + std::string(options_keys[i]));</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        options.<a class="code" href="classarmnn_delegate_1_1_delegate_options.xhtml#ab4a44278190ff1282d94d6a1a39e77ee">SetOptimizerOptions</a>(optimizerOptions);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        delegate = <a class="code" href="namespacearmnn_delegate.xhtml#aaab840e387d9a4e7de223fbc8c969eb3">TfLiteArmnnDelegateCreate</a>(options);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; ex)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keywordflow">if</span>(report_error)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            report_error(ex.what());</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    }</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">return</span> delegate;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a71194277c60153a5f86539f5d39f01db"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">armnn::OptimizerOptions::m_ModelOptions</a></div><div class="ttdeci">ModelOptions m_ModelOptions</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00168">INetwork.hpp:168</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a11f463726addcc1d2845266997d79e9c"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a11f463726addcc1d2845266997d79e9c">armnn::OptimizerOptions::m_ReduceFp32ToBf16</a></div><div class="ttdeci">bool m_ReduceFp32ToBf16</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00159">INetwork.hpp:159</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a6e1a42622ca43dafc7ba8e684c016eb4"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a6e1a42622ca43dafc7ba8e684c016eb4">armnn::OptimizerOptions::m_ReduceFp32ToFp16</a></div><div class="ttdeci">bool m_ReduceFp32ToFp16</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00153">INetwork.hpp:153</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a69eb14082d40fa0a3cff50457344a5e0"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a69eb14082d40fa0a3cff50457344a5e0">armnn::OptimizerOptions::m_Debug</a></div><div class="ttdeci">bool m_Debug</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00156">INetwork.hpp:156</a></div></div>
<div class="ttc" id="classarmnn_delegate_1_1_delegate_options_xhtml_a98cd1055c58e98f7009c4e770fac96ec"><div class="ttname"><a href="classarmnn_delegate_1_1_delegate_options.xhtml#a98cd1055c58e98f7009c4e770fac96ec">armnnDelegate::DelegateOptions::SetLoggingSeverity</a></div><div class="ttdeci">void SetLoggingSeverity(const armnn::LogSeverity &amp;level)</div><div class="ttdoc">Sets the severity level for logging within ArmNN that will be used on creation of the delegate...</div><div class="ttdef"><b>Definition:</b> <a href="_delegate_options_8hpp_source.xhtml#l00050">DelegateOptions.hpp:50</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00110">INetwork.hpp:110</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a05c1bba6ba3ecc1339d4c4c10c0d8890"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a05c1bba6ba3ecc1339d4c4c10c0d8890">armnn::OptimizerOptions::m_ImportEnabled</a></div><div class="ttdeci">bool m_ImportEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00165">INetwork.hpp:165</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a></div><div class="ttdoc">Struct for the users to pass backend specific options. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00020">BackendOptions.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_delegate_xhtml_aaab840e387d9a4e7de223fbc8c969eb3"><div class="ttname"><a href="namespacearmnn_delegate.xhtml#aaab840e387d9a4e7de223fbc8c969eb3">armnnDelegate::TfLiteArmnnDelegateCreate</a></div><div class="ttdeci">TfLiteDelegate * TfLiteArmnnDelegateCreate(armnnDelegate::DelegateOptions options)</div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="classarmnn_delegate_1_1_delegate_options_xhtml_ad9d8dd6ed903c0ae3c4baa3e9d2e4ea5"><div class="ttname"><a href="classarmnn_delegate_1_1_delegate_options.xhtml#ad9d8dd6ed903c0ae3c4baa3e9d2e4ea5">armnnDelegate::DelegateOptions::SetBackends</a></div><div class="ttdeci">void SetBackends(const std::vector&lt; armnn::BackendId &gt; &amp;backends)</div><div class="ttdef"><b>Definition:</b> <a href="_delegate_options_8hpp_source.xhtml#l00042">DelegateOptions.hpp:42</a></div></div>
<div class="ttc" id="namespacearmnn_delegate_xhtml_a542da521454a5a61933cf44df32e5ca2"><div class="ttname"><a href="namespacearmnn_delegate.xhtml#a542da521454a5a61933cf44df32e5ca2">armnnDelegate::TfLiteArmnnDelegateOptionsDefault</a></div><div class="ttdeci">DelegateOptions TfLiteArmnnDelegateOptionsDefault()</div></div>
<div class="ttc" id="classarmnn_delegate_1_1_delegate_options_xhtml"><div class="ttname"><a href="classarmnn_delegate_1_1_delegate_options.xhtml">armnnDelegate::DelegateOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_delegate_options_8hpp_source.xhtml#l00019">DelegateOptions.hpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_delegate_1_1_delegate_options_xhtml_a8b99570afa7d17ce4b1c7dab770fe467"><div class="ttname"><a href="classarmnn_delegate_1_1_delegate_options.xhtml#a8b99570afa7d17ce4b1c7dab770fe467">armnnDelegate::DelegateOptions::AddBackendOption</a></div><div class="ttdeci">void AddBackendOption(const armnn::BackendOptions &amp;option)</div><div class="ttdoc">Appends a backend option to the list of backend options. </div><div class="ttdef"><b>Definition:</b> <a href="_delegate_options_8hpp_source.xhtml#l00047">DelegateOptions.hpp:47</a></div></div>
<div class="ttc" id="classarmnn_delegate_1_1_delegate_options_xhtml_ab4a44278190ff1282d94d6a1a39e77ee"><div class="ttname"><a href="classarmnn_delegate_1_1_delegate_options.xhtml#ab4a44278190ff1282d94d6a1a39e77ee">armnnDelegate::DelegateOptions::SetOptimizerOptions</a></div><div class="ttdeci">void SetOptimizerOptions(const armnn::OptimizerOptions &amp;optimizerOptions)</div><div class="ttdef"><b>Definition:</b> <a href="_delegate_options_8hpp_source.xhtml#l00060">DelegateOptions.hpp:60</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae2501fc8679230dab265774a84264f19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2501fc8679230dab265774a84264f19">&#9670;&nbsp;</a></span>tflite_plugin_destroy_delegate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void tflite::tflite_plugin_destroy_delegate </td>
          <td>(</td>
          <td class="paramtype">TfLiteDelegate *&#160;</td>
          <td class="paramname"><em>delegate</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destroy a given delegate plugin. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">delegate</td><td>Delegate to destruct </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="armnn__external__delegate_8cpp_source.xhtml#l00238">238</a> of file <a class="el" href="armnn__external__delegate_8cpp_source.xhtml">armnn_external_delegate.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn_delegate.xhtml#a29bbb05765039d65532d61301b56749e">armnnDelegate::TfLiteArmnnDelegateDelete()</a>.</p>
<div class="fragment"><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;{</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="namespacearmnn_delegate.xhtml#a29bbb05765039d65532d61301b56749e">armnnDelegate::TfLiteArmnnDelegateDelete</a>(delegate);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div><div class="ttc" id="namespacearmnn_delegate_xhtml_a29bbb05765039d65532d61301b56749e"><div class="ttname"><a href="namespacearmnn_delegate.xhtml#a29bbb05765039d65532d61301b56749e">armnnDelegate::TfLiteArmnnDelegateDelete</a></div><div class="ttdeci">void TfLiteArmnnDelegateDelete(TfLiteDelegate *tfLiteDelegate)</div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a50d961d3de1ccba630ccb3361fe3879d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50d961d3de1ccba630ccb3361fe3879d">&#9670;&nbsp;</a></span>gpu_options</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::string&gt; gpu_options</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{<span class="stringliteral">&quot;gpu-tuning-level&quot;</span>,</div><div class="line">                                      <span class="stringliteral">&quot;gpu-tuning-file&quot;</span>,</div><div class="line">                                      <span class="stringliteral">&quot;gpu-kernel-profiling-enabled&quot;</span>}</div></div><!-- fragment -->
<p>This file defines two symbols that need to be exported to use the TFLite external delegate provider. </p>
<p>This is a plugin that can be used for fast integration of delegates into benchmark tests and other tools. It allows loading of a dynamic delegate library at runtime.</p>
<p>The external delegate also has Tensorflow Lite Python bindings. Therefore the dynamic external delegate can be directly used with Tensorflow Lite Python APIs.</p>
<p>See tensorflow/lite/delegates/external for details or visit the tensorflow guide <a href="https://www.tensorflow.org/lite/performance/implementing_delegate#option_2_leverage_external_delegate">here</a> </p>

<p class="definition">Definition at line <a class="el" href="armnn__external__delegate_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="armnn__external__delegate_8cpp_source.xhtml">armnn_external_delegate.cpp</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacetflite.xhtml">tflite</a></li>
    <li class="footer">Generated on Mon May 10 2021 16:39:59 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
