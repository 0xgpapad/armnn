<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: IWorkloadFactory Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">21.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_i_workload_factory.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_1_1_i_workload_factory-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">IWorkloadFactory Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for IWorkloadFactory:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_i_workload_factory.png" usemap="#IWorkloadFactory_map" alt=""/>
  <map id="IWorkloadFactory_map" name="IWorkloadFactory_map">
<area href="classarmnn_1_1_ref_workload_factory.xhtml" alt="RefWorkloadFactory" shape="rect" coords="0,56,199,80"/>
<area href="classarmnn_1_1_workload_factory_base.xhtml" alt="WorkloadFactoryBase" shape="rect" coords="209,56,408,80"/>
<area href="classsdb_1_1_sample_dynamic_workload_factory.xhtml" alt="SampleDynamicWorkloadFactory" shape="rect" coords="418,56,617,80"/>
<area href="classarmnn_1_1_cl_workload_factory.xhtml" alt="ClWorkloadFactory" shape="rect" coords="104,112,303,136"/>
<area href="classarmnn_1_1_neon_workload_factory.xhtml" alt="NeonWorkloadFactory" shape="rect" coords="313,112,512,136"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aab62208f96483015c29ad58549efedd8"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aab62208f96483015c29ad58549efedd8">~IWorkloadFactory</a> ()</td></tr>
<tr class="separator:aab62208f96483015c29ad58549efedd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54a596adc0162c80f33a6cda4f33a6ef"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a54a596adc0162c80f33a6cda4f33a6ef">AfterWorkloadsCreated</a> ()</td></tr>
<tr class="separator:a54a596adc0162c80f33a6cda4f33a6ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f7e4296485d2812e7996089149c96d1"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9f7e4296485d2812e7996089149c96d1">GetBackendId</a> () const =0</td></tr>
<tr class="separator:a9f7e4296485d2812e7996089149c96d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37f4eba7877deb34f4d8d64c9bcb9ab5"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a37f4eba7877deb34f4d8d64c9bcb9ab5">SupportsSubTensors</a> () const =0</td></tr>
<tr class="separator:a37f4eba7877deb34f4d8d64c9bcb9ab5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac043991b839903b2ba9da884e4020848"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac043991b839903b2ba9da884e4020848">CreateSubTensorHandle</a> (<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &amp;parent, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> const &amp;subTensorShape, unsigned int const *subTensorOrigin) const =0</td></tr>
<tr class="separator:ac043991b839903b2ba9da884e4020848"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa83593035de93eb4b6dddb9dc8f5ced6"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa83593035de93eb4b6dddb9dc8f5ced6">CreateInput</a> (const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">InputQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const =0</td></tr>
<tr class="separator:aa83593035de93eb4b6dddb9dc8f5ced6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15c140be4ddceffee16436f009d3ed94"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, const bool IsMemoryManaged=<a class="el" href="_ref_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a>) const =0</td></tr>
<tr class="separator:a15c140be4ddceffee16436f009d3ed94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0b0226f767fd570877710b84c7caa2a"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af0b0226f767fd570877710b84c7caa2a">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout, const bool IsMemoryManaged=<a class="el" href="_ref_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a>) const =0</td></tr>
<tr class="separator:af0b0226f767fd570877710b84c7caa2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3ba329a833bbb63961eb64d6477d691"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ae3ba329a833bbb63961eb64d6477d691">CreateAbs</a> (const <a class="el" href="structarmnn_1_1_abs_queue_descriptor.xhtml">AbsQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ae3ba329a833bbb63961eb64d6477d691"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4458d75c0db21c6abc941cd93a6a24c5"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a4458d75c0db21c6abc941cd93a6a24c5">CreateActivation</a> (const <a class="el" href="structarmnn_1_1_activation_queue_descriptor.xhtml">ActivationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a4458d75c0db21c6abc941cd93a6a24c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf187617ed4cdd6625b396d6b194923e"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#acf187617ed4cdd6625b396d6b194923e">CreateAddition</a> (const <a class="el" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:acf187617ed4cdd6625b396d6b194923e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac47803c9faacfb7c10219253b99f61ca"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac47803c9faacfb7c10219253b99f61ca">CreateArgMinMax</a> (const <a class="el" href="structarmnn_1_1_arg_min_max_queue_descriptor.xhtml">ArgMinMaxQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ac47803c9faacfb7c10219253b99f61ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe1e0d40e23195022c0bc10a8aab55ea"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#abe1e0d40e23195022c0bc10a8aab55ea">CreateBatchNormalization</a> (const <a class="el" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">BatchNormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:abe1e0d40e23195022c0bc10a8aab55ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af00ce13ef7dabd17cc4186d0a4991757"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af00ce13ef7dabd17cc4186d0a4991757">CreateBatchToSpaceNd</a> (const <a class="el" href="structarmnn_1_1_batch_to_space_nd_queue_descriptor.xhtml">BatchToSpaceNdQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:af00ce13ef7dabd17cc4186d0a4991757"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89d2e69fd045ebe42e4a7bc17585d47e"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a89d2e69fd045ebe42e4a7bc17585d47e">CreateCast</a> (const <a class="el" href="structarmnn_1_1_cast_queue_descriptor.xhtml">CastQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a89d2e69fd045ebe42e4a7bc17585d47e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fa12033e9be37c529ac54a83ab43b36"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3fa12033e9be37c529ac54a83ab43b36">CreateComparison</a> (const <a class="el" href="structarmnn_1_1_comparison_queue_descriptor.xhtml">ComparisonQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a3fa12033e9be37c529ac54a83ab43b36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32bb8d6cf5fc028bf501252767c08b21"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a32bb8d6cf5fc028bf501252767c08b21">CreateConcat</a> (const <a class="el" href="structarmnn_1_1_concat_queue_descriptor.xhtml">ConcatQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a32bb8d6cf5fc028bf501252767c08b21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a963bd7acce29a83d96daeb2cea34f2f7"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a963bd7acce29a83d96daeb2cea34f2f7">CreateConstant</a> (const <a class="el" href="structarmnn_1_1_constant_queue_descriptor.xhtml">ConstantQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a963bd7acce29a83d96daeb2cea34f2f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8ecac7ffd75e39c5a651932c5eaa8d2"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af8ecac7ffd75e39c5a651932c5eaa8d2">CreateConvertBf16ToFp32</a> (const <a class="el" href="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor.xhtml">ConvertBf16ToFp32QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:af8ecac7ffd75e39c5a651932c5eaa8d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83e0a21747c1ce29b2083c1e3b1d88af"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a83e0a21747c1ce29b2083c1e3b1d88af">CreateConvertFp16ToFp32</a> (const <a class="el" href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">ConvertFp16ToFp32QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a83e0a21747c1ce29b2083c1e3b1d88af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a147654e5d9af7cec3ecd957c6bd4161e"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a147654e5d9af7cec3ecd957c6bd4161e">CreateConvertFp32ToBf16</a> (const <a class="el" href="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor.xhtml">ConvertFp32ToBf16QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a147654e5d9af7cec3ecd957c6bd4161e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b414a001b6b31d00bfe4056fd6740c5"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2b414a001b6b31d00bfe4056fd6740c5">CreateConvertFp32ToFp16</a> (const <a class="el" href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">ConvertFp32ToFp16QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a2b414a001b6b31d00bfe4056fd6740c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2184995027cd2c9f9980206de9658855"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2184995027cd2c9f9980206de9658855">CreateConvolution2d</a> (const <a class="el" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a2184995027cd2c9f9980206de9658855"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00346a3754d9411bba2e29dc1f996ac6"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a00346a3754d9411bba2e29dc1f996ac6">CreateDebug</a> (const <a class="el" href="structarmnn_1_1_debug_queue_descriptor.xhtml">DebugQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a00346a3754d9411bba2e29dc1f996ac6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c3a47828ee252dca111605c9be4b072"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3c3a47828ee252dca111605c9be4b072">CreateDepthToSpace</a> (const <a class="el" href="structarmnn_1_1_depth_to_space_queue_descriptor.xhtml">DepthToSpaceQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a3c3a47828ee252dca111605c9be4b072"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accb9759dfd2880efe0f8d2705ddee448"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#accb9759dfd2880efe0f8d2705ddee448">CreateDepthwiseConvolution2d</a> (const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">DepthwiseConvolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:accb9759dfd2880efe0f8d2705ddee448"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3243806bf6c89df8952cc0a3601e538b"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3243806bf6c89df8952cc0a3601e538b">CreateDequantize</a> (const <a class="el" href="structarmnn_1_1_dequantize_queue_descriptor.xhtml">DequantizeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a3243806bf6c89df8952cc0a3601e538b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0da07faa15302377aa97be89c57677c"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ad0da07faa15302377aa97be89c57677c">CreateDetectionPostProcess</a> (const <a class="el" href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">DetectionPostProcessQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ad0da07faa15302377aa97be89c57677c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20bb773c7fd6253418bdedac1312cd19"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a20bb773c7fd6253418bdedac1312cd19">CreateDivision</a> (const <a class="el" href="structarmnn_1_1_division_queue_descriptor.xhtml">DivisionQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a20bb773c7fd6253418bdedac1312cd19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12d2c4e0f0b0d6b36d8a3e14bf69f9e4"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a12d2c4e0f0b0d6b36d8a3e14bf69f9e4">CreateElementwiseUnary</a> (const <a class="el" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a12d2c4e0f0b0d6b36d8a3e14bf69f9e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a096bb62d44fadf079ea4463379d4e6aa"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a096bb62d44fadf079ea4463379d4e6aa">CreateEqual</a> (const <a class="el" href="structarmnn_1_1_equal_queue_descriptor.xhtml">EqualQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a096bb62d44fadf079ea4463379d4e6aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42581f3d1c22e64b7f3676ea20acab0e"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a42581f3d1c22e64b7f3676ea20acab0e">CreateFakeQuantization</a> (const <a class="el" href="structarmnn_1_1_fake_quantization_queue_descriptor.xhtml">FakeQuantizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a42581f3d1c22e64b7f3676ea20acab0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40c882d6ffadc328ab14502b16d5e90c"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a40c882d6ffadc328ab14502b16d5e90c">CreateFill</a> (const <a class="el" href="structarmnn_1_1_fill_queue_descriptor.xhtml">FillQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a40c882d6ffadc328ab14502b16d5e90c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1a45333dc35cb5ba9ab71fca4f359e4"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa1a45333dc35cb5ba9ab71fca4f359e4">CreateFloor</a> (const <a class="el" href="structarmnn_1_1_floor_queue_descriptor.xhtml">FloorQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:aa1a45333dc35cb5ba9ab71fca4f359e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c193739520e08f686b347ff795ad2fe"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a1c193739520e08f686b347ff795ad2fe">CreateFullyConnected</a> (const <a class="el" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">FullyConnectedQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a1c193739520e08f686b347ff795ad2fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91fe56cae7e970d90f6e7f54427e7d44"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a91fe56cae7e970d90f6e7f54427e7d44">CreateGather</a> (const <a class="el" href="structarmnn_1_1_gather_queue_descriptor.xhtml">GatherQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a91fe56cae7e970d90f6e7f54427e7d44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e779d1b00a9e885497364ebd0dc24ef"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a4e779d1b00a9e885497364ebd0dc24ef">CreateGreater</a> (const <a class="el" href="structarmnn_1_1_greater_queue_descriptor.xhtml">GreaterQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a4e779d1b00a9e885497364ebd0dc24ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96a3123d8a8290b01582d955cdcd75d5"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a96a3123d8a8290b01582d955cdcd75d5">CreateInstanceNormalization</a> (const <a class="el" href="structarmnn_1_1_instance_normalization_queue_descriptor.xhtml">InstanceNormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a96a3123d8a8290b01582d955cdcd75d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c86f886e36ce943f1ebc241a37f0413"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3c86f886e36ce943f1ebc241a37f0413">CreateL2Normalization</a> (const <a class="el" href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">L2NormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a3c86f886e36ce943f1ebc241a37f0413"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f1d0ed7b67cd7fefa421d5fd1971d62"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a5f1d0ed7b67cd7fefa421d5fd1971d62">CreateLogicalBinary</a> (const <a class="el" href="structarmnn_1_1_logical_binary_queue_descriptor.xhtml">LogicalBinaryQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a5f1d0ed7b67cd7fefa421d5fd1971d62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a867b966277008b4bfb04326adb7a83b7"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a867b966277008b4bfb04326adb7a83b7">CreateLogicalUnary</a> (const <a class="el" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a867b966277008b4bfb04326adb7a83b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbdc0563cc7d8b6c1e3c2fb6f13871bf"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#adbdc0563cc7d8b6c1e3c2fb6f13871bf">CreateLogSoftmax</a> (const <a class="el" href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">LogSoftmaxQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:adbdc0563cc7d8b6c1e3c2fb6f13871bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6bd7aaf685d4e956d780f8655a6f174"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab6bd7aaf685d4e956d780f8655a6f174">CreateLstm</a> (const <a class="el" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ab6bd7aaf685d4e956d780f8655a6f174"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fe27b35296a25984ab97319fd9a13d6"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a3fe27b35296a25984ab97319fd9a13d6">CreateMaximum</a> (const <a class="el" href="structarmnn_1_1_maximum_queue_descriptor.xhtml">MaximumQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a3fe27b35296a25984ab97319fd9a13d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac63f8f12f80efbe37b789d1540649470"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac63f8f12f80efbe37b789d1540649470">CreateMean</a> (const <a class="el" href="structarmnn_1_1_mean_queue_descriptor.xhtml">MeanQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:ac63f8f12f80efbe37b789d1540649470"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87bf54bcdc865fd5d4f86194b3899d09"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a87bf54bcdc865fd5d4f86194b3899d09">CreateMemCopy</a> (const <a class="el" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">MemCopyQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a87bf54bcdc865fd5d4f86194b3899d09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0c99a5e2a6e4a67fec8b8c5906a3552"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af0c99a5e2a6e4a67fec8b8c5906a3552">CreateMemImport</a> (const <a class="el" href="structarmnn_1_1_mem_import_queue_descriptor.xhtml">MemImportQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:af0c99a5e2a6e4a67fec8b8c5906a3552"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc3239cb7dd9434551a70d8534387069"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#acc3239cb7dd9434551a70d8534387069">CreateMerge</a> (const <a class="el" href="structarmnn_1_1_merge_queue_descriptor.xhtml">MergeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:acc3239cb7dd9434551a70d8534387069"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addb710d76098d55ad2f56117b73a9f48"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#addb710d76098d55ad2f56117b73a9f48">CreateMerger</a> (const <a class="el" href="namespacearmnn.xhtml#a308ba160745ba35e1de8d698d0139eb4">MergerQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:addb710d76098d55ad2f56117b73a9f48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8851ca32bea910cf9376d05527e3dbef"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a8851ca32bea910cf9376d05527e3dbef">CreateMinimum</a> (const <a class="el" href="structarmnn_1_1_minimum_queue_descriptor.xhtml">MinimumQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a8851ca32bea910cf9376d05527e3dbef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a756955d7436dd8f6e63cdf6367eb1694"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a756955d7436dd8f6e63cdf6367eb1694">CreateMultiplication</a> (const <a class="el" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a756955d7436dd8f6e63cdf6367eb1694"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a185c215631e1b01a6d41232410de4c46"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a185c215631e1b01a6d41232410de4c46">CreateNormalization</a> (const <a class="el" href="structarmnn_1_1_normalization_queue_descriptor.xhtml">NormalizationQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a185c215631e1b01a6d41232410de4c46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb279112eb265e5531c4ac2194b6c898"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#adb279112eb265e5531c4ac2194b6c898">CreateOutput</a> (const <a class="el" href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">OutputQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:adb279112eb265e5531c4ac2194b6c898"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0c956e4a638d0a2777ecb71953f7e27"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab0c956e4a638d0a2777ecb71953f7e27">CreatePad</a> (const <a class="el" href="structarmnn_1_1_pad_queue_descriptor.xhtml">PadQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:ab0c956e4a638d0a2777ecb71953f7e27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dcee0bc4bbae1f745324aed0f841a0a"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2dcee0bc4bbae1f745324aed0f841a0a">CreatePermute</a> (const <a class="el" href="structarmnn_1_1_permute_queue_descriptor.xhtml">PermuteQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a2dcee0bc4bbae1f745324aed0f841a0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e95afd9a55700cbf6f9e8db8089f2f2"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a6e95afd9a55700cbf6f9e8db8089f2f2">CreatePooling2d</a> (const <a class="el" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">Pooling2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a6e95afd9a55700cbf6f9e8db8089f2f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a012306477c38a533edd29c422227cd8c"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a012306477c38a533edd29c422227cd8c">CreatePreCompiled</a> (const <a class="el" href="structarmnn_1_1_pre_compiled_queue_descriptor.xhtml">PreCompiledQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a012306477c38a533edd29c422227cd8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf4a93f605e4e7dad6aee0b4d2159171"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#adf4a93f605e4e7dad6aee0b4d2159171">CreatePrelu</a> (const <a class="el" href="structarmnn_1_1_prelu_queue_descriptor.xhtml">PreluQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:adf4a93f605e4e7dad6aee0b4d2159171"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1942c254ba89d17803e5a636aa927d90"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a1942c254ba89d17803e5a636aa927d90">CreateQuantize</a> (const <a class="el" href="structarmnn_1_1_quantize_queue_descriptor.xhtml">QuantizeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a1942c254ba89d17803e5a636aa927d90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab17bf35d906f8daad42be0a0799c72ab"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab17bf35d906f8daad42be0a0799c72ab">CreateQLstm</a> (const <a class="el" href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">QLstmQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ab17bf35d906f8daad42be0a0799c72ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5ceda49651dcd53fb7eb05658b5a0cb"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab5ceda49651dcd53fb7eb05658b5a0cb">CreateQuantizedLstm</a> (const <a class="el" href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml">QuantizedLstmQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ab5ceda49651dcd53fb7eb05658b5a0cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15e6119396b9db114f07302da82f8429"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15e6119396b9db114f07302da82f8429">CreateRank</a> (const <a class="el" href="structarmnn_1_1_rank_queue_descriptor.xhtml">RankQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a15e6119396b9db114f07302da82f8429"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb2f7d06ee044f9ead67dd51889f62ec"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aeb2f7d06ee044f9ead67dd51889f62ec">CreateReduce</a> (const <a class="el" href="structarmnn_1_1_reduce_queue_descriptor.xhtml">ReduceQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:aeb2f7d06ee044f9ead67dd51889f62ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f9d9c79a100a0d057027d8524373962"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a4f9d9c79a100a0d057027d8524373962">CreateReshape</a> (const <a class="el" href="structarmnn_1_1_reshape_queue_descriptor.xhtml">ReshapeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a4f9d9c79a100a0d057027d8524373962"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84377c94a59c589dbf419f838c4b9119"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a84377c94a59c589dbf419f838c4b9119">CreateResize</a> (const <a class="el" href="structarmnn_1_1_resize_queue_descriptor.xhtml">ResizeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a84377c94a59c589dbf419f838c4b9119"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7eb321c47cd90d2cc3823e74596f1239"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a7eb321c47cd90d2cc3823e74596f1239">CreateResizeBilinear</a> (const <a class="el" href="structarmnn_1_1_resize_bilinear_queue_descriptor.xhtml">ResizeBilinearQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a7eb321c47cd90d2cc3823e74596f1239"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2459b9d4f72d78eab86f9ec09384c491"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a2459b9d4f72d78eab86f9ec09384c491">CreateRsqrt</a> (const <a class="el" href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml">RsqrtQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a2459b9d4f72d78eab86f9ec09384c491"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86658e2fc02a32acd4de20ef92242347"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a86658e2fc02a32acd4de20ef92242347">CreateSlice</a> (const <a class="el" href="structarmnn_1_1_slice_queue_descriptor.xhtml">SliceQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a86658e2fc02a32acd4de20ef92242347"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a843d44d2e81df87e414df3b3e688de"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a8a843d44d2e81df87e414df3b3e688de">CreateSoftmax</a> (const <a class="el" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">SoftmaxQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a8a843d44d2e81df87e414df3b3e688de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44e7aebc021646becc3f32722e22553e"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a44e7aebc021646becc3f32722e22553e">CreateSpaceToBatchNd</a> (const <a class="el" href="structarmnn_1_1_space_to_batch_nd_queue_descriptor.xhtml">SpaceToBatchNdQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a44e7aebc021646becc3f32722e22553e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bdc3801e1e964046730d49c0e11d1ce"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9bdc3801e1e964046730d49c0e11d1ce">CreateSpaceToDepth</a> (const <a class="el" href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">SpaceToDepthQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a9bdc3801e1e964046730d49c0e11d1ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a439305cf0a71fc85a0b93cc063100f91"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a439305cf0a71fc85a0b93cc063100f91">CreateSubtraction</a> (const <a class="el" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a439305cf0a71fc85a0b93cc063100f91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac306abe0073a04300f2d96d0b5eb6218"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac306abe0073a04300f2d96d0b5eb6218">CreateSplitter</a> (const <a class="el" href="structarmnn_1_1_splitter_queue_descriptor.xhtml">SplitterQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:ac306abe0073a04300f2d96d0b5eb6218"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa06423ce3f34e4ec2d336889f8c0d79a"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa06423ce3f34e4ec2d336889f8c0d79a">CreateStack</a> (const <a class="el" href="structarmnn_1_1_stack_queue_descriptor.xhtml">StackQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:aa06423ce3f34e4ec2d336889f8c0d79a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21344e9f338e1d4c3d26825002a02754"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a21344e9f338e1d4c3d26825002a02754">CreateStridedSlice</a> (const <a class="el" href="structarmnn_1_1_strided_slice_queue_descriptor.xhtml">StridedSliceQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:a21344e9f338e1d4c3d26825002a02754"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab37f39b9e3e224ccde6b36adc876bb19"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ab37f39b9e3e224ccde6b36adc876bb19">CreateSwitch</a> (const <a class="el" href="structarmnn_1_1_switch_queue_descriptor.xhtml">SwitchQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">Info</a>) const</td></tr>
<tr class="separator:ab37f39b9e3e224ccde6b36adc876bb19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96217a8bbb66811608ce729fd49a3dd2"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a96217a8bbb66811608ce729fd49a3dd2">CreateTranspose</a> (const <a class="el" href="structarmnn_1_1_transpose_queue_descriptor.xhtml">TransposeQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a96217a8bbb66811608ce729fd49a3dd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12cccba82124cc4993868a3173a65167"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a12cccba82124cc4993868a3173a65167">CreateTransposeConvolution2d</a> (const <a class="el" href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">TransposeConvolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a12cccba82124cc4993868a3173a65167"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a74dc9ec1a223eab8b072368b2dacee87"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;backendId, const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a74dc9ec1a223eab8b072368b2dacee87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d94ea841143b76fe08ccb308839bfd7"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a7d94ea841143b76fe08ccb308839bfd7">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a7d94ea841143b76fe08ccb308839bfd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaff50773427132e1066a7de56a53db1"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aeaff50773427132e1066a7de56a53db1">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions)</td></tr>
<tr class="separator:aeaff50773427132e1066a7de56a53db1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52ba8d60c6582a847ef7bc914116d394"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a52ba8d60c6582a847ef7bc914116d394">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;backendId, const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions)</td></tr>
<tr class="separator:a52ba8d60c6582a847ef7bc914116d394"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_workload_factory_8hpp_source.xhtml#l00022">22</a> of file <a class="el" href="_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aab62208f96483015c29ad58549efedd8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab62208f96483015c29ad58549efedd8">&#9670;&nbsp;</a></span>~IWorkloadFactory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_factory_8hpp_source.xhtml#l00025">25</a> of file <a class="el" href="_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{ }</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a54a596adc0162c80f33a6cda4f33a6ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54a596adc0162c80f33a6cda4f33a6ef">&#9670;&nbsp;</a></span>AfterWorkloadsCreated()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void AfterWorkloadsCreated </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aff048f2bbb6e714f3309f5f34b2b6c3f">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">27</a> of file <a class="el" href="_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00043">ARMNN_DEPRECATED_MSG</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01322">IWorkloadFactory::CreateAbs()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01328">IWorkloadFactory::CreateActivation()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01334">IWorkloadFactory::CreateAddition()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01340">IWorkloadFactory::CreateArgMinMax()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01346">IWorkloadFactory::CreateBatchNormalization()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01352">IWorkloadFactory::CreateBatchToSpaceNd()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01358">IWorkloadFactory::CreateCast()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01364">IWorkloadFactory::CreateComparison()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01370">IWorkloadFactory::CreateConcat()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01376">IWorkloadFactory::CreateConstant()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01382">IWorkloadFactory::CreateConvertBf16ToFp32()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01388">IWorkloadFactory::CreateConvertFp16ToFp32()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01394">IWorkloadFactory::CreateConvertFp32ToBf16()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01400">IWorkloadFactory::CreateConvertFp32ToFp16()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01406">IWorkloadFactory::CreateConvolution2d()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01412">IWorkloadFactory::CreateDebug()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01418">IWorkloadFactory::CreateDepthToSpace()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01424">IWorkloadFactory::CreateDepthwiseConvolution2d()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01430">IWorkloadFactory::CreateDequantize()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01436">IWorkloadFactory::CreateDetectionPostProcess()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01442">IWorkloadFactory::CreateDivision()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01448">IWorkloadFactory::CreateElementwiseUnary()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01454">IWorkloadFactory::CreateEqual()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01460">IWorkloadFactory::CreateFakeQuantization()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01466">IWorkloadFactory::CreateFill()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01472">IWorkloadFactory::CreateFloor()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01478">IWorkloadFactory::CreateFullyConnected()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01484">IWorkloadFactory::CreateGather()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01490">IWorkloadFactory::CreateGreater()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa83593035de93eb4b6dddb9dc8f5ced6">IWorkloadFactory::CreateInput()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01496">IWorkloadFactory::CreateInstanceNormalization()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01503">IWorkloadFactory::CreateL2Normalization()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01509">IWorkloadFactory::CreateLogicalBinary()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01515">IWorkloadFactory::CreateLogicalUnary()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01521">IWorkloadFactory::CreateLogSoftmax()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01527">IWorkloadFactory::CreateLstm()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01533">IWorkloadFactory::CreateMaximum()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01539">IWorkloadFactory::CreateMean()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01545">IWorkloadFactory::CreateMemCopy()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01551">IWorkloadFactory::CreateMemImport()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01557">IWorkloadFactory::CreateMerge()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01563">IWorkloadFactory::CreateMerger()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01569">IWorkloadFactory::CreateMinimum()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01575">IWorkloadFactory::CreateMultiplication()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01581">IWorkloadFactory::CreateNormalization()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01587">IWorkloadFactory::CreateOutput()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01593">IWorkloadFactory::CreatePad()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01599">IWorkloadFactory::CreatePermute()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01605">IWorkloadFactory::CreatePooling2d()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01611">IWorkloadFactory::CreatePreCompiled()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01617">IWorkloadFactory::CreatePrelu()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01629">IWorkloadFactory::CreateQLstm()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01623">IWorkloadFactory::CreateQuantize()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01635">IWorkloadFactory::CreateQuantizedLstm()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01640">IWorkloadFactory::CreateRank()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01646">IWorkloadFactory::CreateReduce()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01652">IWorkloadFactory::CreateReshape()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01664">IWorkloadFactory::CreateResize()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01658">IWorkloadFactory::CreateResizeBilinear()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01670">IWorkloadFactory::CreateRsqrt()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01676">IWorkloadFactory::CreateSlice()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01682">IWorkloadFactory::CreateSoftmax()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01694">IWorkloadFactory::CreateSpaceToBatchNd()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01700">IWorkloadFactory::CreateSpaceToDepth()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01688">IWorkloadFactory::CreateSplitter()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01706">IWorkloadFactory::CreateStack()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01712">IWorkloadFactory::CreateStridedSlice()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac043991b839903b2ba9da884e4020848">IWorkloadFactory::CreateSubTensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01718">IWorkloadFactory::CreateSubtraction()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01724">IWorkloadFactory::CreateSwitch()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01730">IWorkloadFactory::CreateTranspose()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01736">IWorkloadFactory::CreateTransposeConvolution2d()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9f7e4296485d2812e7996089149c96d1">IWorkloadFactory::GetBackendId()</a>, <a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::Info</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01278">IWorkloadFactory::IsLayerSupported()</a>, and <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a37f4eba7877deb34f4d8d64c9bcb9ab5">IWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{};</div></div><!-- fragment -->
</div>
</div>
<a id="ae3ba329a833bbb63961eb64d6477d691"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3ba329a833bbb63961eb64d6477d691">&#9670;&nbsp;</a></span>CreateAbs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateAbs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_abs_queue_descriptor.xhtml">AbsQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a902422ffa1b0076458972c3be051e44d">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a902422ffa1b0076458972c3be051e44d">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a902422ffa1b0076458972c3be051e44d">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4784c591a49826474956353ab0581708">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01322">1322</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_abs_layer_8cpp_source.xhtml#l00022">AbsLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;{</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4458d75c0db21c6abc941cd93a6a24c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4458d75c0db21c6abc941cd93a6a24c5">&#9670;&nbsp;</a></span>CreateActivation()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateActivation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_queue_descriptor.xhtml">ActivationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#af5f7b0f6273c838b6b7d7de8447524f9">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#af5f7b0f6273c838b6b7d7de8447524f9">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#af5f7b0f6273c838b6b7d7de8447524f9">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a789a347180c49b2403e435857501f623">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01328">1328</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00025">BoundedReLuTestCommon()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00190">BoundedReLuUint8UpperAndLowerBoundTest()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01219">CompareActivationTestImpl()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00317">ConstantLinearActivationTestCommon()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00020">ActivationLayer::CreateWorkload()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00407">SimpleActivationTest()</a>, and <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00841">SqrtNNTest()</a>.</p>
<div class="fragment"><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;{</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="acf187617ed4cdd6625b396d6b194923e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf187617ed4cdd6625b396d6b194923e">&#9670;&nbsp;</a></span>CreateAddition()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateAddition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a9da9a34fb99114f9d1fb705171a9a6ee">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a9da9a34fb99114f9d1fb705171a9a6ee">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a46e1398968d2f4951ce1fd2b9b70fc5b">NeonWorkloadFactory</a>, <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a73ac5e3f91727655f742643013215a2b">SampleDynamicWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ac1f4d42be05893f74b1237c3356c3c0c">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01334">1334</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00533">AdditionAfterMaxPoolTest()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00251">AdditionBroadcast1ElementTestImpl()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00167">AdditionBroadcastTestImpl()</a>, <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00641">CompareAdditionTest()</a>, and <a class="el" href="_addition_layer_8cpp_source.xhtml#l00022">AdditionLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;{</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac47803c9faacfb7c10219253b99f61ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac47803c9faacfb7c10219253b99f61ca">&#9670;&nbsp;</a></span>CreateArgMinMax()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateArgMinMax </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_queue_descriptor.xhtml">ArgMinMaxQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a3fffcec3624e83671b4623e22ca623e5">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a3fffcec3624e83671b4623e22ca623e5">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3fffcec3624e83671b4623e22ca623e5">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4269d65bcf8068290752d75164934a25">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01340">1340</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00024">ArgMinMaxLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;{</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abe1e0d40e23195022c0bc10a8aab55ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe1e0d40e23195022c0bc10a8aab55ea">&#9670;&nbsp;</a></span>CreateBatchNormalization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateBatchNormalization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">BatchNormalizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a9cce78b879d26312fd515270afc1e66a">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a9cce78b879d26312fd515270afc1e66a">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3e5a5e967dfd56b9b1d55ec2739f2edd">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a666c75e9db051b9b07f137a74af8d8b4">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01346">1346</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml#l00606">CompareBatchNormTest()</a>, and <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00021">BatchNormalizationLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;{</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af00ce13ef7dabd17cc4186d0a4991757"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af00ce13ef7dabd17cc4186d0a4991757">&#9670;&nbsp;</a></span>CreateBatchToSpaceNd()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateBatchToSpaceNd </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_queue_descriptor.xhtml">BatchToSpaceNdQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a455fcb54444e8286dbb3714310e4998b">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a455fcb54444e8286dbb3714310e4998b">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a1d54b5c774bdac45f22d1ec57d0a9f3f">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a52094433136e6cae57398d861cd483f9">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01352">1352</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00031">BatchToSpaceNdLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;{</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a89d2e69fd045ebe42e4a7bc17585d47e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89d2e69fd045ebe42e4a7bc17585d47e">&#9670;&nbsp;</a></span>CreateCast()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateCast </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_cast_queue_descriptor.xhtml">CastQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aa2ccec6d14b8556cd635f7afb0d60034">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aa2ccec6d14b8556cd635f7afb0d60034">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aa2ccec6d14b8556cd635f7afb0d60034">NeonWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01358">1358</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_cast_test_impl_8cpp_source.xhtml#l00011">CastTest()</a>, and <a class="el" href="_cast_layer_8cpp_source.xhtml#l00021">CastLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;{</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3fa12033e9be37c529ac54a83ab43b36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fa12033e9be37c529ac54a83ab43b36">&#9670;&nbsp;</a></span>CreateComparison()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateComparison </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_queue_descriptor.xhtml">ComparisonQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a2d8ef97ae45e9a37d096f14b0a40136c">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3d6501ad29a91db467a01ed0e36a96d2">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a3d5de4e35ccddc5cfe79e530558d5184">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01364">1364</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00023">ComparisonLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;{</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a32bb8d6cf5fc028bf501252767c08b21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32bb8d6cf5fc028bf501252767c08b21">&#9670;&nbsp;</a></span>CreateConcat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConcat </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_concat_queue_descriptor.xhtml">ConcatQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a1f89ceb71ffc990170fe834cddb697fa">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1f89ceb71ffc990170fe834cddb697fa">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a6c8caa2fb12f36f83fde85da03a87c42">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a713c3685138355b145f4d17e473bf543">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01370">1370</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l01952">ConcatDifferentInputOutputQParamTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00276">Concatenate()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02111">ConcatTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02707">ConcatUint16Test()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02423">ConcatUint8DifferentQParamsTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02569">ConcatUint8Test()</a>, and <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;{</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a963bd7acce29a83d96daeb2cea34f2f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a963bd7acce29a83d96daeb2cea34f2f7">&#9670;&nbsp;</a></span>CreateConstant()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConstant </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_constant_queue_descriptor.xhtml">ConstantQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aa6ef3324f715ccf62d235aa54118d174">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aa6ef3324f715ccf62d235aa54118d174">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aa6ef3324f715ccf62d235aa54118d174">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a0da6f270ae7ce126b29a8918d858e814">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01376">1376</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_constant_layer_8cpp_source.xhtml#l00021">ConstantLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;{</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af8ecac7ffd75e39c5a651932c5eaa8d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8ecac7ffd75e39c5a651932c5eaa8d2">&#9670;&nbsp;</a></span>CreateConvertBf16ToFp32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvertBf16ToFp32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convert_bf16_to_fp32_queue_descriptor.xhtml">ConvertBf16ToFp32QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aade1930aedd59e037337410381f7011d">RefWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aade1930aedd59e037337410381f7011d">NeonWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01382">1382</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_convert_bf16_to_fp32_test_impl_8cpp_source.xhtml#l00013">ConvertBf16ToFp32Test()</a>, and <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00022">ConvertBf16ToFp32Layer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;{</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a83e0a21747c1ce29b2083c1e3b1d88af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83e0a21747c1ce29b2083c1e3b1d88af">&#9670;&nbsp;</a></span>CreateConvertFp16ToFp32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvertFp16ToFp32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">ConvertFp16ToFp32QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aefe6a68cb6d7ba517d7988195680c831">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aefe6a68cb6d7ba517d7988195680c831">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aefe6a68cb6d7ba517d7988195680c831">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4e3b8d5650cb78c97a2eceb034209187">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01388">1388</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00022">ConvertFp16ToFp32Layer::CreateWorkload()</a>, and <a class="el" href="_convert_fp16_to_fp32_test_impl_8cpp_source.xhtml#l00016">SimpleConvertFp16ToFp32Test()</a>.</p>
<div class="fragment"><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;{</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a147654e5d9af7cec3ecd957c6bd4161e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a147654e5d9af7cec3ecd957c6bd4161e">&#9670;&nbsp;</a></span>CreateConvertFp32ToBf16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvertFp32ToBf16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convert_fp32_to_bf16_queue_descriptor.xhtml">ConvertFp32ToBf16QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a4e70ecb5f981d7c07971bd0740f53c05">RefWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a4e70ecb5f981d7c07971bd0740f53c05">NeonWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01394">1394</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_convert_fp32_to_bf16_test_impl_8cpp_source.xhtml#l00013">ConvertFp32ToBf16Test()</a>, and <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00022">ConvertFp32ToBf16Layer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;{</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2b414a001b6b31d00bfe4056fd6740c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b414a001b6b31d00bfe4056fd6740c5">&#9670;&nbsp;</a></span>CreateConvertFp32ToFp16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvertFp32ToFp16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">ConvertFp32ToFp16QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a33b291201b6716e295afb17c1eb0864e">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a33b291201b6716e295afb17c1eb0864e">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a33b291201b6716e295afb17c1eb0864e">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a17042914356fe13b708c3702cb82ab7f">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01400">1400</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00021">ConvertFp32ToFp16Layer::CreateWorkload()</a>, and <a class="el" href="_convert_fp32_to_fp16_test_impl_8cpp_source.xhtml#l00014">SimpleConvertFp32ToFp16Test()</a>.</p>
<div class="fragment"><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;{</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2184995027cd2c9f9980206de9658855"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2184995027cd2c9f9980206de9658855">&#9670;&nbsp;</a></span>CreateConvolution2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvolution2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a661b8b943d4a28ef6c8fd19bf223c61e">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a004cfce1311cd19d48b6705f4d80aa6c">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a661b8b943d4a28ef6c8fd19bf223c61e">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4a781a9541d2c44c5fec0ffc8434447c">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01406">1406</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01301">CompareConvolution2dTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00462">Convolution1dTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l03439">Convolution2dPerAxisQuantTest()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00049">Convolution2dLayer::CreateWorkload()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00368">SimpleConvolution2dNhwcTestImpl()</a>, and <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00200">SimpleConvolution2dTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;{</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a00346a3754d9411bba2e29dc1f996ac6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00346a3754d9411bba2e29dc1f996ac6">&#9670;&nbsp;</a></span>CreateDebug()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDebug </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_debug_queue_descriptor.xhtml">DebugQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aca1333805c6665111154f10cc72c8234">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aca1333805c6665111154f10cc72c8234">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aca1333805c6665111154f10cc72c8234">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ad99e6a9f4e78ba4690429850de69fadd">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01412">1412</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_debug_layer_8cpp_source.xhtml#l00020">DebugLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;{</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3c3a47828ee252dca111605c9be4b072"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c3a47828ee252dca111605c9be4b072">&#9670;&nbsp;</a></span>CreateDepthToSpace()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDepthToSpace </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depth_to_space_queue_descriptor.xhtml">DepthToSpaceQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#af77fb45622aedb3f2ee36b412fea8735">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#af77fb45622aedb3f2ee36b412fea8735">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#af77fb45622aedb3f2ee36b412fea8735">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1b2165c83d6501e8ede91324c31a95f4">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01418">1418</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00025">DepthToSpaceLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;{</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="accb9759dfd2880efe0f8d2705ddee448"></a>
<h2 class="memtitle"><span class="permalink"><a href="#accb9759dfd2880efe0f8d2705ddee448">&#9670;&nbsp;</a></span>CreateDepthwiseConvolution2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDepthwiseConvolution2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">DepthwiseConvolution2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a48ebe514c1ca3e41edccdd7682bf38ca">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a48ebe514c1ca3e41edccdd7682bf38ca">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a48ebe514c1ca3e41edccdd7682bf38ca">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a2314defaf9c8b1ffcf59e7e509a959d6">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01424">1424</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l02936">CompareDepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00051">DepthwiseConvolution2dLayer::CreateWorkload()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01627">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01765">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l03680">DepthwiseConvolution2dPerAxisQuantTest()</a>, and <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01919">DepthwiseConvolution2dTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;{</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3243806bf6c89df8952cc0a3601e538b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3243806bf6c89df8952cc0a3601e538b">&#9670;&nbsp;</a></span>CreateDequantize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDequantize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_dequantize_queue_descriptor.xhtml">DequantizeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ab345edf481dd64a3ced4c0808d4ee844">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#ab345edf481dd64a3ced4c0808d4ee844">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ab345edf481dd64a3ced4c0808d4ee844">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1f17745331f928011cc1ea162866b8e7">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01430">1430</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00019">DequantizeLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;{</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad0da07faa15302377aa97be89c57677c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0da07faa15302377aa97be89c57677c">&#9670;&nbsp;</a></span>CreateDetectionPostProcess()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDetectionPostProcess </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_detection_post_process_queue_descriptor.xhtml">DetectionPostProcessQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a3a2d9b8e1156605172ada1472e9460cd">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3a2d9b8e1156605172ada1472e9460cd">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a3a2d9b8e1156605172ada1472e9460cd">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ac8ff2a4e63a9954fd6b3e9fc6dfa9bf0">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01436">1436</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00023">DetectionPostProcessLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;{</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a20bb773c7fd6253418bdedac1312cd19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20bb773c7fd6253418bdedac1312cd19">&#9670;&nbsp;</a></span>CreateDivision()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDivision </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_division_queue_descriptor.xhtml">DivisionQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a11cb76f59b65109b8557d43b3cb1bc06">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a94a90252763f05b6c957f68f84e65c66">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a11cb76f59b65109b8557d43b3cb1bc06">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1c7e383368cb078a1faac0a4e4f763a1">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01442">1442</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_division_layer_8cpp_source.xhtml#l00022">DivisionLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;{</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a12d2c4e0f0b0d6b36d8a3e14bf69f9e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12d2c4e0f0b0d6b36d8a3e14bf69f9e4">&#9670;&nbsp;</a></span>CreateElementwiseUnary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateElementwiseUnary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a447013b9d70a1d74196449d1a3f56acc">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae9de0dcd1cd7bc40deb74c6926361401">ClWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a09f09645c2289d5d47dbea7c011d5f0e">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01448">1448</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00023">ElementwiseUnaryLayer::CreateWorkload()</a>, and <a class="el" href="_elementwise_unary_test_impl_8cpp_source.xhtml#l00008">CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;{</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a096bb62d44fadf079ea4463379d4e6aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a096bb62d44fadf079ea4463379d4e6aa">&#9670;&nbsp;</a></span>CreateEqual()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateEqual </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_equal_queue_descriptor.xhtml">EqualQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aa31f52c6b8c2092a41acb4890b910d2b">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aa31f52c6b8c2092a41acb4890b910d2b">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aa31f52c6b8c2092a41acb4890b910d2b">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01454">1454</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>.</p>
<div class="fragment"><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;{</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a42581f3d1c22e64b7f3676ea20acab0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42581f3d1c22e64b7f3676ea20acab0e">&#9670;&nbsp;</a></span>CreateFakeQuantization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateFakeQuantization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fake_quantization_queue_descriptor.xhtml">FakeQuantizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ac5797618555c747b254667e328f8d5c3">RefWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a5ebad711e7e91ca3fd60eed73686a482">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01460">1460</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00021">FakeQuantizationLayer::CreateWorkload()</a>, and <a class="el" href="_fake_quantization_test_impl_8cpp_source.xhtml#l00016">FakeQuantizationTest()</a>.</p>
<div class="fragment"><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;{</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a40c882d6ffadc328ab14502b16d5e90c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40c882d6ffadc328ab14502b16d5e90c">&#9670;&nbsp;</a></span>CreateFill()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateFill </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fill_queue_descriptor.xhtml">FillQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a2b793964f2c501b9ea343ffe310fc89e">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a2b793964f2c501b9ea343ffe310fc89e">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a2b793964f2c501b9ea343ffe310fc89e">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01466">1466</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00021">FillLayer::CreateWorkload()</a>, and <a class="el" href="_fill_test_impl_8cpp_source.xhtml#l00015">SimpleFillTest()</a>.</p>
<div class="fragment"><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;{</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa1a45333dc35cb5ba9ab71fca4f359e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1a45333dc35cb5ba9ab71fca4f359e4">&#9670;&nbsp;</a></span>CreateFloor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateFloor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_floor_queue_descriptor.xhtml">FloorQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aac4c7cd17cf3dc3a23fd4a21933c60cb">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4101fcf76e3bbc979b2276631617aabe">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aac4c7cd17cf3dc3a23fd4a21933c60cb">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aac4c7cd17cf3dc3a23fd4a21933c60cb">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01472">1472</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00021">FloorLayer::CreateWorkload()</a>, and <a class="el" href="_floor_test_impl_8cpp_source.xhtml#l00015">SimpleFloorTest()</a>.</p>
<div class="fragment"><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;{</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1c193739520e08f686b347ff795ad2fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c193739520e08f686b347ff795ad2fe">&#9670;&nbsp;</a></span>CreateFullyConnected()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateFullyConnected </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">FullyConnectedQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a1fdd5dfd04433d84de96c71664cce5a9">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af5ace6034148c3fe048db884058f04cf">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3b1e84836871f27a15add7f08736f139">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1fdd5dfd04433d84de96c71664cce5a9">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01478">1478</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00022">FullyConnectedLayer::CreateWorkload()</a>, <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00024">SimpleFullyConnectedTestImpl()</a>, and <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00071">SimpleFullyConnectedTestWeightsAsInputsImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;{</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a91fe56cae7e970d90f6e7f54427e7d44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91fe56cae7e970d90f6e7f54427e7d44">&#9670;&nbsp;</a></span>CreateGather()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateGather </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_queue_descriptor.xhtml">GatherQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a674b6d6de1db47959ad36831976ca3aa">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ada3f450379ba7b4989344de72a16f1d2">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a674b6d6de1db47959ad36831976ca3aa">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a674b6d6de1db47959ad36831976ca3aa">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01484">1484</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_gather_layer_8cpp_source.xhtml#l00021">GatherLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;{</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4e779d1b00a9e885497364ebd0dc24ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e779d1b00a9e885497364ebd0dc24ef">&#9670;&nbsp;</a></span>CreateGreater()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateGreater </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_greater_queue_descriptor.xhtml">GreaterQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a0b7d11f98c9c17dd23a94666fe35f226">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a0b7d11f98c9c17dd23a94666fe35f226">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a0b7d11f98c9c17dd23a94666fe35f226">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01490">1490</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>.</p>
<div class="fragment"><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;{</div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa83593035de93eb4b6dddb9dc8f5ced6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa83593035de93eb4b6dddb9dc8f5ced6">&#9670;&nbsp;</a></span>CreateInput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a>&gt; CreateInput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">InputQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">ClWorkloadFactory</a>, <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a3e7b63e791ca559838c81aec0e18fb46">SampleDynamicWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a3dcc96078130874f1be15a7148868539">WorkloadFactoryBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>.</p>

</div>
</div>
<a id="a96a3123d8a8290b01582d955cdcd75d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96a3123d8a8290b01582d955cdcd75d5">&#9670;&nbsp;</a></span>CreateInstanceNormalization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateInstanceNormalization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_queue_descriptor.xhtml">InstanceNormalizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a5c2f4f703e07407e70c30cc770d02d6b">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a77110c4dd8fe747ba0d441265f781076">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a5c2f4f703e07407e70c30cc770d02d6b">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a5c2f4f703e07407e70c30cc770d02d6b">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01496">1496</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00021">InstanceNormalizationLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;{</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3c86f886e36ce943f1ebc241a37f0413"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c86f886e36ce943f1ebc241a37f0413">&#9670;&nbsp;</a></span>CreateL2Normalization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateL2Normalization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">L2NormalizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a1c511b4b70bc0b6cccbef2285ba292bc">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af12076c82b1b7f0c48c1ed71df206b4d">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a1c511b4b70bc0b6cccbef2285ba292bc">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1c511b4b70bc0b6cccbef2285ba292bc">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01503">1503</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00021">L2NormalizationLayer::CreateWorkload()</a>, and <a class="el" href="_l2_normalization_test_impl_8cpp_source.xhtml#l00699">L2Normalization2dShapeTest()</a>.</p>
<div class="fragment"><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;{</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a5f1d0ed7b67cd7fefa421d5fd1971d62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f1d0ed7b67cd7fefa421d5fd1971d62">&#9670;&nbsp;</a></span>CreateLogicalBinary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateLogicalBinary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_logical_binary_queue_descriptor.xhtml">LogicalBinaryQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a6d9da6f30bce6aa09040e7e37485a3dc">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a6d9da6f30bce6aa09040e7e37485a3dc">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a6d9da6f30bce6aa09040e7e37485a3dc">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01509">1509</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00023">LogicalBinaryLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;{</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a867b966277008b4bfb04326adb7a83b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a867b966277008b4bfb04326adb7a83b7">&#9670;&nbsp;</a></span>CreateLogicalUnary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateLogicalUnary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_queue_descriptor.xhtml">ElementwiseUnaryQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01515">1515</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_workload_factory_base_8hpp_source.xhtml#l00109">WorkloadFactoryBase::CreateElementwiseUnary()</a>, and <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00023">ElementwiseUnaryLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;{</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="adbdc0563cc7d8b6c1e3c2fb6f13871bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbdc0563cc7d8b6c1e3c2fb6f13871bf">&#9670;&nbsp;</a></span>CreateLogSoftmax()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateLogSoftmax </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">LogSoftmaxQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a95c212cdbcf2af9a845f19467c2f2f2e">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a95c212cdbcf2af9a845f19467c2f2f2e">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a04a3ae3944eb63e7e94c6e9676815864">WorkloadFactoryBase</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a95c212cdbcf2af9a845f19467c2f2f2e">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01521">1521</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00021">LogSoftmaxLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;{</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab6bd7aaf685d4e956d780f8655a6f174"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6bd7aaf685d4e956d780f8655a6f174">&#9670;&nbsp;</a></span>CreateLstm()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateLstm </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a0dce100ea0fc5c44798736a4d879bd4d">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af6cc3669898b498592dc28600aa6f0cd">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a0dce100ea0fc5c44798736a4d879bd4d">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a0dce100ea0fc5c44798736a4d879bd4d">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01527">1527</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00022">LstmLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;{</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3fe27b35296a25984ab97319fd9a13d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fe27b35296a25984ab97319fd9a13d6">&#9670;&nbsp;</a></span>CreateMaximum()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMaximum </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_maximum_queue_descriptor.xhtml">MaximumQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ae2c6c12059f9cde37ff6bb8f682e9ceb">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a9e67be0a653c173ba94e38137dc4bbde">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#ae2c6c12059f9cde37ff6bb8f682e9ceb">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae2c6c12059f9cde37ff6bb8f682e9ceb">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01533">1533</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_maximum_layer_8cpp_source.xhtml#l00021">MaximumLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;{</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac63f8f12f80efbe37b789d1540649470"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac63f8f12f80efbe37b789d1540649470">&#9670;&nbsp;</a></span>CreateMean()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMean </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_queue_descriptor.xhtml">MeanQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aba5032787777bf0074ce70e2c2423d49">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aabe4842ade5647ac5bbee5e446e49a5c">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aba5032787777bf0074ce70e2c2423d49">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aba5032787777bf0074ce70e2c2423d49">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01539">1539</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_mean_layer_8cpp_source.xhtml#l00024">MeanLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;{</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a87bf54bcdc865fd5d4f86194b3899d09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87bf54bcdc865fd5d4f86194b3899d09">&#9670;&nbsp;</a></span>CreateMemCopy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMemCopy </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">MemCopyQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a7cbe2f3dee6fad6a92a384455676fa63">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a73e9a5c2c3eff38766f03adb98abdd26">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aa07df85c33d6e3ea4891b5f344df6964">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a7cbe2f3dee6fad6a92a384455676fa63">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01545">1545</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>.</p>
<div class="fragment"><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;{</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af0c99a5e2a6e4a67fec8b8c5906a3552"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0c99a5e2a6e4a67fec8b8c5906a3552">&#9670;&nbsp;</a></span>CreateMemImport()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMemImport </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mem_import_queue_descriptor.xhtml">MemImportQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a44d5ee8d1c0bd414bf1dfb60d94a62d8">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ad16ff72d909eb48f3dc8e1015c4a5078">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a1786f52370ba933427837a2179305773">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a44d5ee8d1c0bd414bf1dfb60d94a62d8">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01551">1551</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>.</p>
<div class="fragment"><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;{</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="acc3239cb7dd9434551a70d8534387069"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc3239cb7dd9434551a70d8534387069">&#9670;&nbsp;</a></span>CreateMerge()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMerge </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_merge_queue_descriptor.xhtml">MergeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ac05fd4710da8c304db555fb5f597d614">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01557">1557</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>.</p>
<div class="fragment"><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;{</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="addb710d76098d55ad2f56117b73a9f48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addb710d76098d55ad2f56117b73a9f48">&#9670;&nbsp;</a></span>CreateMerger()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMerger </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a308ba160745ba35e1de8d698d0139eb4">MergerQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ad4b8b34cc736f9d7778c6a2ab4fba25e">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a9f6500bc4fc71e20292c5d229afee4eb">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ad4b8b34cc736f9d7778c6a2ab4fba25e">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01563">1563</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>.</p>
<div class="fragment"><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;{</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8851ca32bea910cf9376d05527e3dbef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8851ca32bea910cf9376d05527e3dbef">&#9670;&nbsp;</a></span>CreateMinimum()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMinimum </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_minimum_queue_descriptor.xhtml">MinimumQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a39927b6e1faae50d9f804b435430bbf2">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1ba2b05e3c2028d4bc3db29fc0edf122">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a39927b6e1faae50d9f804b435430bbf2">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a39927b6e1faae50d9f804b435430bbf2">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01569">1569</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_minimum_layer_8cpp_source.xhtml#l00022">MinimumLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;{</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a756955d7436dd8f6e63cdf6367eb1694"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a756955d7436dd8f6e63cdf6367eb1694">&#9670;&nbsp;</a></span>CreateMultiplication()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateMultiplication </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a247e81465a607359f63756d13c417e70">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a848fc4ff47d5e9c68d2e26f6523b4e58">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#af7ba09a42932a341c966f1ba1f596861">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a247e81465a607359f63756d13c417e70">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01575">1575</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00525">CompareMultiplicationTest()</a>, and <a class="el" href="_multiplication_layer_8cpp_source.xhtml#l00022">MultiplicationLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;{</div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a185c215631e1b01a6d41232410de4c46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a185c215631e1b01a6d41232410de4c46">&#9670;&nbsp;</a></span>CreateNormalization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateNormalization </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_queue_descriptor.xhtml">NormalizationQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aca46fe4cdc107d912d822a7618d4d2db">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a6df587611b4c46b591527f3d594f4a11">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3334b1fbbf87863e3b40a6194b9e0199">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aca46fe4cdc107d912d822a7618d4d2db">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01581">1581</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00021">NormalizationLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;{</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="adb279112eb265e5531c4ac2194b6c898"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb279112eb265e5531c4ac2194b6c898">&#9670;&nbsp;</a></span>CreateOutput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateOutput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">OutputQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#afd952ccd68a1b2231b77db1f9131a61b">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">NeonWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">ClWorkloadFactory</a>, and <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#ac8ea7b9d330f8828aedb2374914808c3">SampleDynamicWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01587">1587</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>.</p>
<div class="fragment"><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;{</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab0c956e4a638d0a2777ecb71953f7e27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0c956e4a638d0a2777ecb71953f7e27">&#9670;&nbsp;</a></span>CreatePad()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_queue_descriptor.xhtml">PadQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a8fb2b01fe17e49e997fe59d86e4d5c9a">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a06a69eab86af31e0daa17c99b9038bf1">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a8fb2b01fe17e49e997fe59d86e4d5c9a">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a8fb2b01fe17e49e997fe59d86e4d5c9a">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01593">1593</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00022">PadLayer::CreateWorkload()</a>, <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00020">Pad2dTestCommon()</a>, <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00095">Pad3dTestCommon()</a>, <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00181">Pad4dTestCommon()</a>, and <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00421">PadQAsymmTestCommon()</a>.</p>
<div class="fragment"><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;{</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2dcee0bc4bbae1f745324aed0f841a0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2dcee0bc4bbae1f745324aed0f841a0a">&#9670;&nbsp;</a></span>CreatePermute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePermute </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_queue_descriptor.xhtml">PermuteQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a7b6ac4b2de1550174ad661fa76ec3d2d">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a32983845590ec2dc9e644491793fd557">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a59399d21babdc3a17df004dfa64617ea">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a7b6ac4b2de1550174ad661fa76ec3d2d">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01599">1599</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00025">PermuteLayer::CreateWorkload()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00121">PermuteTensorData()</a>, and <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00019">SimplePermuteTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;{</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6e95afd9a55700cbf6f9e8db8089f2f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e95afd9a55700cbf6f9e8db8089f2f2">&#9670;&nbsp;</a></span>CreatePooling2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePooling2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">Pooling2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ae22c3b8013c1ee7a5459016c0595d444">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#abf1f324933ada657d13faf8d1d32a907">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a6e05a05ea7ea2c384c94d6568f032614">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae22c3b8013c1ee7a5459016c0595d444">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01605">1605</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00533">AdditionAfterMaxPoolTest()</a>, <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00027">Pooling2dLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;{</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a012306477c38a533edd29c422227cd8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a012306477c38a533edd29c422227cd8c">&#9670;&nbsp;</a></span>CreatePreCompiled()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePreCompiled </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pre_compiled_queue_descriptor.xhtml">PreCompiledQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a3f21c47a41cbbcfe7d74becd76766c80">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a21a5aef5f1850d8b5f797d97632409b8">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3f21c47a41cbbcfe7d74becd76766c80">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a3f21c47a41cbbcfe7d74becd76766c80">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01611">1611</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_pre_compiled_layer_8cpp_source.xhtml#l00031">PreCompiledLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;{</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="adf4a93f605e4e7dad6aee0b4d2159171"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf4a93f605e4e7dad6aee0b4d2159171">&#9670;&nbsp;</a></span>CreatePrelu()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePrelu </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_prelu_queue_descriptor.xhtml">PreluQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ac4739f640f68405d2e5a4e4b716c3c59">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a8040319bef721ad05a9fdf75060aaafe">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aca8d797b1e48d693de73e868b3aa41ec">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ac4739f640f68405d2e5a4e4b716c3c59">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01617">1617</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00023">PreluLayer::CreateWorkload()</a>, and <a class="el" href="_prelu_test_impl_8hpp_source.xhtml#l00024">PreluTest()</a>.</p>
<div class="fragment"><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;{</div><div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab17bf35d906f8daad42be0a0799c72ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab17bf35d906f8daad42be0a0799c72ab">&#9670;&nbsp;</a></span>CreateQLstm()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateQLstm </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">QLstmQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a2edd58192b89ac27cf4be7d7ea6252d3">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a2edd58192b89ac27cf4be7d7ea6252d3">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a2edd58192b89ac27cf4be7d7ea6252d3">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01629">1629</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00022">QLstmLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;{</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1942c254ba89d17803e5a636aa927d90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1942c254ba89d17803e5a636aa927d90">&#9670;&nbsp;</a></span>CreateQuantize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateQuantize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantize_queue_descriptor.xhtml">QuantizeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a1782959d8ba043acbc72d6a06c00a7f4">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ae51a441630e32e5a850d3d639f0e7847">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a6a58a15e291291722dc9a4517d2974eb">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1782959d8ba043acbc72d6a06c00a7f4">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01623">1623</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00019">QuantizeLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;{</div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab5ceda49651dcd53fb7eb05658b5a0cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5ceda49651dcd53fb7eb05658b5a0cb">&#9670;&nbsp;</a></span>CreateQuantizedLstm()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateQuantizedLstm </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml">QuantizedLstmQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#abd228c95f2ec95cbb2abcaa0dbacc018">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a166569e6ac31c22484612c77690c3eff">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a166569e6ac31c22484612c77690c3eff">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01635">1635</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00022">QuantizedLstmLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;{</div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a15e6119396b9db114f07302da82f8429"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15e6119396b9db114f07302da82f8429">&#9670;&nbsp;</a></span>CreateRank()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateRank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_rank_queue_descriptor.xhtml">RankQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ac732fb2a7a5cc332339aa8686dd7e928">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af8ce0da98340225c76ec512e5483dd89">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#ac732fb2a7a5cc332339aa8686dd7e928">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ac732fb2a7a5cc332339aa8686dd7e928">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01640">1640</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_rank_layer_8cpp_source.xhtml#l00020">RankLayer::CreateWorkload()</a>, and <a class="el" href="_rank_test_impl_8cpp_source.xhtml#l00015">RankTest()</a>.</p>
<div class="fragment"><div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;{</div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aeb2f7d06ee044f9ead67dd51889f62ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb2f7d06ee044f9ead67dd51889f62ec">&#9670;&nbsp;</a></span>CreateReduce()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateReduce </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reduce_queue_descriptor.xhtml">ReduceQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aab44d0205a3daac5eebf14c6672924f5">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aab44d0205a3daac5eebf14c6672924f5">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aab44d0205a3daac5eebf14c6672924f5">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01646">1646</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00022">ReduceLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;{</div><div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4f9d9c79a100a0d057027d8524373962"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f9d9c79a100a0d057027d8524373962">&#9670;&nbsp;</a></span>CreateReshape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateReshape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_queue_descriptor.xhtml">ReshapeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a85d2e898648c795f462a15f5c03a67ac">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a655697a3bf827352acadc5f1dd3a8a34">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a85d2e898648c795f462a15f5c03a67ac">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a85d2e898648c795f462a15f5c03a67ac">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01652">1652</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00022">ReshapeLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;{</div><div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a84377c94a59c589dbf419f838c4b9119"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84377c94a59c589dbf419f838c4b9119">&#9670;&nbsp;</a></span>CreateResize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateResize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_queue_descriptor.xhtml">ResizeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aa9390326e8445e71c5dee9858084a1b8">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a3f15b1b391dd86de376ce541eadca3fa">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01664">1664</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_resize_layer_8cpp_source.xhtml#l00026">ResizeLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;{</div><div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7eb321c47cd90d2cc3823e74596f1239"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7eb321c47cd90d2cc3823e74596f1239">&#9670;&nbsp;</a></span>CreateResizeBilinear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateResizeBilinear </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_bilinear_queue_descriptor.xhtml">ResizeBilinearQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ae0895b3c5782c6094ce839e07cc17d58">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a12b5d302d3707fbbc0275a4683c59349">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae0895b3c5782c6094ce839e07cc17d58">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01658">1658</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>.</p>
<div class="fragment"><div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;{</div><div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2459b9d4f72d78eab86f9ec09384c491"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2459b9d4f72d78eab86f9ec09384c491">&#9670;&nbsp;</a></span>CreateRsqrt()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateRsqrt </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml">RsqrtQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#afddaf1bce21f092a34d877cffac411a3">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a5d0b48104607726b76e2968da5a4feec">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#afddaf1bce21f092a34d877cffac411a3">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#afddaf1bce21f092a34d877cffac411a3">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01670">1670</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00022">RsqrtLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;{</div><div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a86658e2fc02a32acd4de20ef92242347"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86658e2fc02a32acd4de20ef92242347">&#9670;&nbsp;</a></span>CreateSlice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSlice </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_queue_descriptor.xhtml">SliceQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#abda2c9b7c5fe4ca092d2224ba9679a06">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a67ee4f8373684cb67f033976fc563081">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#abda2c9b7c5fe4ca092d2224ba9679a06">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#abda2c9b7c5fe4ca092d2224ba9679a06">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01676">1676</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_slice_layer_8cpp_source.xhtml#l00024">SliceLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;{</div><div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8a843d44d2e81df87e414df3b3e688de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a843d44d2e81df87e414df3b3e688de">&#9670;&nbsp;</a></span>CreateSoftmax()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSoftmax </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">SoftmaxQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a457c416483289cc7c8a8511a67d95816">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a6d49c282026484eb1c6e56f56f35348e">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a457c416483289cc7c8a8511a67d95816">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a457c416483289cc7c8a8511a67d95816">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01682">1682</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00021">SoftmaxLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;{</div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a44e7aebc021646becc3f32722e22553e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44e7aebc021646becc3f32722e22553e">&#9670;&nbsp;</a></span>CreateSpaceToBatchNd()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSpaceToBatchNd </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_queue_descriptor.xhtml">SpaceToBatchNdQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a1d1feb2b5c6a4c6701a3dee01e65bee4">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1c9cd3cd798df38358e9047ac4621fe2">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a1d1feb2b5c6a4c6701a3dee01e65bee4">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a1d1feb2b5c6a4c6701a3dee01e65bee4">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01694">1694</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00027">SpaceToBatchNdLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;{</div><div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a9bdc3801e1e964046730d49c0e11d1ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9bdc3801e1e964046730d49c0e11d1ce">&#9670;&nbsp;</a></span>CreateSpaceToDepth()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSpaceToDepth </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">SpaceToDepthQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a2318d942f9615dff92fe75688bdd8c48">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4069efcce4abfd80a88827ea1509b2f8">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a2318d942f9615dff92fe75688bdd8c48">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a2318d942f9615dff92fe75688bdd8c48">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01700">1700</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00027">SpaceToDepthLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;{</div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac306abe0073a04300f2d96d0b5eb6218"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac306abe0073a04300f2d96d0b5eb6218">&#9670;&nbsp;</a></span>CreateSplitter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSplitter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_splitter_queue_descriptor.xhtml">SplitterQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a49428ff12e031e5af8bcc66161fa09fd">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aa98def0f9b9ff714a013f8083bbadf82">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aa98def0f9b9ff714a013f8083bbadf82">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aa98def0f9b9ff714a013f8083bbadf82">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01688">1688</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;{</div><div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa06423ce3f34e4ec2d336889f8c0d79a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa06423ce3f34e4ec2d336889f8c0d79a">&#9670;&nbsp;</a></span>CreateStack()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateStack </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_queue_descriptor.xhtml">StackQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a90c2655fd294c445ca2727491c8a8c79">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a4d5371f67eabb04a38c69e97e67f1d35">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a4d5371f67eabb04a38c69e97e67f1d35">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a4d5371f67eabb04a38c69e97e67f1d35">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01706">1706</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_stack_layer_8cpp_source.xhtml#l00022">StackLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;{</div><div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a21344e9f338e1d4c3d26825002a02754"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21344e9f338e1d4c3d26825002a02754">&#9670;&nbsp;</a></span>CreateStridedSlice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateStridedSlice </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_queue_descriptor.xhtml">StridedSliceQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a757d3084d3e11a1840bd2170eb990235">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a5c46866e2a0d83e350ff70c12d9613bf">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a5c46866e2a0d83e350ff70c12d9613bf">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a5c46866e2a0d83e350ff70c12d9613bf">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01712">1712</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00022">StridedSliceLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;{</div><div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac043991b839903b2ba9da884e4020848"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac043991b839903b2ba9da884e4020848">&#9670;&nbsp;</a></span>CreateSubTensorHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&gt; CreateSubTensorHandle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> const &amp;&#160;</td>
          <td class="paramname"><em>subTensorShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int const *&#160;</td>
          <td class="paramname"><em>subTensorOrigin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#af7ed41b965e30999ff8250e09d7b5abe">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#abefb9df9d7a54cf2f82047ea350d0388">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#abefb9df9d7a54cf2f82047ea350d0388">NeonWorkloadFactory</a>, <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a803d8d97e76968a19caa6ca110af8bb7">SampleDynamicWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a99251f9711c087d7c1b5a08236ef0201">WorkloadFactoryBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>.</p>

</div>
</div>
<a id="a439305cf0a71fc85a0b93cc063100f91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a439305cf0a71fc85a0b93cc063100f91">&#9670;&nbsp;</a></span>CreateSubtraction()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSubtraction </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a26563dd3de8f08475d30c8c8389f1ddc">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a088ed247c7ec3bc1603c60f1145014e8">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a61d64ca308b8af42b422e13382329021">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a26563dd3de8f08475d30c8c8389f1ddc">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01718">1718</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_subtraction_layer_8cpp_source.xhtml#l00022">SubtractionLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;{</div><div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab37f39b9e3e224ccde6b36adc876bb19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab37f39b9e3e224ccde6b36adc876bb19">&#9670;&nbsp;</a></span>CreateSwitch()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateSwitch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_switch_queue_descriptor.xhtml">SwitchQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>Info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a032cba0444de559937381f17bcbe48f5">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01724">1724</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_switch_layer_8cpp_source.xhtml#l00019">SwitchLayer::CreateWorkload()</a>.</p>
<div class="fragment"><div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;{</div><div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a15c140be4ddceffee16436f009d3ed94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15c140be4ddceffee16436f009d3ed94">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code><a class="el" href="_ref_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">NeonWorkloadFactory</a>, <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#afeebce3ac305675b16d1065d0cb5a362">SampleDynamicWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a526eaec84398bc8067f407769b31f4a9">WorkloadFactoryBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_output_handler_8cpp_source.xhtml#l00021">OutputHandler::CreateTensorHandles()</a>.</p>

</div>
</div>
<a id="af0b0226f767fd570877710b84c7caa2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0b0226f767fd570877710b84c7caa2a">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>dataLayout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code><a class="el" href="_ref_layer_tests_8cpp.xhtml#a88d84cc49602ca19491dea9c998035fe">true</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">NeonWorkloadFactory</a>, <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a729d5c6a0304731cb12830c69d25ec6a">SampleDynamicWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a68f34fb8ec9a7921a1f6c17b4f5312e6">WorkloadFactoryBase</a>.</p>

</div>
</div>
<a id="a96217a8bbb66811608ce729fd49a3dd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96217a8bbb66811608ce729fd49a3dd2">&#9670;&nbsp;</a></span>CreateTranspose()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateTranspose </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_queue_descriptor.xhtml">TransposeQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a07446244299bc12305593358695ea1b4">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ac302ae63e103b22d6ce4fef0f5513899">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aac9d1b722bcd5b59cc6760ca2607ef8e">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ac302ae63e103b22d6ce4fef0f5513899">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01730">1730</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00025">TransposeLayer::CreateWorkload()</a>, and <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00020">SimpleTransposeTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;{</div><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a12cccba82124cc4993868a3173a65167"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12cccba82124cc4993868a3173a65167">&#9670;&nbsp;</a></span>CreateTransposeConvolution2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateTransposeConvolution2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">TransposeConvolution2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#acb80cd4ff2c145b80554376643fc54db">WorkloadFactoryBase</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a29e02d375261a32c39635d6833a49333">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a29e02d375261a32c39635d6833a49333">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a29e02d375261a32c39635d6833a49333">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01736">1736</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00025">TransposeConvolution2dLayer::CreateWorkload()</a>, and <a class="el" href="_transpose_convolution2d_test_impl_8cpp_source.xhtml#l00572">TransposeConvolution2dPerAxisQuantTest()</a>.</p>
<div class="fragment"><div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;{</div><div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;IWorkload&gt;();</div><div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a9f7e4296485d2812e7996089149c96d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f7e4296485d2812e7996089149c96d1">&#9670;&nbsp;</a></span>GetBackendId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetBackendId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">NeonWorkloadFactory</a>, and <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#ae5dac93c38aa9f9108f89b7f4acc2beb">SampleDynamicWorkloadFactory</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>.</p>

</div>
</div>
<a id="a74dc9ec1a223eab8b072368b2dacee87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74dc9ec1a223eab8b072368b2dacee87">&#9670;&nbsp;</a></span>IsLayerSupported() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td>
          <td class="paramname"><em>backendId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01278">1278</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00680">armnn::AttemptBackendAssignment()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l00400">LoadedNetwork::GetOutputTensorInfo()</a>, <a class="el" href="_neon_workload_factory_8cpp_source.xhtml#l00034">NeonWorkloadFactory::IsLayerSupported()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00043">ClWorkloadFactory::IsLayerSupported()</a>, and <a class="el" href="_ref_workload_factory_8cpp_source.xhtml#l00099">RefWorkloadFactory::IsLayerSupported()</a>.</p>
<div class="fragment"><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;{</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    <span class="keywordflow">return</span> IsLayerConfigurationSupported(backendId, connectableLayer, dataType, outReasonIfUnsupported);</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7d94ea841143b76fe08ccb308839bfd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d94ea841143b76fe08ccb308839bfd7">&#9670;&nbsp;</a></span>IsLayerSupported() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01286">1286</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;{</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;    <span class="keyword">auto</span> layer = PolymorphicDowncast&lt;const Layer*&gt;(&amp;connectableLayer);</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;    <span class="keywordflow">return</span> IsLayerConfigurationSupported(layer-&gt;GetBackendId(), connectableLayer, dataType, outReasonIfUnsupported);</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aeaff50773427132e1066a7de56a53db1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeaff50773427132e1066a7de56a53db1">&#9670;&nbsp;</a></span>IsLayerSupported() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01295">1295</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;{</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    <span class="keyword">auto</span> layer = PolymorphicDowncast&lt;const Layer*&gt;(&amp;connectableLayer);</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;    <span class="keywordflow">return</span> IsLayerConfigurationSupported(layer-&gt;GetBackendId(),</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;                                         connectableLayer,</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;                                         dataType,</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;                                         outReasonIfUnsupported,</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;                                         modelOptions);</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a52ba8d60c6582a847ef7bc914116d394"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52ba8d60c6582a847ef7bc914116d394">&#9670;&nbsp;</a></span>IsLayerSupported() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td>
          <td class="paramname"><em>backendId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01308">1308</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;{</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;    <span class="keywordflow">return</span> IsLayerConfigurationSupported(backendId,</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;                                         connectableLayer,</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;                                         dataType,</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;                                         outReasonIfUnsupported,</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;                                         modelOptions);</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a37f4eba7877deb34f4d8d64c9bcb9ab5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37f4eba7877deb34f4d8d64c9bcb9ab5">&#9670;&nbsp;</a></span>SupportsSubTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SupportsSubTensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">NeonWorkloadFactory</a>, <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">SampleDynamicWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aed0a782f32856bde72bc10d9381dc11e">WorkloadFactoryBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l01952">ConcatDifferentInputOutputQParamTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00276">Concatenate()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02111">ConcatTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02707">ConcatUint16Test()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02423">ConcatUint8DifferentQParamsTest()</a>, and <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02569">ConcatUint8Test()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/backendsCommon/<a class="el" href="_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a></li>
<li>src/backends/backendsCommon/<a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></li>
    <li class="footer">Generated on Mon May 10 2021 16:39:55 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
